{
  "version": 3,
  "sources": [
    "../node_modules/browser-pack/_prelude.js",
    "../lib/assertions.js",
    "../lib/bdd.js",
    "../lib/cookies.js",
    "../lib/hook.js",
    "../lib/index.js",
    "../lib/log.js",
    "../lib/options.js",
    "../lib/response.js",
    "../lib/runnable.js",
    "../lib/state.js",
    "../node_modules/assertion-error/index.js",
    "../node_modules/chai/index.js",
    "../node_modules/chai/lib/chai.js",
    "../node_modules/chai/lib/chai/assertion.js",
    "../node_modules/chai/lib/chai/config.js",
    "../node_modules/chai/lib/chai/core/assertions.js",
    "../node_modules/chai/lib/chai/interface/assert.js",
    "../node_modules/chai/lib/chai/interface/expect.js",
    "../node_modules/chai/lib/chai/interface/should.js",
    "../node_modules/chai/lib/chai/utils/addChainableMethod.js",
    "../node_modules/chai/lib/chai/utils/addLengthGuard.js",
    "../node_modules/chai/lib/chai/utils/addMethod.js",
    "../node_modules/chai/lib/chai/utils/addProperty.js",
    "../node_modules/chai/lib/chai/utils/compareByInspect.js",
    "../node_modules/chai/lib/chai/utils/expectTypes.js",
    "../node_modules/chai/lib/chai/utils/flag.js",
    "../node_modules/chai/lib/chai/utils/getActual.js",
    "../node_modules/chai/lib/chai/utils/getEnumerableProperties.js",
    "../node_modules/chai/lib/chai/utils/getMessage.js",
    "../node_modules/chai/lib/chai/utils/getOwnEnumerableProperties.js",
    "../node_modules/chai/lib/chai/utils/getOwnEnumerablePropertySymbols.js",
    "../node_modules/chai/lib/chai/utils/getProperties.js",
    "../node_modules/chai/lib/chai/utils/index.js",
    "../node_modules/chai/lib/chai/utils/inspect.js",
    "../node_modules/chai/lib/chai/utils/isNaN.js",
    "../node_modules/chai/lib/chai/utils/isProxyEnabled.js",
    "../node_modules/chai/lib/chai/utils/objDisplay.js",
    "../node_modules/chai/lib/chai/utils/overwriteChainableMethod.js",
    "../node_modules/chai/lib/chai/utils/overwriteMethod.js",
    "../node_modules/chai/lib/chai/utils/overwriteProperty.js",
    "../node_modules/chai/lib/chai/utils/proxify.js",
    "../node_modules/chai/lib/chai/utils/test.js",
    "../node_modules/chai/lib/chai/utils/transferFlags.js",
    "../node_modules/check-error/index.js",
    "../node_modules/cookiejar/cookiejar.js",
    "../node_modules/deep-eql/index.js",
    "../node_modules/deep-eql/node_modules/type-detect/index.js",
    "../node_modules/get-func-name/index.js",
    "../node_modules/ip-regex/index.js",
    "../node_modules/is-ip/index.js",
    "../node_modules/pathval/index.js",
    "../node_modules/punycode/punycode.js",
    "../node_modules/querystring-es3/decode.js",
    "../node_modules/querystring-es3/encode.js",
    "../node_modules/querystring-es3/index.js",
    "../node_modules/type-detect/index.js",
    "../node_modules/url/url.js",
    "../node_modules/url/util.js"
  ],
  "names": [
    "f",
    "exports",
    "module",
    "define",
    "amd",
    "g",
    "window",
    "global",
    "self",
    "this",
    "postmanBDD",
    "e",
    "t",
    "n",
    "r",
    "s",
    "o",
    "u",
    "a",
    "require",
    "i",
    "Error",
    "code",
    "l",
    "call",
    "length",
    "1",
    "chaiHttp",
    "contentTypes",
    "addProperty",
    "getHeader",
    "_obj",
    "assert",
    "indexOf",
    "Assertion",
    "addMethod",
    "to",
    "have",
    "property",
    "status",
    "method",
    "Object",
    "keys",
    "headers",
    "arguments",
    "RegExp",
    "test",
    "isIP",
    "forEach",
    "wasRedirected",
    "redirects",
    "join",
    "url",
    "parse",
    "query",
    "getCookies",
    "getCookie",
    "value",
    "tv4",
    "validate",
    "flag",
    "error",
    "dataPath",
    "schemaPath",
    "message",
    "substr",
    "split",
    "c",
    "SyntaxError",
    "toLowerCase",
    "cookies",
    "parseRequestCookies",
    "json",
    "text",
    "html",
    "xml",
    "PostmanBDD",
    "state",
    "State",
    "hooks",
    "before",
    "Hook",
    "after",
    "beforeEach",
    "afterEach",
    "prototype",
    "bind",
    "describe",
    "it",
    "Runnable",
    "push",
    "stack",
    "oneTimeInitialization",
    "run",
    "isFinished",
    "pop",
    "results",
    "result",
    "isStarted",
    "CookieJar",
    "CookieAccessInfo",
    "find",
    "name",
    "map",
    "trim",
    "setCookies",
    "All",
    "parseResponseCookies",
    "type",
    "runnables",
    "inAHook",
    "isHook",
    "initPostmanBDD",
    "log",
    "info",
    "initBDD",
    "initSuperAgent",
    "initChai",
    "response",
    "superAgent",
    "Response",
    "chai",
    "expect",
    "should",
    "use",
    "assertions",
    "options",
    "reset",
    "levels",
    "isEnabled",
    "logLevel",
    "errorToPOJO",
    "concat",
    "reduce",
    "console",
    "apply",
    "responseCode",
    "statusType",
    "Math",
    "floor",
    "ok",
    "redirect",
    "clientError",
    "serverError",
    "accepted",
    "noContent",
    "badRequest",
    "unauthorized",
    "notAcceptable",
    "notFound",
    "forbidden",
    "time",
    "responseTime",
    "header",
    "parseHeaders",
    "exec",
    "charset",
    "parseCookies",
    "responseBody",
    "body",
    "parseResponeBody",
    "responseHeaders",
    "pojo",
    "responseCookies",
    "JSON",
    "xml2Json",
    "stringify",
    "postman",
    "getResponseHeader",
    "getResponseCookie",
    "counters",
    "isNamed",
    "title",
    "fn",
    "currentPath",
    "debug",
    "success",
    "failure",
    "resetTests",
    "_pathCounter",
    "tests",
    "some",
    "exclude",
    "slice",
    "AssertionError",
    "showDiff",
    "callee",
    "captureStackTrace",
    "create",
    "constructor",
    "toJSON",
    "used",
    "version",
    "util",
    "config",
    "assertion",
    "core",
    "proxify",
    "defineProperty",
    "get",
    "warn",
    "includeStack",
    "set",
    "addChainableMethod",
    "overwriteProperty",
    "overwriteMethod",
    "overwriteChainableMethod",
    "getMessage",
    "d",
    "getActual",
    "actual",
    "expected",
    "truncateThreshold",
    "useProxy",
    "proxyExcludedKeys",
    "D",
    "charAt",
    "isNaN",
    "expectTypes",
    "h",
    "S",
    "has",
    "p",
    "eql",
    "inspect",
    "b",
    "N",
    "transferFlags",
    "checkError",
    "compatibleConstructor",
    "errorMessage",
    "Symbol",
    "hasInstance",
    "getName",
    "getPathInfo",
    "hasOwnProperty",
    "exists",
    "hasProperty",
    "getOwnPropertyDescriptor",
    "m",
    "x",
    "v",
    "w",
    "Array",
    "getOwnEnumerableProperties",
    "String",
    "every",
    "sort",
    "compareByInspect",
    "y",
    "is",
    "Boolean",
    "getConstructorName",
    "toString",
    "compatibleInstance",
    "compatibleMessage",
    "M",
    "j",
    "objDisplay",
    "k",
    "abs",
    "O",
    "splice",
    "C",
    "be",
    "an",
    "P",
    "E",
    "L",
    "q",
    "size",
    "toUTCString",
    "isExtensible",
    "isSealed",
    "isFrozen",
    "isFinite",
    "fail",
    "operator",
    "isOk",
    "isNotOk",
    "not",
    "equal",
    "notEqual",
    "strictEqual",
    "notStrictEqual",
    "deepEqual",
    "deepStrictEqual",
    "notDeepEqual",
    "isAbove",
    "above",
    "isAtLeast",
    "least",
    "isBelow",
    "below",
    "isAtMost",
    "most",
    "isTrue",
    "true",
    "isNotTrue",
    "isFalse",
    "false",
    "isNotFalse",
    "isNull",
    "isNotNull",
    "NaN",
    "isNotNaN",
    "exist",
    "notExists",
    "isUndefined",
    "isDefined",
    "isFunction",
    "isNotFunction",
    "isObject",
    "isNotObject",
    "isArray",
    "isNotArray",
    "isString",
    "isNotString",
    "isNumber",
    "isNotNumber",
    "finite",
    "isBoolean",
    "isNotBoolean",
    "typeOf",
    "notTypeOf",
    "instanceOf",
    "notInstanceOf",
    "include",
    "notInclude",
    "deepInclude",
    "deep",
    "notDeepInclude",
    "nestedInclude",
    "nested",
    "notNestedInclude",
    "deepNestedInclude",
    "notDeepNestedInclude",
    "ownInclude",
    "own",
    "notOwnInclude",
    "deepOwnInclude",
    "notDeepOwnInclude",
    "match",
    "notMatch",
    "notProperty",
    "propertyVal",
    "notPropertyVal",
    "deepPropertyVal",
    "notDeepPropertyVal",
    "ownProperty",
    "notOwnProperty",
    "ownPropertyVal",
    "notOwnPropertyVal",
    "deepOwnPropertyVal",
    "notDeepOwnPropertyVal",
    "nestedProperty",
    "notNestedProperty",
    "nestedPropertyVal",
    "notNestedPropertyVal",
    "deepNestedPropertyVal",
    "notDeepNestedPropertyVal",
    "lengthOf",
    "hasAnyKeys",
    "any",
    "hasAllKeys",
    "all",
    "containsAllKeys",
    "contain",
    "doesNotHaveAnyKeys",
    "doesNotHaveAllKeys",
    "hasAnyDeepKeys",
    "hasAllDeepKeys",
    "containsAllDeepKeys",
    "doesNotHaveAnyDeepKeys",
    "doesNotHaveAllDeepKeys",
    "throws",
    "throw",
    "doesNotThrow",
    "closeTo",
    "approximately",
    "sameMembers",
    "same",
    "members",
    "notSameMembers",
    "sameDeepMembers",
    "notSameDeepMembers",
    "sameOrderedMembers",
    "ordered",
    "notSameOrderedMembers",
    "sameDeepOrderedMembers",
    "notSameDeepOrderedMembers",
    "includeMembers",
    "notIncludeMembers",
    "includeDeepMembers",
    "notIncludeDeepMembers",
    "includeOrderedMembers",
    "notIncludeOrderedMembers",
    "includeDeepOrderedMembers",
    "notIncludeDeepOrderedMembers",
    "oneOf",
    "changes",
    "change",
    "changesBy",
    "by",
    "doesNotChange",
    "changesButNotBy",
    "but",
    "increases",
    "increase",
    "increasesBy",
    "doesNotIncrease",
    "increasesButNotBy",
    "decreases",
    "decrease",
    "decreasesBy",
    "doesNotDecrease",
    "doesNotDecreaseBy",
    "decreasesButNotBy",
    "ifError",
    "extensible",
    "isNotExtensible",
    "sealed",
    "isNotSealed",
    "frozen",
    "isNotFrozen",
    "isEmpty",
    "empty",
    "isNotEmpty",
    "Number",
    "valueOf",
    "enumerable",
    "configurable",
    "writable",
    "Throw",
    "Should",
    "addLengthGuard",
    "canSetPrototype",
    "setPrototypeOf",
    "testFn",
    "excludeNames",
    "getOwnPropertyNames",
    "filter",
    "Function",
    "chainingBehavior",
    "__methods",
    "fnLengthDesc",
    "isProxyEnabled",
    "__flags",
    "replace",
    "getOwnEnumerablePropertySymbols",
    "getOwnPropertySymbols",
    "getPrototypeOf",
    "pathval",
    "formatValue",
    "showHidden",
    "seen",
    "stylize",
    "formatPrimitive",
    "isDOMElement",
    "outerHTML",
    "document",
    "xmlVersion",
    "XMLSerializer",
    "serializeToString",
    "createElementNS",
    "appendChild",
    "cloneNode",
    "innerHTML",
    "getEnumerableProperties",
    "getProperties",
    "isError",
    "isRegExp",
    "isDate",
    "Date",
    "formatError",
    "isTypedArray",
    "formatArray",
    "formatTypedArray",
    "formatProperty",
    "reduceToSingleString",
    "objectToString",
    "HTMLElement",
    "nodeType",
    "nodeName",
    "Proxy",
    "Reflect",
    "stringDistance",
    "max",
    "min",
    "builtins",
    "_",
    "getFunctionName",
    "functionNameMatch",
    "domain",
    "path",
    "secure",
    "script",
    "expiration_date",
    "explicit_path",
    "explicit_domain",
    "noscript",
    "setCookie",
    "now",
    "collidesWith",
    "matches",
    "toValueString",
    "freeze",
    "Cookie",
    "toGMTString",
    "FakeMap",
    "clear",
    "memoizeCompare",
    "isPrimitive",
    "memoizeSet",
    "MemoizeMap",
    "comparator",
    "extensiveDeepEqual",
    "simpleEqual",
    "memoize",
    "extensiveDeepEqualByType",
    "iterableEqual",
    "regexpEqual",
    "generatorEqual",
    "Uint8Array",
    "buffer",
    "entriesEqual",
    "objectEqual",
    "getGeneratorEntries",
    "hasIteratorFunction",
    "iterator",
    "getIteratorEntries",
    "next",
    "done",
    "getEnumerableKeys",
    "keysEqual",
    "values",
    "delete",
    "WeakMap",
    "getPrototypeOfExists",
    "promiseExists",
    "Promise",
    "globalObject",
    "isDom",
    "htmlElementExists",
    "isArrayExists",
    "symbolExists",
    "mapExists",
    "Map",
    "setExists",
    "Set",
    "weakMapExists",
    "weakSetExists",
    "WeakSet",
    "dataViewExists",
    "DataView",
    "symbolIteratorExists",
    "symbolToStringTagExists",
    "toStringTag",
    "setEntriesExists",
    "entries",
    "mapEntriesExists",
    "setIteratorPrototype",
    "mapIteratorPrototype",
    "arrayIteratorExists",
    "arrayIteratorPrototype",
    "stringIteratorExists",
    "stringIteratorPrototype",
    "toStringLeftSliceLength",
    "toStringRightSliceLength",
    "location",
    "navigator",
    "mimeTypes",
    "plugins",
    "tagName",
    "typeDetect",
    "getFuncName",
    "v4",
    "v6",
    "ip",
    "exact",
    "ipRegex",
    "parsePath",
    "parseFloat",
    "internalGetPathValue",
    "internalSetPathValue",
    "parent",
    "getPathValue",
    "setPathValue",
    "RangeError",
    "T",
    "charCodeAt",
    "I",
    "A",
    "lastIndexOf",
    "F",
    "overflow",
    "not-basic",
    "invalid-input",
    "fromCharCode",
    "ucs2",
    "decode",
    "encode",
    "toASCII",
    "toUnicode",
    "punycode",
    "maxKeys",
    "decodeURIComponent",
    "stringifyPrimitive",
    "objectKeys",
    "encodeURIComponent",
    "Url",
    "protocol",
    "slashes",
    "auth",
    "host",
    "port",
    "hostname",
    "hash",
    "search",
    "pathname",
    "href",
    "urlParse",
    "urlFormat",
    "format",
    "urlResolve",
    "resolve",
    "urlResolveObject",
    "resolveObject",
    "protocolPattern",
    "portPattern",
    "simplePathPattern",
    "delims",
    "unwise",
    "autoEscape",
    "nonHostChars",
    "hostEndingChars",
    "hostnameMaxLen",
    "hostnamePartPattern",
    "hostnamePartStart",
    "unsafeProtocol",
    "javascript",
    "javascript:",
    "hostlessProtocol",
    "slashedProtocol",
    "http",
    "https",
    "ftp",
    "gopher",
    "file",
    "http:",
    "https:",
    "ftp:",
    "gopher:",
    "file:",
    "querystring",
    "TypeError",
    "parseHost",
    "U",
    "unshift",
    "escape",
    "R",
    "shift",
    "isNullOrUndefined"
  ],
  "mappings": "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",
  "file": "postman-bdd.min.js",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "'use strict';\n\nvar isIP = require('is-ip');\nvar url = require('url');\nvar cookies = require('./cookies');\n\nvar contentTypes = {\n  json: 'application/json',\n  text: 'text/plain',\n  html: 'text/html',\n  xml: 'application/xml',\n};\n\nmodule.exports = chaiHttp;\n\n/**\n * This module is based on chai-http\n *\n * Copyright(c) 2011-2012 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n *\n * @see {@link https://github.com/chaijs/chai-http}\n */\nfunction chaiHttp (chai, _) {\n  var Assertion = chai.Assertion;\n\n  /**\n   * Assert that a response has a supplied status.\n   *\n   * @example\n   * expect(res).to.have.status(200);\n   *\n   * @param {Number} status number\n   * @name status\n   */\n  Assertion.addMethod('status', function (code) {\n    new Assertion(this._obj).to.have.property('status');\n    var status = this._obj.status;\n\n    this.assert(\n      status === code,\n      'expected the response to have status code #{exp} but got #{act}',\n      'expected the response to not have status code #{act}',\n      code,\n      status\n    );\n  });\n\n  /**\n   * Assert that a `Response` or `Request` object has headers.\n   *\n   * @example:\n   * expect(req).to.have.headers;\n   *\n   * @name headers\n   */\n  Assertion.addProperty('headers', function () {\n    var type = this._obj.method ? 'request' : 'response';\n\n    this.assert(\n      Object.keys(this._obj.headers || {}).length > 0,\n      'expected the ' + type + ' to have headers',\n      'expected the ' + type + ' to not have any headers'\n    );\n  });\n\n  /**\n   * Assert that a `Response` or `Request` object has a header.\n   * If a value is provided, equality to value will be asserted.\n   * You may also pass a regular expression to check.\n   *\n   * @example:\n   * expect(req).to.have.header('x-api-key');\n   * expect(req).to.have.header('content-type', 'text/plain');\n   * expect(req).to.have.header('content-type', /^text/);\n   *\n   * @param {String} header key (case insensitive)\n   * @param {String|RegExp} header value (optional)\n   * @name header\n   */\n  Assertion.addMethod('header', function (key, value) {\n    var header = getHeader(this._obj, key);\n    var headerExists = header !== undefined && header !== null;\n\n    if (arguments.length < 2) {\n      this.assert(\n        headerExists,\n        'expected header #{exp} to exist',\n        'expected header #{exp} to not exist',\n        key,\n        header\n      );\n    }\n    else if (value instanceof RegExp) {\n      this.assert(\n        headerExists && value.test(header),\n        \"expected header '\" + key + \"' to match #{exp} but got #{act}\",\n        \"expected header '\" + key + \"' to not match #{exp} but got #{act}\",\n        value,\n        headerExists ? header : '<header-not-set>'\n      );\n    }\n    else {\n      this.assert(\n        headerExists && header === value,\n        \"expected header '\" + key + \"' to have value #{exp} but got #{act}\",\n        \"expected header '\" + key + \"' to not have value #{exp}\",\n        value,\n        headerExists ? header : '<header-not-set>'\n      );\n    }\n  });\n\n  /**\n   * Assert that a string represents valid ip address.\n   *\n   * @example:\n   * expect('127.0.0.1').to.be.an.ip;\n   * expect('2001:0db8:85a3:0000:0000:8a2e:0370:7334').to.be.an.ip;\n   *\n   * @name ip\n   */\n  Assertion.addProperty('ip', function () {\n    this.assert(\n      isIP(this._obj),\n      'expected #{this} to be an ip',\n      'expected #{this} to not be an ip'\n    );\n  });\n\n  /**\n   * Assert that a `Response` or `Request` object has a given content-type.\n   *\n   * @example:\n   * expect(req).to.be.json;\n   * expect(req).to.be.html;\n   * expect(req).to.be.text;\n   *\n   * @name json\n   * @name html\n   * @name text\n   */\n  function checkContentType (name) {\n    var val = contentTypes[name];\n\n    Assertion.addProperty(name, function () {\n      var contentType = getHeader(this._obj, 'content-type');\n\n      this.assert(\n        contentType && contentType.indexOf(val) >= 0,\n        'expected the response type to be #{exp} but got #{act}',\n        'expected the response type to not be #{exp} (#{act})',\n        name,\n        contentType || '<content-type-not-set>'\n      );\n    });\n  }\n\n  Object\n    .keys(contentTypes)\n    .forEach(checkContentType);\n\n  /**\n   * Assert that a `Response` object has a redirect status code.\n   *\n   * @example:\n   * expect(res).to.redirect;\n   *\n   * @name redirect\n   */\n  Assertion.addProperty('redirect', function () {\n    var status = this._obj.status;\n\n    this.assert(\n      wasRedirected(this._obj),\n      'expected redirect status code but got ' + status,\n      'expected not to redirect but got ' + status + ' status'\n    );\n  });\n\n  /**\n   * ### .redirectTo\n   *\n   * Assert that a `Response` object redirects to the supplied location.\n   *\n   * ```js\n   * expect(res).to.redirectTo('http://example.com');\n   * ```\n   *\n   * @param {String} location url\n   * @name redirectTo\n   */\n  Assertion.addMethod('redirectTo', function (destination) {\n    var redirects = this._obj.redirects;\n    var isARedirect = wasRedirected(this._obj);\n    var status = this._obj.status;\n    var location = getHeader(this._obj, 'location');\n\n    if (redirects && redirects.length) {\n      this.assert(\n        redirects.indexOf(destination) > -1,\n        'expected redirect to ' + destination + ' but got ' + redirects.join(' then '),\n        'expected not to redirect to ' + destination + ' but got ' + redirects.join(' then ')\n      );\n    }\n    else {\n      this.assert(\n        isARedirect && location === destination,\n        'expected redirect to #{exp} but got #{act}',\n        'expected not to redirect to #{exp}',\n        destination,\n        isARedirect ? location : status\n      );\n    }\n  });\n\n  /**\n   * Assert that a `Response` or `Request` object has query string parameters.\n   *\n   * @example:\n   * expect(req).to.have.params;\n   *\n   * @name params\n   */\n  Assertion.addProperty('params', function () {\n    var params = url.parse(this._obj.url, true).query;\n\n    this.assert(\n      Object.keys(params).length > 0,\n      'expected the request to have query parameters',\n      'expected the request to not have any query parameters'\n    );\n  });\n\n  /**\n   * Assert that a `Request` object has a query string parameter with a given\n   * key, (optionally) equal to value\n   *\n   * @example:\n   * expect(req).to.have.param('orderby');\n   * expect(req).to.have.param('orderby', 'date');\n   * expect(req).to.not.have.param('limit');\n   *\n   * @param {String} parameter name\n   * @param {String} parameter value\n   * @name param\n   */\n  Assertion.addMethod('param', function (name, value) {\n    var params = url.parse(this._obj.url, true).query;\n    var param = params[name];\n    var paramExists = param !== undefined && param !== null;\n\n    if (arguments.length < 2) {\n      this.assert(\n        paramExists,\n        'expected query parameter #{exp} to exist',\n        'expected query parameter #{exp} to not exist',\n        name,\n        param\n      );\n    }\n    else if (value instanceof RegExp) {\n      this.assert(\n        paramExists && value.test(param),\n        \"expected query parameter '\" + name + \"' to match #{exp} but got #{act}\",\n        \"expected query parameter '\" + name + \"' to not match #{exp} but got #{act}\",\n        value,\n        paramExists ? param : '<parameter-does-not-exist>'\n      );\n    }\n    else {\n      this.assert(\n        paramExists && param === value,\n        \"expected query parameter '\" + name + \"' to have value #{exp} but got #{act}\",\n        \"expected query parameter '\" + name + \"' to not have value #{exp}\",\n        value,\n        paramExists ? param : '<parameter-does-not-exist>'\n      );\n    }\n  });\n\n  /**\n   * Assert that a `Response` or `Request` object has cookies.\n   *\n   * @example:\n   * expect(req).to.have.cookies;\n   *\n   * @name cookies\n   */\n  Assertion.addProperty('cookies', function () {\n    var type = this._obj.method ? 'request' : 'response';\n    var allCookies = getCookies(this._obj);\n\n    this.assert(\n      allCookies.length > 0,\n      'expected the ' + type + ' to have cookies',\n      'expected the ' + type + ' to not have any cookies'\n    );\n  });\n\n  /**\n   * Assert that a `Request` or `Response` object has a cookie header with a\n   * given key, (optionally) equal to value\n   *\n   * @example:\n   * expect(req).to.have.cookie('session_id');\n   * expect(req).to.have.cookie('session_id', '1234');\n   * expect(req).to.not.have.cookie('PHPSESSID');\n   * expect(res).to.have.cookie('session_id');\n   * expect(res).to.have.cookie('session_id', '1234');\n   * expect(res).to.not.have.cookie('PHPSESSID');\n   *\n   * @param {String} parameter name\n   * @param {String} parameter value\n   * @name cookie\n   */\n  Assertion.addMethod('cookie', function (name, value) {\n    var cookie = getCookie(this._obj, name) || {};\n    var cookieExists = cookie.value !== undefined && cookie.value !== null;\n\n    if (arguments.length < 2) {\n      this.assert(\n        cookieExists,\n        'expected cookie #{exp} to exist',\n        'expected cookie #{exp} to not exist',\n        name,\n        cookie.value\n      );\n    }\n    else if (value instanceof RegExp) {\n      this.assert(\n        cookieExists && value.test(cookie.value),\n        \"expected cookie '\" + name + \"' to match #{exp} but got #{act}\",\n        \"expected cookie '\" + name + \"' to not match #{exp} but got #{act}\",\n        value,\n        cookieExists ? cookie.value : '<cookie-not-set>'\n      );\n    }\n    else {\n      this.assert(\n        cookieExists && cookie.value === value,\n        \"expected cookie '\" + name + \"' to have value #{exp} but got #{act}\",\n        \"expected cookie '\" + name + \"' to not have value #{exp}\",\n        value,\n        cookieExists ? cookie.value : '<cookie-not-set>'\n      );\n    }\n  });\n\n  /**\n   * Asserts that the object matches the given JSON schema\n   *\n   * @example:\n   * expect(req.body).to.have.scheam(myJsonSchema);\n   *\n   * @param {object} The JSON schema to validate against\n   * @name schema\n   */\n  chai.Assertion.addMethod('schema', function (schema) {\n    var valid = tv4.validate(this._obj, schema);\n    var negate = _.flag(this, 'negate');\n\n    if ((valid && negate) || (!valid && !negate)) {\n      var dataPath = tv4.error.dataPath;\n      var schemaPath = tv4.error.schemaPath;\n      var message = tv4.error.message;\n\n      if (dataPath) {\n        var propPath = dataPath.substr(1).split('/').join('.');\n        message = propPath + ' is invalid. ' + message;\n      }\n\n      var error = new SyntaxError(message);\n      error.dataPath = dataPath;\n      error.schemaPath = schemaPath;\n      throw error;\n    }\n  });\n}\n\n/**\n * Return a header from `Request` or `Response` object.\n *\n * @param {Request|Response} object\n * @param {String} Header\n * @returns {String|Undefined}\n */\nfunction getHeader (obj, key) {\n  // superAgent.Response object\n  if (obj.getHeader) {\n    return obj.getHeader(key);\n  }\n\n  // Postman `request` object\n  key = (key || '').toLowerCase();\n  var keys = Object.keys(obj.headers);\n  for (var i = 0; i < keys.length; i++) {\n    if (keys[i].toLowerCase() === key) {\n      return obj.headers[keys[i]];\n    }\n  }\n}\n\n/**\n * Returns ALL cookies from a `Request` or `Response` object.\n *\n * @param {Request|Response} object\n * @returns {object[]}\n */\nfunction getCookies (obj) {\n  // superAgent.Response` object\n  if (obj.cookies) {\n    return obj.cookies;\n  }\n\n  // Postman `request` object\n  var header = getHeader(obj, 'cookie');\n  return cookies.parseRequestCookies(header);\n}\n\n/**\n * Returns a cookie from `Request` or `Response` object.\n *\n * @param {Request|Response} object\n * @param {String} name\n * @returns {String|Undefined}\n */\nfunction getCookie (obj, name) {\n  // superAgent.Response object\n  if (obj.getCookie) {\n    return obj.getCookie(name);\n  }\n\n  // Postman `request` object\n  var allCookies = getCookies(obj);\n  return cookies.getCookie(allCookies, name);\n}\n\n/**\n * Determines whether a `Request` or `Response` object has been redirected.\n *\n * @param {Request|Response} object\n * @returns {Boolean}\n */\nfunction wasRedirected (obj) {\n  var redirectCodes = [301, 302, 303, 307, 308];\n  var redirects = obj.redirects;\n  var status = obj.status;\n\n  return redirectCodes.indexOf(status) >= 0 || redirects && redirects.length;\n}\n",
    "'use strict';\n\nvar Runnable = require('./runnable');\nvar Hook = require('./hook');\nvar State = require('./state');\n\nmodule.exports = PostmanBDD;\n\n/**\n * The Postman BDD runtime\n */\nfunction PostmanBDD () {\n  var state = this.state = new State();\n\n  this.hooks = {\n    before: new Hook('before', state),\n    after: new Hook('after', state),\n    beforeEach: new Hook('beforeEach', state),\n    afterEach: new Hook('afterEach', state),\n  };\n\n  this.before = PostmanBDD.prototype.before.bind(this);\n  this.after = PostmanBDD.prototype.after.bind(this);\n  this.beforeEach = PostmanBDD.prototype.beforeEach.bind(this);\n  this.afterEach = PostmanBDD.prototype.afterEach.bind(this);\n  this.describe = PostmanBDD.prototype.describe.bind(this);\n  this.it = PostmanBDD.prototype.it.bind(this);\n}\n\n/**\n * Registers a function to be called before any tests for a request.\n *\n * @param {string} [title] - Optinoal title for this hook\n * @param {function} fn - The hook to run\n */\nPostmanBDD.prototype.before = function (title, fn) {\n  this.hooks.before.push(title, fn);\n};\n\n/**\n * Registers a function to be called after all tests for a request.\n *\n * @param {string} [title] - Optinoal title for this hook\n * @param {function} fn - The hook to run\n */\nPostmanBDD.prototype.after = function (title, fn) {\n  this.hooks.after.push(title, fn);\n};\n\n/**\n * Registers a function to be called before each test.\n *\n * @param {string} [title] - Optinoal title for this hook\n * @param {function} fn - The hook to run\n */\nPostmanBDD.prototype.beforeEach = function (title, fn) {\n  this.hooks.beforeEach.push(title, fn);\n};\n\n/**\n * Registers a function to be called after each test.\n *\n * @param {string} [title] - Optinoal title for this hook\n * @param {function} fn - The hook to run\n */\nPostmanBDD.prototype.afterEach = function (title, fn) {\n  this.hooks.afterEach.push(title, fn);\n};\n\n/**\n * Runs a test suite.\n *\n * Any \"before\" hooks are run first.  Any \"after\" hooks are run afterward.\n *\n * @param {string} [title] - Optional title for this test suite\n * @param {function} fn - The test suite to run\n * @returns {object} - An object with test names as keys, and boolean results as values\n */\nPostmanBDD.prototype.describe = function (title, fn) {\n  var runnable = new Runnable('describe', this.state, title, fn);\n  this.state.stack.push(runnable);\n\n  this.oneTimeInitialization();\n\n  runnable.run();\n\n  if (this.state.isFinished()) {\n    // This is a top-level `describe` block, so run any `after` hooks\n    this.hooks.after.run();\n  }\n\n  this.state.stack.pop();\n  return this.state.results;\n};\n\n/**\n * Runs a single test\n *\n * Any \"beforeEach\" hooks are run first.  Any \"afterEach\" hooks are run after.\n *\n * @param {string} [title] - Optional title for this test\n * @param {function} fn - The test to run\n * @returns {boolean} - The boolean result of the test\n */\nPostmanBDD.prototype.it = function (title, fn) {\n  var runnable = new Runnable('it', this.state, title, fn);\n  this.state.stack.push(runnable);\n\n  this.oneTimeInitialization();\n  this.hooks.beforeEach.run();\n\n  runnable.run();\n\n  this.hooks.afterEach.run();\n  this.state.stack.pop();\n  return runnable.result;\n};\n\n/**\n * Inititializes state and runs `before` hooks before the first Runnable\n * in a new test script.\n */\nPostmanBDD.prototype.oneTimeInitialization = function () {\n  if (!this.state.isStarted()) {\n    // This is the first Runnable, so run the `before` hooks\n    this.hooks.before.run();\n  }\n};\n\n",
    "'use strict';\n\nvar CookieJar = require('cookiejar').CookieJar;\nvar CookieAccessInfo = require('cookiejar').CookieAccessInfo;\n\nmodule.exports = {\n  /**\n   * Returns the cookie with the specified name from an array of cookies.\n   *\n   * @param {object[]} allCookies\n   * @param {string} name\n   * @returns {object|undefined}\n   */\n  getCookie: function (allCookies, name) {\n    name = (name || '').toLowerCase();\n\n    var foundCookie = allCookies.find(function (cookie) {\n      return cookie && cookie.name.toLowerCase() === name;\n    });\n\n    return foundCookie;\n  },\n\n  /**\n   * Parses a \"Cookie\" header and returns an array of cookie objects.\n   *\n   * @param {string} [header]\n   * @returns {object[]}\n   */\n  parseRequestCookies: function (header) {\n    var cookieJar = new CookieJar();\n\n    if (header) {\n      var cookies = header\n        .split(';')\n        .map(function (cookie) {\n          return cookie.trim();\n        });\n\n      cookieJar.setCookies(cookies);\n    }\n\n    var allCookies = cookieJar.getCookies(CookieAccessInfo.All);\n    return allCookies;\n  },\n\n  /**\n   * Parses one or more \"Set-Cookie\" headers and returns an array of cookie objects.\n   *\n   * @param {string|string[]} [headers] - The value of the \"Set-Cookie\" header(s)\n   * @returns {object[]}\n   */\n  parseResponseCookies: function (headers) {\n    var cookieJar = new CookieJar();\n\n    if (headers) {\n      // The `setCookies` method supports a string or array of strings\n      cookieJar.setCookies(headers);\n    }\n\n    var allCookies = cookieJar.getCookies(CookieAccessInfo.All);\n    return allCookies;\n  },\n};\n",
    "'use strict';\n\nvar Runnable = require('./runnable');\n\nmodule.exports = Hook;\n\n/**\n * A hook is a list of runnables to run before/after a `describe` or `it` block.\n *\n * @param {string} type - The type of the hook (e.g. \"before\", \"afterEach\", etc)\n * @param {State} state - An object containing the state of the current test script\n */\nfunction Hook (type, state) {\n  this.type = type;\n  this.state = state;\n  this.runnables = [];\n}\n\n/**\n * Runs all of this hook's runnables\n */\nHook.prototype.run = function () {\n  var me = this;\n\n  // Don't run if we're already in a hook\n  if (!this.state.inAHook()) {\n    this.runnables.forEach(function (runnable) {\n      me.state.stack.push(runnable);\n      runnable.run();\n      me.state.stack.pop();\n    });\n  }\n};\n\n/**\n * Adds a new runnable for this hook\n *\n * @param {string} [title] - Optional title for the runnable\n * @param {function} [fn] - The function to run\n */\nHook.prototype.push = function (title, fn) {\n  var runnable = new Runnable(this.type, this.state, title, fn);\n  runnable.isHook = true;\n  this.runnables.push(runnable);\n};\n",
    "// Disable \"strict mode\" for this file,\n// so we can define variables with global scope\n/* eslint strict:off */\n\nvar PostmanBDD = require('./bdd');\nvar superAgent = require('./response');\nvar assertions = require('./assertions');\nvar options = require('./options');\nvar log = require('./log');\n\n// Expose the Postman BDD options\nmodule.exports = options;\n\n// Expose a `reset()` method for testing purposes\nmodule.exports.reset = initPostmanBDD;\n\n// Initialize Postman BDD\ninitPostmanBDD();\n\n/**\n * Defines (or redefines) all Postman BDD globals\n */\nfunction initPostmanBDD () {\n  log.info('Using Postman BDD');\n  initBDD();\n  initSuperAgent();\n  initChai();\n}\n\n/**\n * Defines (or redefines) BDD globals\n */\nfunction initBDD () {\n  var postmanBDD = new PostmanBDD();\n  before = postmanBDD.before;\n  after = postmanBDD.after;\n  beforeEach = postmanBDD.beforeEach;\n  afterEach = postmanBDD.afterEach;\n  describe = postmanBDD.describe;\n  it = postmanBDD.it;\n}\n\n/**\n * Defines (or redefines) SuperAgent globals\n */\nfunction initSuperAgent () {\n  response = new superAgent.Response();\n}\n\n/**\n * Defines (or redefines) Chai.js globals\n */\nfunction initChai () {\n  chai = require('chai');\n  assert = chai.assert;\n  expect = chai.expect;\n  chai.should();\n\n  // Chai-HTTP Assertions\n  chai.use(assertions);\n}\n",
    "'use strict';\n\nvar options = require('./options');\n\nvar levels = ['silent', 'error', 'warn', 'info', 'debug'];\n\nvar log = module.exports = {\n  /**\n   * Determines whether the given logging level is enabled\n   *\n   * @param {string} level\n   * @returns {boolean}\n   */\n  isEnabled: function (level) {\n    return levels.indexOf(options.logLevel) >= levels.indexOf(level);\n  },\n\n  /**\n   * Returns a POJO containing all the properties of the given Error object.\n   * This is necessary because Postman's `console.log()` methods don't include\n   * properties from the Error prototype.\n   *\n   * @param {Error} err\n   * @returns {object|undefined}\n   */\n  errorToPOJO: function (err) {\n    if (err && typeof err === 'object') {\n      return Object.keys(err).concat(['name', 'message', 'stack']).reduce(function (pojo, key) {\n        pojo[key] = err[key];\n        return pojo;\n      }, {});\n    }\n  },\n};\n\nlevels.forEach(function (level) {\n  log[level] = function () {\n    if (this.isEnabled(level)) {\n      var logMethod = console.log;\n      if (typeof console[level] === 'function') {\n        logMethod = console[level];\n      }\n\n      logMethod.apply(console, arguments);\n    }\n  };\n});\n",
    "'use strict';\n\nmodule.exports = {\n  /**\n   * The logging level (silent, error, warn, info, debug)\n   *\n   * @type {string}\n   */\n  logLevel: 'warn',\n};\n",
    "'use strict';\n\nvar log = require('./log');\nvar cookies = require('./cookies');\n\nmodule.exports = {\n  /**\n   * SuperAgent's Response API\n   *\n   * @see {@link https://visionmedia.github.io/superagent/#response-properties}\n   */\n  Response: Response\n};\n\nfunction Response () {\n  /**\n   * The HTTP response status code\n   * @type {number}\n   */\n  this.status = typeof responseCode === 'object' ? responseCode.code : 0;\n\n  /**\n   * The HTTP response status type (1, 2, 3, 4, or 5)\n   * @type {number}\n   */\n  this.statusType = Math.floor(this.status / 100);\n\n  /**\n   * Named properties for common HTTP status codes\n   *\n   * @see {@link https://visionmedia.github.io/superagent/#response-status}\n   * @type {boolean}\n   */\n  this.info = this.statusType === 1;\n  this.ok = this.statusType === 2;\n  this.redirect = this.statusType === 3;\n  this.clientError = this.statusType === 4;\n  this.serverError = this.statusType === 5;\n  this.error = this.clientError || this.serverError;\n  this.accepted = this.status === 202;\n  this.noContent = this.status === 204 || this.status === 1223;\n  this.badRequest = this.status === 400;\n  this.unauthorized = this.status === 401;\n  this.notAcceptable = this.status === 406;\n  this.notFound = this.status === 404;\n  this.forbidden = this.status === 403;\n\n  /**\n   * The response time, in milliseconds\n   * @type {number}\n   */\n  this.time = typeof responseTime === 'number' ? responseTime : 0;\n\n  /**\n   * The parsed response headers, with lowercased field names.\n   *\n   * NOTE: SuperAgent exposes this property as both `header` and `headers`\n   *\n   * @type {object}\n   */\n  this.headers = this.header = parseHeaders();\n\n  var contentType = this.getHeader('content-type') || '';\n  var charsetMatch = /charset=([a-zA-Z0-9_-]+)/i.exec(contentType);\n\n  /**\n   * The value of the Content-Type header without the charset (e.g. \"text/html\")\n   * @type {string}\n   */\n  this.type = contentType.split(';')[0];\n\n  /**\n   * The value of the Content-Type header without the MIME type (e.g. \"utf8\")\n   * @type {string}\n   */\n  this.charset = charsetMatch ? charsetMatch[1] : '';\n\n  /**\n   * The parsed response cookies.\n   * @type {object[]}\n   */\n  this.cookies = parseCookies(this);\n\n  /**\n   * Returns the unparsed response body string\n   * @type {string}\n   */\n  this.text = typeof responseBody === 'string' ? responseBody : '';\n\n  /**\n   * The parsed response body.\n   * @type {object}\n   */\n  this.body = parseResponeBody(this);\n}\n\n/**\n * Returns the value of the given header.  Header names are case insensitive.\n *\n * @see {@link https://visionmedia.github.io/superagent/#response-content-type}\n * @param {string} name\n * @returns {?string}\n */\nResponse.prototype.getHeader = function (name) {\n  if (typeof postman === 'object' && typeof postman.getResponseHeader === 'function') {\n    return postman.getResponseHeader(name);\n  }\n  else {\n    name = (name || '').toLowerCase();\n    return this.headers[name];\n  }\n};\n\n/**\n * Returns the value of the given cookie.\n *\n * @param {string} name\n * @returns {?string}\n */\nResponse.prototype.getCookie = function (name) {\n  if (typeof postman === 'object' && typeof postman.getResponseCookie === 'function') {\n    return postman.getResponseCookie(name);\n  }\n  else {\n    return cookies.getCookie(this.cookies, name);\n  }\n};\n\n/**\n * Returns the response headers, with all the names lowercased.\n *\n * @see {@link https://visionmedia.github.io/superagent/#response-header-fields}\n * @returns {object}\n */\nfunction parseHeaders () {\n  if (typeof responseHeaders === 'object') {\n    var headers = pojo(responseHeaders);\n    var lowercasedHeaders = {};\n\n    Object.keys(headers).forEach(function (key) {\n      lowercasedHeaders[key.toLowerCase()] = headers[key];\n    });\n\n    return lowercasedHeaders;\n  }\n  else {\n    return {};\n  }\n}\n\n/**\n * Returns the parsed \"Set-Cookie\" headers\n *\n * @param {Response} response\n * @returns {object[]}\n */\nfunction parseCookies (response) {\n  if (typeof responseCookies === 'object' && responseCookies.length > 0) {\n    return responseCookies;\n  }\n\n  var header = response.getHeader('set-cookie');\n  return cookies.parseResponseCookies(header);\n}\n\n/**\n * Parses the response body as JSON, XML, or plain-text\n *\n * @param {Response} response\n * @returns {object|string}\n */\nfunction parseResponeBody (response) {\n  if (response.type.indexOf('json') >= 0) {\n    // The response looks like a JSON mime type (e.g. \"text/json\", \"application/hal+json\", etc.)\n    try {\n      return JSON.parse(response.text);\n    }\n    catch (err) {\n      log.error('Unable to parse the response body as JSON', log.errorToPOJO(err));\n    }\n  }\n\n  if (response.type.indexOf('xml') >= 0) {\n    // The response looks like an XML mime type (e.g. \"text/xml\", \"application/soap+xml\", etc.)\n    try {\n      return pojo(xml2Json(response.text));\n    }\n    catch (err) {\n      log.error('Unable to parse the response body as XML', log.errorToPOJO(err));\n    }\n  }\n\n  // If all else fails, just return the response body as plain-text\n  return response.text;\n}\n\n/**\n * Converts the given object to a POJO (plain-old JavaScript object).\n * This is necessary because many Postman objects don't inherit from the Object prototype,\n * which means that they can't be used with Chai.js `should` interface.\n *\n * @param {object} [obj]\n * @returns {object}\n */\nfunction pojo (obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n",
    "'use strict';\n\nvar log = require('./log');\n\nmodule.exports = Runnable;\n\n/**\n * Runs a user-defined function, and captures the results.\n * Runnables include test suites (describe), tests (it), and hooks (before, after, beforeEach, afterEach)\n *\n * @param {string} type - The type of runnable (\"describe\", \"it\", \"before\", \"afterEach\", etc.)\n * @param {State} state - An object containing the state of the current test script\n * @param {string} [title] - Optional title for the runnable\n * @param {function} [fn] - The function to run\n * @class\n */\nfunction Runnable (type, state, title, fn) {\n  if (typeof title === 'function') {\n    fn = title;\n    title = '';\n  }\n\n  state.counters[type]++;\n  var friendlyType = type === 'it' ? 'test' : type;\n\n  this.type = type;\n  this.state = state;\n  this.isHook = false;\n  this.isNamed = !!title;\n  this.title = title || (friendlyType + ' #' + state.counters[type]);\n  this.fn = fn;\n  this.result = null;\n  this.error = null;\n}\n\n/**\n * Runs the user-defined function and captures the results.\n *\n * The result is a boolean value, which can be accessed at {@link Runnable#result}.\n * If no error occurrs, then the result is `true`.  For \"it\" tests, this result is also added\n * to {@link State.results}, so it can be returned to the Postman Collection Runner.\n * If an error DOES occur, then the result is `false`, and the result is ALWAYS added to\n * {@link State.results}, even for hooks and test suites.\n */\nRunnable.prototype.run = function run () {\n  var path = this.state.currentPath();\n  log.debug('Running ' + path);\n\n  if (this.type !== 'describe') {\n    this.state.results[path] = null;\n  }\n\n  try {\n    this.fn();\n    this.success(path);\n  }\n  catch (e) {\n    this.failure(e, path);\n  }\n};\n\n/**\n * Records a successful result for this runnable.\n *\n * @param {string} [path] - The full path of the runnable\n */\nRunnable.prototype.success = function (path) {\n  log.info('passed: ' + path);\n\n  this.result = true;\n\n  if (this.type !== 'describe') {\n    this.state.results[path] = true;\n  }\n};\n\n/**\n * Records a failure result for this runnable.\n *\n * @param {Error} err - The error that occurred\n * @param {string} [path] - The full path of the runnable\n */\nRunnable.prototype.failure = function (err, path) {\n  log.error('failed: ' + path, log.errorToPOJO(err));\n\n  this.result = false;\n  this.error = err;\n  delete this.state.results[path];\n  this.state.results[path + ' (' + err.message + ')'] = false;\n};\n",
    "'use strict';\n\nmodule.exports = State;\n\n/**\n * Keeps track of the state for a single Postman test script.\n */\nfunction State () {\n  /**\n   * Postman's global `tests` variable.\n   * All test results must be stored on this object as boolean properties\n   */\n  this.results = resetTests();\n\n  /**\n   * The stack of runnables that are currently running\n   */\n  this.stack = [];\n\n  /**\n   * Keeps track of how many runnables of each type are currently running.\n   */\n  this.counters = {\n    describe: 0,\n    it: 0,\n    before: 0,\n    after: 0,\n    beforeEach: 0,\n    afterEach: 0,\n  };\n\n  /**\n   * Used to build unique paths for each Runnable\n   */\n  this._pathCounter = 0;\n}\n\n/**\n * Returns the full path of the current Runnable (the top one on the stack)\n *\n * @returns {string}\n */\nState.prototype.currentPath = function () {\n  var currentRunnable = this.stack[this.stack.length - 1];\n  var path = '';\n\n  if (currentRunnable.type !== 'describe') {\n    path = ++this._pathCounter + '. ';\n  }\n\n  // SPECIAL CASE: If we're in a \"before\" or \"after\" hook,\n  // and there's no meaningful test suite name, then only return the hook's name.\n  if (currentRunnable.type === 'before' || currentRunnable.type === 'after') {\n    var inANamedTestSuite = this.stack.some(function (runnable) {\n      return runnable.type === 'describe' && runnable.isNamed;\n    });\n\n    if (!inANamedTestSuite) {\n      return path + currentRunnable.title;\n    }\n  }\n\n  path += this.stack.map(function (runnable) { return runnable.title; }).join(' - ');\n  return path;\n};\n\nState.prototype.isStarted = function () {\n  return this._pathCounter > 0;\n};\n\n/**\n * Determines whether the test script has finished\n * (i.e. the top-level `describe` block has finished running)\n *\n * @returns {boolean}\n */\nState.prototype.isFinished = function () {\n  return this.stack.length === 1 && this.counters.describe > 0;\n};\n\n/**\n * Determines whether we are currently inside a hook\n *\n * @returns {boolean}\n */\nState.prototype.inAHook = function () {\n  return this.stack.some(function (runnable) {\n    return runnable.isHook;\n  });\n};\n\n/**\n * Deletes all properties of the Postman `tests` object, to reset any previous\n * test state. This is necessary when the user clicks the \"Send\" button multiple\n * times in Request Builder, which re-uses the same `tests` object each time.\n *\n * @reeturns {object} - Returns the empty `tests` object\n */\nfunction resetTests () {\n  if (typeof tests !== 'object') {\n    throw new Error(\n      'Postman BDD can only run inside the Postman scripting runtime ' +\n      '(the \"tests\" global variable is missing)'\n    );\n  }\n\n  // Clear any results from a previous test run\n  // (this happens when the user user clicks the \"send\" button multiple times in Request Builder)\n  Object.keys(tests).forEach(function (key) {\n    delete tests[key];\n  });\n\n  return tests;\n}\n",
    "/*!\n * assertion-error\n * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>\n * MIT Licensed\n */\n\n/*!\n * Return a function that will copy properties from\n * one object to another excluding any originally\n * listed. Returned function will create a new `{}`.\n *\n * @param {String} excluded properties ...\n * @return {Function}\n */\n\nfunction exclude () {\n  var excludes = [].slice.call(arguments);\n\n  function excludeProps (res, obj) {\n    Object.keys(obj).forEach(function (key) {\n      if (!~excludes.indexOf(key)) res[key] = obj[key];\n    });\n  }\n\n  return function extendExclude () {\n    var args = [].slice.call(arguments)\n      , i = 0\n      , res = {};\n\n    for (; i < args.length; i++) {\n      excludeProps(res, args[i]);\n    }\n\n    return res;\n  };\n};\n\n/*!\n * Primary Exports\n */\n\nmodule.exports = AssertionError;\n\n/**\n * ### AssertionError\n *\n * An extension of the JavaScript `Error` constructor for\n * assertion and validation scenarios.\n *\n * @param {String} message\n * @param {Object} properties to include (optional)\n * @param {callee} start stack function (optional)\n */\n\nfunction AssertionError (message, _props, ssf) {\n  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')\n    , props = extend(_props || {});\n\n  // default values\n  this.message = message || 'Unspecified AssertionError';\n  this.showDiff = false;\n\n  // copy from properties\n  for (var key in props) {\n    this[key] = props[key];\n  }\n\n  // capture stack trace\n  ssf = ssf || arguments.callee;\n  if (ssf && Error.captureStackTrace) {\n    Error.captureStackTrace(this, ssf);\n  } else {\n    try {\n      throw new Error();\n    } catch(e) {\n      this.stack = e.stack;\n    }\n  }\n}\n\n/*!\n * Inherit from Error.prototype\n */\n\nAssertionError.prototype = Object.create(Error.prototype);\n\n/*!\n * Statically set name\n */\n\nAssertionError.prototype.name = 'AssertionError';\n\n/*!\n * Ensure correct constructor\n */\n\nAssertionError.prototype.constructor = AssertionError;\n\n/**\n * Allow errors to be converted to JSON for static transfer.\n *\n * @param {Boolean} include stack (default: `true`)\n * @return {Object} object that can be `JSON.stringify`\n */\n\nAssertionError.prototype.toJSON = function (stack) {\n  var extend = exclude('constructor', 'toJSON', 'stack')\n    , props = extend({ name: this.name }, this);\n\n  // include stack if exists and not turned off\n  if (false !== stack && this.stack) {\n    props.stack = this.stack;\n  }\n\n  return props;\n};\n",
    "module.exports = require('./lib/chai');\n",
    "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar used = [];\n\n/*!\n * Chai version\n */\n\nexports.version = '4.1.0';\n\n/*!\n * Assertion Error\n */\n\nexports.AssertionError = require('assertion-error');\n\n/*!\n * Utils for plugins (not exported)\n */\n\nvar util = require('./chai/utils');\n\n/**\n * # .use(function)\n *\n * Provides a way to extend the internals of Chai.\n *\n * @param {Function}\n * @returns {this} for chaining\n * @api public\n */\n\nexports.use = function (fn) {\n  if (!~used.indexOf(fn)) {\n    fn(exports, util);\n    used.push(fn);\n  }\n\n  return exports;\n};\n\n/*!\n * Utility Functions\n */\n\nexports.util = util;\n\n/*!\n * Configuration\n */\n\nvar config = require('./chai/config');\nexports.config = config;\n\n/*!\n * Primary `Assertion` prototype\n */\n\nvar assertion = require('./chai/assertion');\nexports.use(assertion);\n\n/*!\n * Core Assertions\n */\n\nvar core = require('./chai/core/assertions');\nexports.use(core);\n\n/*!\n * Expect interface\n */\n\nvar expect = require('./chai/interface/expect');\nexports.use(expect);\n\n/*!\n * Should interface\n */\n\nvar should = require('./chai/interface/should');\nexports.use(should);\n\n/*!\n * Assert interface\n */\n\nvar assert = require('./chai/interface/assert');\nexports.use(assert);\n",
    "/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar config = require('./config');\n\nmodule.exports = function (_chai, util) {\n  /*!\n   * Module dependencies.\n   */\n\n  var AssertionError = _chai.AssertionError\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  _chai.Assertion = Assertion;\n\n  /*!\n   * Assertion Constructor\n   *\n   * Creates object for chaining.\n   *\n   * `Assertion` objects contain metadata in the form of flags. Three flags can\n   * be assigned during instantiation by passing arguments to this constructor:\n   *\n   * - `object`: This flag contains the target of the assertion. For example, in\n   *   the assertion `expect(numKittens).to.equal(7);`, the `object` flag will\n   *   contain `numKittens` so that the `equal` assertion can reference it when\n   *   needed.\n   *\n   * - `message`: This flag contains an optional custom error message to be\n   *   prepended to the error message that's generated by the assertion when it\n   *   fails.\n   *\n   * - `ssfi`: This flag stands for \"start stack function indicator\". It\n   *   contains a function reference that serves as the starting point for\n   *   removing frames from the stack trace of the error that's created by the\n   *   assertion when it fails. The goal is to provide a cleaner stack trace to\n   *   end users by removing Chai's internal functions. Note that it only works\n   *   in environments that support `Error.captureStackTrace`, and only when\n   *   `Chai.config.includeStack` hasn't been set to `false`.\n   *\n   * - `lockSsfi`: This flag controls whether or not the given `ssfi` flag\n   *   should retain its current value, even as assertions are chained off of\n   *   this object. This is usually set to `true` when creating a new assertion\n   *   from within another assertion. It's also temporarily set to `true` before\n   *   an overwritten assertion gets called by the overwriting assertion.\n   *\n   * @param {Mixed} obj target of the assertion\n   * @param {String} msg (optional) custom error message\n   * @param {Function} ssfi (optional) starting point for removing stack frames\n   * @param {Boolean} lockSsfi (optional) whether or not the ssfi flag is locked\n   * @api private\n   */\n\n  function Assertion (obj, msg, ssfi, lockSsfi) {\n    flag(this, 'ssfi', ssfi || Assertion);\n    flag(this, 'lockSsfi', lockSsfi);\n    flag(this, 'object', obj);\n    flag(this, 'message', msg);\n\n    return util.proxify(this);\n  }\n\n  Object.defineProperty(Assertion, 'includeStack', {\n    get: function() {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      return config.includeStack;\n    },\n    set: function(value) {\n      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');\n      config.includeStack = value;\n    }\n  });\n\n  Object.defineProperty(Assertion, 'showDiff', {\n    get: function() {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      return config.showDiff;\n    },\n    set: function(value) {\n      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');\n      config.showDiff = value;\n    }\n  });\n\n  Assertion.addProperty = function (name, fn) {\n    util.addProperty(this.prototype, name, fn);\n  };\n\n  Assertion.addMethod = function (name, fn) {\n    util.addMethod(this.prototype, name, fn);\n  };\n\n  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {\n    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  Assertion.overwriteProperty = function (name, fn) {\n    util.overwriteProperty(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteMethod = function (name, fn) {\n    util.overwriteMethod(this.prototype, name, fn);\n  };\n\n  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {\n    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);\n  };\n\n  /**\n   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)\n   *\n   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.\n   *\n   * @name assert\n   * @param {Philosophical} expression to be tested\n   * @param {String|Function} message or function that returns message to display if expression fails\n   * @param {String|Function} negatedMessage or function that returns negatedMessage to display if negated expression fails\n   * @param {Mixed} expected value (remember to check for negation)\n   * @param {Mixed} actual (optional) will default to `this.obj`\n   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails\n   * @api private\n   */\n\n  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {\n    var ok = util.test(this, arguments);\n    if (false !== showDiff) showDiff = true;\n    if (undefined === expected && undefined === _actual) showDiff = false;\n    if (true !== config.showDiff) showDiff = false;\n\n    if (!ok) {\n      msg = util.getMessage(this, arguments);\n      var actual = util.getActual(this, arguments);\n      throw new AssertionError(msg, {\n          actual: actual\n        , expected: expected\n        , showDiff: showDiff\n      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));\n    }\n  };\n\n  /*!\n   * ### ._obj\n   *\n   * Quick reference to stored `actual` value for plugin developers.\n   *\n   * @api private\n   */\n\n  Object.defineProperty(Assertion.prototype, '_obj',\n    { get: function () {\n        return flag(this, 'object');\n      }\n    , set: function (val) {\n        flag(this, 'object', val);\n      }\n  });\n};\n",
    "module.exports = {\n\n  /**\n   * ### config.includeStack\n   *\n   * User configurable property, influences whether stack trace\n   * is included in Assertion error message. Default of false\n   * suppresses stack trace in the error message.\n   *\n   *     chai.config.includeStack = true;  // enable stack on error\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  includeStack: false,\n\n  /**\n   * ### config.showDiff\n   *\n   * User configurable property, influences whether or not\n   * the `showDiff` flag should be included in the thrown\n   * AssertionErrors. `false` will always be `false`; `true`\n   * will be true when the assertion has requested a diff\n   * be shown.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  showDiff: true,\n\n  /**\n   * ### config.truncateThreshold\n   *\n   * User configurable property, sets length threshold for actual and\n   * expected values in assertion errors. If this threshold is exceeded, for\n   * example for large data structures, the value is replaced with something\n   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.\n   *\n   * Set it to zero if you want to disable truncating altogether.\n   *\n   * This is especially userful when doing assertions on arrays: having this\n   * set to a reasonable large value makes the failure messages readily\n   * inspectable.\n   *\n   *     chai.config.truncateThreshold = 0;  // disable truncating\n   *\n   * @param {Number}\n   * @api public\n   */\n\n  truncateThreshold: 40,\n\n  /**\n   * ### config.useProxy\n   *\n   * User configurable property, defines if chai will use a Proxy to throw\n   * an error when a non-existent property is read, which protects users\n   * from typos when using property-based assertions.\n   *\n   * Set it to false if you want to disable this feature.\n   *\n   *     chai.config.useProxy = false;  // disable use of Proxy\n   *\n   * This feature is automatically disabled regardless of this config value\n   * in environments that don't support proxies.\n   *\n   * @param {Boolean}\n   * @api public\n   */\n\n  useProxy: true,\n\n  /**\n   * ### config.proxyExcludedKeys\n   *\n   * User configurable property, defines which properties should be ignored\n   * instead of throwing an error if they do not exist on the assertion.\n   * This is only applied if the environment Chai is running in supports proxies and\n   * if the `useProxy` configuration setting is enabled.\n   * By default, `then` and `inspect` will not throw an error if they do not exist on the\n   * assertion object because the `.inspect` property is read by `util.inspect` (for example, when\n   * using `console.log` on the assertion object) and `.then` is necessary for promise type-checking.\n   *\n   *     // By default these keys will not throw an error if they do not exist on the assertion object\n   *     chai.config.proxyExcludedKeys = ['then', 'inspect'];\n   *\n   * @param {Array}\n   * @api public\n   */\n\n  proxyExcludedKeys: ['then', 'inspect', 'toJSON']\n};\n",
    "/*!\n * chai\n * http://chaijs.com\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, _) {\n  var Assertion = chai.Assertion\n    , AssertionError = chai.AssertionError\n    , flag = _.flag;\n\n  /**\n   * ### Language Chains\n   *\n   * The following are provided as chainable getters to improve the readability\n   * of your assertions.\n   *\n   * **Chains**\n   *\n   * - to\n   * - be\n   * - been\n   * - is\n   * - that\n   * - which\n   * - and\n   * - has\n   * - have\n   * - with\n   * - at\n   * - of\n   * - same\n   * - but\n   * - does\n   *\n   * @name language chains\n   * @namespace BDD\n   * @api public\n   */\n\n  [ 'to', 'be', 'been'\n  , 'is', 'and', 'has', 'have'\n  , 'with', 'that', 'which', 'at'\n  , 'of', 'same', 'but', 'does' ].forEach(function (chain) {\n    Assertion.addProperty(chain);\n  });\n\n  /**\n   * ### .not\n   *\n   * Negates all assertions that follow in the chain.\n   *\n   *     expect(function () {}).to.not.throw();\n   *     expect({a: 1}).to.not.have.property('b');\n   *     expect([1, 2]).to.be.an('array').that.does.not.include(3);\n   *\n   * Just because you can negate any assertion with `.not` doesn't mean you\n   * should. With great power comes great responsibility. It's often best to\n   * assert that the one expected output was produced, rather than asserting\n   * that one of countless unexpected outputs wasn't produced. See individual\n   * assertions for specific guidance.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.equal(1); // Not recommended\n   *\n   * @name not\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('not', function () {\n    flag(this, 'negate', true);\n  });\n\n  /**\n   * ### .deep\n   *\n   * Causes all `.equal`, `.include`, `.members`, `.keys`, and `.property`\n   * assertions that follow in the chain to use deep equality instead of strict\n   * (`===`) equality. See the `deep-eql` project page for info on the deep\n   * equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.keys([{a: 1}]);\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * @name deep\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('deep', function () {\n    flag(this, 'deep', true);\n  });\n\n  /**\n   * ### .nested\n   *\n   * Enables dot- and bracket-notation in all `.property` and `.include`\n   * assertions that follow in the chain.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *     expect({'.a': {'[b]': 'x'}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 'x'});\n   *\n   * `.nested` cannot be combined with `.own`.\n   *\n   * @name nested\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('nested', function () {\n    flag(this, 'nested', true);\n  });\n\n  /**\n   * ### .own\n   *\n   * Causes all `.property` and `.include` assertions that follow in the chain\n   * to ignore inherited properties.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.property('b').but.not.own.property('b'); \n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * `.own` cannot be combined with `.nested`.\n   *\n   * @name own\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('own', function () {\n    flag(this, 'own', true);\n  });\n\n  /**\n   * ### .ordered\n   *\n   * Causes all `.members` assertions that follow in the chain to require that\n   * members be in the same order.\n   *\n   *     expect([1, 2]).to.have.ordered.members([1, 2])\n   *       .but.not.have.ordered.members([2, 1]);\n   *\n   * When `.include` and `.ordered` are combined, the ordering begins at the\n   * start of both arrays.\n   *\n   *     expect([1, 2, 3]).to.include.ordered.members([1, 2])\n   *       .but.not.include.ordered.members([2, 3]);\n   *\n   * @name ordered\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ordered', function () {\n    flag(this, 'ordered', true);\n  });\n\n  /**\n   * ### .any\n   *\n   * Causes all `.keys` assertions that follow in the chain to only require that\n   * the target have at least one of the given keys. This is the opposite of\n   * `.all`, which requires that the target have all of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name any\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('any', function () {\n    flag(this, 'any', true);\n    flag(this, 'all', false);\n  });\n\n\n  /**\n   * ### .all\n   *\n   * Causes all `.keys` assertions that follow in the chain to require that the\n   * target have all of the given keys. This is the opposite of `.any`, which\n   * only requires that the target have at least one of the given keys.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` are\n   * added earlier in the chain. However, it's often best to add `.all` anyway\n   * because it improves readability.\n   *\n   * See the `.keys` doc for guidance on when to use `.any` or `.all`.\n   *\n   * @name all\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('all', function () {\n    flag(this, 'all', true);\n    flag(this, 'any', false);\n  });\n\n  /**\n   * ### .a(type[, msg])\n   *\n   * Asserts that the target's type is equal to the given string `type`. Types\n   * are case insensitive. See the `type-detect` project page for info on the\n   * type detection algorithm: https://github.com/chaijs/type-detect.\n   *\n   *     expect('foo').to.be.a('string');\n   *     expect({a: 1}).to.be.an('object');\n   *     expect(null).to.be.a('null');\n   *     expect(undefined).to.be.an('undefined');\n   *     expect(new Error).to.be.an('error');\n   *     expect(Promise.resolve()).to.be.a('promise');\n   *     expect(new Float32Array).to.be.a('float32array');\n   *     expect(Symbol()).to.be.a('symbol');\n   *\n   * `.a` supports objects that have a custom type set via `Symbol.toStringTag`.\n   *\n   *     var myObj = {\n   *       [Symbol.toStringTag]: 'myCustomType'\n   *     };\n   *\n   *     expect(myObj).to.be.a('myCustomType').but.not.an('object');\n   *\n   * It's often best to use `.a` to check a target's type before making more\n   * assertions on the same target. That way, you avoid unexpected behavior from\n   * any assertion that does different things based on the target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.a`. However, it's often best to\n   * assert that the target is the expected type, rather than asserting that it\n   * isn't one of many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.an('array'); // Not recommended\n   *\n   * `.a` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     expect(1).to.be.a('string', 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.a('string');\n   *\n   * `.a` can also be used as a language chain to improve the readability of\n   * your assertions. \n   *\n   *     expect({b: 2}).to.have.a.property('b');\n   *\n   * The alias `.an` can be used interchangeably with `.a`.\n   *\n   * @name a\n   * @alias an\n   * @param {String} type\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function an (type, msg) {\n    if (msg) flag(this, 'message', msg);\n    type = type.toLowerCase();\n    var obj = flag(this, 'object')\n      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';\n\n    this.assert(\n        type === _.type(obj).toLowerCase()\n      , 'expected #{this} to be ' + article + type\n      , 'expected #{this} not to be ' + article + type\n    );\n  }\n\n  Assertion.addChainableMethod('an', an);\n  Assertion.addChainableMethod('a', an);\n\n  /**\n   * ### .include(val[, msg])\n   *\n   * When the target is a string, `.include` asserts that the given string `val`\n   * is a substring of the target.\n   *\n   *     expect('foobar').to.include('foo');\n   *\n   * When the target is an array, `.include` asserts that the given `val` is a\n   * member of the target.\n   *\n   *     expect([1, 2, 3]).to.include(2);\n   *\n   * When the target is an object, `.include` asserts that the given object\n   * `val`'s properties are a subset of the target's properties.\n   *\n   *     expect({a: 1, b: 2, c: 3}).to.include({a: 1, b: 2});\n   *\n   * When the target is a Set or WeakSet, `.include` asserts that the given `val` is a\n   * member of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Set([1, 2])).to.include(2);\n   *\n   * When the target is a Map, `.include` asserts that the given `val` is one of\n   * the values of the target. SameValueZero equality algorithm is used.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.include(2);\n   *\n   * Because `.include` does different things based on the target's type, it's\n   * important to check the target's type before using `.include`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([1, 2, 3]).to.be.an('array').that.includes(2);\n   *\n   * By default, strict (`===`) equality is used to compare array members and\n   * object properties. Add `.deep` earlier in the chain to use deep equality\n   * instead (WeakSet targets are not supported). See the `deep-eql` project\n   * page for info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) includes `{a: 1}`\n   *     expect([{a: 1}]).to.deep.include({a: 1});\n   *     expect([{a: 1}]).to.not.include({a: 1});\n   *\n   *     // Target object deeply (but not strictly) includes `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.deep.include({x: {a: 1}});\n   *     expect({x: {a: 1}}).to.not.include({x: {a: 1}});\n   *\n   * By default, all of the target's properties are searched when working with\n   * objects. This includes properties that are inherited and/or non-enumerable.\n   * Add `.own` earlier in the chain to exclude the target's inherited\n   * properties from the search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.own.include({a: 1});\n   *     expect({a: 1}).to.include({b: 2}).but.not.own.include({b: 2});\n   *\n   * Note that a target object is always only searched for `val`'s own\n   * enumerable properties.\n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({a: {b: 2}}).to.deep.own.include({a: {b: 2}});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.nested.include({'a.b[1]': 'y'});\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 2}}).to.nested.include({'\\\\.a.\\\\[b\\\\]': 2});\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}}).to.deep.nested.include({'a.b[0]': {c: 3}});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.include`.\n   *\n   *     expect('foobar').to.not.include('taco');\n   *     expect([1, 2, 3]).to.not.include(4);\n   * \n   * However, it's dangerous to negate `.include` when the target is an object.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target object doesn't have all of `val`'s key/value pairs but may or may\n   * not have some of them. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target object isn't even expected to have `val`'s keys, it's\n   * often best to assert exactly that.\n   *\n   *     expect({c: 3}).to.not.have.any.keys('a', 'b'); // Recommended\n   *     expect({c: 3}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * When the target object is expected to have `val`'s keys, it's often best to\n   * assert that each of the properties has its expected value, rather than\n   * asserting that each property doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3, b: 4}).to.include({a: 3, b: 4}); // Recommended\n   *     expect({a: 3, b: 4}).to.not.include({a: 1, b: 2}); // Not recommended\n   *\n   * `.include` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.include(4, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.include(4);\n   *\n   * `.include` can also be used as a language chain, causing all `.members` and\n   * `.keys` assertions that follow in the chain to require the target to be a\n   * superset of the expected set, rather than an identical set. Note that\n   * `.members` ignores duplicates in the subset when `.include` is added.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * Note that adding `.any` earlier in the chain causes the `.keys` assertion\n   * to ignore `.include`.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *\n   * The aliases `.includes`, `.contain`, and `.contains` can be used\n   * interchangeably with `.include`.\n   *\n   * @name include\n   * @alias contain\n   * @alias includes\n   * @alias contains\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function SameValueZero(a, b) {\n    return (_.isNaN(a) && _.isNaN(b)) || a === b;\n  }\n\n  function includeChainingBehavior () {\n    flag(this, 'contains', true);\n  }\n\n  function include (val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    _.expectTypes(this, [\n      'array', 'object', 'string',\n      'map', 'set', 'weakset',\n    ]);\n\n    var obj = flag(this, 'object')\n      , objType = _.type(obj).toLowerCase();\n\n    // This block is for asserting a subset of properties in an object.\n    if (objType === 'object') {\n      var props = Object.keys(val)\n        , negate = flag(this, 'negate')\n        , firstErr = null\n        , numErrs = 0;\n\n      props.forEach(function (prop) {\n        var propAssertion = new Assertion(obj);\n        _.transferFlags(this, propAssertion, true);\n        flag(propAssertion, 'lockSsfi', true);\n\n        if (!negate || props.length === 1) {\n          propAssertion.property(prop, val[prop]);\n          return;\n        }\n\n        try {\n          propAssertion.property(prop, val[prop]);\n        } catch (err) {\n          if (!_.checkError.compatibleConstructor(err, AssertionError)) throw err;\n          if (firstErr === null) firstErr = err;\n          numErrs++;\n        }\n      }, this);\n\n      // When validating .not.include with multiple properties, we only want\n      // to throw an assertion error if all of the properties are included,\n      // in which case we throw the first property assertion error that we\n      // encountered.\n      if (negate && props.length > 1 && numErrs === props.length) throw firstErr;\n\n      return;\n    }\n\n    var isDeep = flag(this, 'deep')\n      , descriptor = isDeep ? 'deep ' : ''\n      , included = false;\n\n    switch (objType) {\n      case 'string':\n        included = obj.indexOf(val) !== -1;\n        break;\n\n      case 'weakset':\n        if (isDeep) {\n          var flagMsg = flag(this, 'message')\n            , ssfi = flag(this, 'ssfi');\n          flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n          throw new AssertionError(\n            flagMsg + 'unable to use .deep.include with WeakSet',\n            undefined,\n            ssfi\n          );\n        }\n\n        included = obj.has(val);\n        break;\n\n      case 'map':\n        var isEql = isDeep ? _.eql : SameValueZero;\n        obj.forEach(function (item) {\n          included = included || isEql(item, val);\n        });\n        break;\n\n      case 'set':\n        if (isDeep) {\n          obj.forEach(function (item) {\n            included = included || _.eql(item, val);\n          });\n        } else {\n          included = obj.has(val);\n        }\n        break;\n\n      case 'array':\n        if (isDeep) {\n          included = obj.some(function (item) {\n            return _.eql(item, val);\n          })\n        } else {\n          included = obj.indexOf(val) !== -1;\n        }\n        break;\n    }\n\n    // Assert inclusion in collection or substring in a string.\n    this.assert(\n      included\n      , 'expected #{this} to ' + descriptor + 'include ' + _.inspect(val)\n      , 'expected #{this} to not ' + descriptor + 'include ' + _.inspect(val));\n  }\n\n  Assertion.addChainableMethod('include', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contain', include, includeChainingBehavior);\n  Assertion.addChainableMethod('contains', include, includeChainingBehavior);\n  Assertion.addChainableMethod('includes', include, includeChainingBehavior);\n\n  /**\n   * ### .ok\n   *\n   * Asserts that the target is loosely (`==`) equal to `true`. However, it's\n   * often best to assert that the target is strictly (`===`) or deeply equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.ok; // Not recommended\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.be.ok; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.ok`.\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.not.be.ok; // Not recommended\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.ok; // Not recommended\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.be.ok; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.be.ok; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.ok;\n   *\n   * @name ok\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('ok', function () {\n    this.assert(\n        flag(this, 'object')\n      , 'expected #{this} to be truthy'\n      , 'expected #{this} to be falsy');\n  });\n\n  /**\n   * ### .true\n   *\n   * Asserts that the target is strictly (`===`) equal to `true`.\n   *\n   *     expect(true).to.be.true;\n   *\n   * Add `.not` earlier in the chain to negate `.true`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `true`.\n   *\n   *     expect(false).to.be.false; // Recommended\n   *     expect(false).to.not.be.true; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.true; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(false, 'nooo why fail??').to.be.true;\n   *\n   * @name true\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('true', function () {\n    this.assert(\n        true === flag(this, 'object')\n      , 'expected #{this} to be true'\n      , 'expected #{this} to be false'\n      , flag(this, 'negate') ? false : true\n    );\n  });\n\n  /**\n   * ### .false\n   *\n   * Asserts that the target is strictly (`===`) equal to `false`.\n   *\n   *     expect(false).to.be.false;\n   *\n   * Add `.not` earlier in the chain to negate `.false`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `false`.\n   *\n   *     expect(true).to.be.true; // Recommended\n   *     expect(true).to.not.be.false; // Not recommended\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.false; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(true, 'nooo why fail??').to.be.false;\n   *\n   * @name false\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('false', function () {\n    this.assert(\n        false === flag(this, 'object')\n      , 'expected #{this} to be false'\n      , 'expected #{this} to be true'\n      , flag(this, 'negate') ? true : false\n    );\n  });\n\n  /**\n   * ### .null\n   *\n   * Asserts that the target is strictly (`===`) equal to `null`.\n   *\n   *     expect(null).to.be.null;\n   *\n   * Add `.not` earlier in the chain to negate `.null`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `null`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.null; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.null;\n   *\n   * @name null\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('null', function () {\n    this.assert(\n        null === flag(this, 'object')\n      , 'expected #{this} to be null'\n      , 'expected #{this} not to be null'\n    );\n  });\n\n  /**\n   * ### .undefined\n   *\n   * Asserts that the target is strictly (`===`) equal to `undefined`.\n   *\n   *     expect(undefined).to.be.undefined;\n   *\n   * Add `.not` earlier in the chain to negate `.undefined`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to `undefined`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.undefined; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.undefined;\n   *\n   * @name undefined\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('undefined', function () {\n    this.assert(\n        undefined === flag(this, 'object')\n      , 'expected #{this} to be undefined'\n      , 'expected #{this} not to be undefined'\n    );\n  });\n\n  /**\n   * ### .NaN\n   *\n   * Asserts that the target is exactly `NaN`.\n   *\n   *     expect(NaN).to.be.NaN;\n   *\n   * Add `.not` earlier in the chain to negate `.NaN`. However, it's often best\n   * to assert that the target is equal to its expected value, rather than not\n   * equal to `NaN`.\n   *\n   *     expect('foo').to.equal('foo'); // Recommended\n   *     expect('foo').to.not.be.NaN; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(42, 'nooo why fail??').to.be.NaN;\n   *\n   * @name NaN\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('NaN', function () {\n    this.assert(\n        _.isNaN(flag(this, 'object'))\n        , 'expected #{this} to be NaN'\n        , 'expected #{this} not to be NaN'\n    );\n  });\n\n  /**\n   * ### .exist\n   *\n   * Asserts that the target is not strictly (`===`) equal to either `null` or\n   * `undefined`. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.exist; // Not recommended\n   *\n   *     expect(0).to.equal(0); // Recommended\n   *     expect(0).to.exist; // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.exist`.\n   *\n   *     expect(null).to.be.null; // Recommended\n   *     expect(null).to.not.exist; // Not recommended\n   *\n   *     expect(undefined).to.be.undefined; // Recommended\n   *     expect(undefined).to.not.exist; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(null, 'nooo why fail??').to.exist;\n   *\n   * @name exist\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('exist', function () {\n    var val = flag(this, 'object');\n    this.assert(\n        val !== null && val !== undefined\n      , 'expected #{this} to exist'\n      , 'expected #{this} to not exist'\n    );\n  });\n\n  /**\n   * ### .empty\n   *\n   * When the target is a string or array, `.empty` asserts that the target's\n   * `length` property is strictly (`===`) equal to `0`.\n   *\n   *     expect([]).to.be.empty;\n   *     expect('').to.be.empty;\n   *\n   * When the target is a map or set, `.empty` asserts that the target's `size`\n   * property is strictly equal to `0`.\n   *\n   *     expect(new Set()).to.be.empty;\n   *     expect(new Map()).to.be.empty;\n   *\n   * When the target is a non-function object, `.empty` asserts that the target\n   * doesn't have any own enumerable properties. Properties with Symbol-based\n   * keys are excluded from the count.\n   *\n   *     expect({}).to.be.empty;\n   *\n   * Because `.empty` does different things based on the target's type, it's\n   * important to check the target's type before using `.empty`. See the `.a`\n   * doc for info on testing a target's type.\n   *\n   *     expect([]).to.be.an('array').that.is.empty;\n   *\n   * Add `.not` earlier in the chain to negate `.empty`. However, it's often\n   * best to assert that the target contains its expected number of values,\n   * rather than asserting that it's not empty.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.not.be.empty; // Not recommended\n   *\n   *     expect(new Set([1, 2, 3])).to.have.property('size', 3); // Recommended\n   *     expect(new Set([1, 2, 3])).to.not.be.empty; // Not recommended\n   *\n   *     expect(Object.keys({a: 1})).to.have.lengthOf(1); // Recommended\n   *     expect({a: 1}).to.not.be.empty; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect([1, 2, 3], 'nooo why fail??').to.be.empty;\n   *\n   * @name empty\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('empty', function () {\n    var val = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , itemsCount;\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n    switch (_.type(val).toLowerCase()) {\n      case 'array':\n      case 'string':\n        itemsCount = val.length;\n        break;\n      case 'map':\n      case 'set':\n        itemsCount = val.size;\n        break;\n      case 'weakmap':\n      case 'weakset':\n        throw new AssertionError(\n          flagMsg + '.empty was passed a weak collection',\n          undefined,\n          ssfi\n        );\n      case 'function':\n        var msg = flagMsg + '.empty was passed a function ' + _.getName(val);\n        throw new AssertionError(msg.trim(), undefined, ssfi);\n      default:\n        if (val !== Object(val)) {\n          throw new AssertionError(\n            flagMsg + '.empty was passed non-string primitive ' + _.inspect(val),\n            undefined,\n            ssfi\n          );\n        }\n        itemsCount = Object.keys(val).length;\n    }\n\n    this.assert(\n        0 === itemsCount\n      , 'expected #{this} to be empty'\n      , 'expected #{this} not to be empty'\n    );\n  });\n\n  /**\n   * ### .arguments\n   *\n   * Asserts that the target is an `arguments` object.\n   *\n   *     function test () {\n   *       expect(arguments).to.be.arguments;\n   *     }\n   *\n   *     test();\n   *\n   * Add `.not` earlier in the chain to negate `.arguments`. However, it's often\n   * best to assert which type the target is expected to be, rather than\n   * asserting that its not an `arguments` object.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.arguments; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({}, 'nooo why fail??').to.be.arguments;\n   *\n   * The alias `.Arguments` can be used interchangeably with `.arguments`.\n   *\n   * @name arguments\n   * @alias Arguments\n   * @namespace BDD\n   * @api public\n   */\n\n  function checkArguments () {\n    var obj = flag(this, 'object')\n      , type = _.type(obj);\n    this.assert(\n        'Arguments' === type\n      , 'expected #{this} to be arguments but got ' + type\n      , 'expected #{this} to not be arguments'\n    );\n  }\n\n  Assertion.addProperty('arguments', checkArguments);\n  Assertion.addProperty('Arguments', checkArguments);\n\n  /**\n   * ### .equal(val[, msg])\n   *\n   * Asserts that the target is strictly (`===`) equal to the given `val`.\n   *\n   *     expect(1).to.equal(1);\n   *     expect('foo').to.equal('foo');\n   * \n   * Add `.deep` earlier in the chain to use deep equality instead. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) equals `{a: 1}`\n   *     expect({a: 1}).to.deep.equal({a: 1});\n   *     expect({a: 1}).to.not.equal({a: 1});\n   *\n   *     // Target array deeply (but not strictly) equals `[1, 2]`\n   *     expect([1, 2]).to.deep.equal([1, 2]);\n   *     expect([1, 2]).to.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.equal`. However, it's often\n   * best to assert that the target is equal to its expected value, rather than\n   * not equal to one of countless unexpected values.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.equal(2); // Not recommended\n   *\n   * `.equal` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.equal(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.equal(2);\n   *\n   * The aliases `.equals` and `eq` can be used interchangeably with `.equal`.\n   *\n   * @name equal\n   * @alias equals\n   * @alias eq\n   * @param {Mixed} val\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEqual (val, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    if (flag(this, 'deep')) {\n      return this.eql(val);\n    } else {\n      this.assert(\n          val === obj\n        , 'expected #{this} to equal #{exp}'\n        , 'expected #{this} to not equal #{exp}'\n        , val\n        , this._obj\n        , true\n      );\n    }\n  }\n\n  Assertion.addMethod('equal', assertEqual);\n  Assertion.addMethod('equals', assertEqual);\n  Assertion.addMethod('eq', assertEqual);\n\n  /**\n   * ### .eql(obj[, msg])\n   *\n   * Asserts that the target is deeply equal to the given `obj`. See the\n   * `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object is deeply (but not strictly) equal to {a: 1}\n   *     expect({a: 1}).to.eql({a: 1}).but.not.equal({a: 1});\n   *\n   *     // Target array is deeply (but not strictly) equal to [1, 2]\n   *     expect([1, 2]).to.eql([1, 2]).but.not.equal([1, 2]);\n   *\n   * Add `.not` earlier in the chain to negate `.eql`. However, it's often best\n   * to assert that the target is deeply equal to its expected value, rather\n   * than not deeply equal to one of countless unexpected values.\n   *\n   *     expect({a: 1}).to.eql({a: 1}); // Recommended\n   *     expect({a: 1}).to.not.eql({b: 2}); // Not recommended\n   *\n   * `.eql` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect({a: 1}).to.eql({b: 2}, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.eql({b: 2});\n   *\n   * The alias `.eqls` can be used interchangeably with `.eql`.\n   *\n   * The `.deep.equal` assertion is almost identical to `.eql` but with one\n   * difference: `.deep.equal` causes deep equality comparisons to also be used\n   * for any other assertions that follow in the chain.\n   *\n   * @name eql\n   * @alias eqls\n   * @param {Mixed} obj\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertEql(obj, msg) {\n    if (msg) flag(this, 'message', msg);\n    this.assert(\n        _.eql(obj, flag(this, 'object'))\n      , 'expected #{this} to deeply equal #{exp}'\n      , 'expected #{this} to not deeply equal #{exp}'\n      , obj\n      , this._obj\n      , true\n    );\n  }\n\n  Assertion.addMethod('eql', assertEql);\n  Assertion.addMethod('eqls', assertEql);\n\n  /**\n   * ### .above(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.above(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the value of the\n   * target's `length` property is greater than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.above(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.above`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(1).to.not.be.above(2); // Not recommended\n   *\n   * `.above` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.above(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.above(2);\n   *\n   * The aliases `.gt` and `.greaterThan` can be used interchangeably with\n   * `.above`.\n   *\n   * @name above\n   * @alias gt\n   * @alias greaterThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertAbove (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , shouldThrow = true;\n\n    if (doLength) {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n    \n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to above must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to above must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var len = obj.length;\n      this.assert(\n          len > n\n        , 'expected #{this} to have a length above #{exp} but got #{act}'\n        , 'expected #{this} to not have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj > n\n        , 'expected #{this} to be above #{exp}'\n        , 'expected #{this} to be at most #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('above', assertAbove);\n  Assertion.addMethod('gt', assertAbove);\n  Assertion.addMethod('greaterThan', assertAbove);\n\n  /**\n   * ### .least(n[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `n` respectively. However, it's often best to assert that the target is equal to\n   * its expected value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.at.least(1); // Not recommended\n   *     expect(2).to.be.at.least(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the value of the\n   * target's `length` property is greater than or equal to the given number\n   * `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.least(2); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.least`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.at.least(2); // Not recommended\n   *\n   * `.least` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.at.least(2, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.at.least(2);\n   *\n   * The alias `.gte` can be used interchangeably with `.least`.\n   *\n   * @name least\n   * @alias gte\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLeast (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , shouldThrow = true;\n\n    if (doLength) {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to least must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to least must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var len = obj.length;\n      this.assert(\n          len >= n\n        , 'expected #{this} to have a length at least #{exp} but got #{act}'\n        , 'expected #{this} to have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj >= n\n        , 'expected #{this} to be at least #{exp}'\n        , 'expected #{this} to be below #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('least', assertLeast);\n  Assertion.addMethod('gte', assertLeast);\n\n  /**\n   * ### .below(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than the given number or date `n` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.below(2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the value of the\n   * target's `length` property is less than the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.below(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.length(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.below`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.below(1); // Not recommended\n   *\n   * `.below` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.below(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.below(1);\n   *\n   * The aliases `.lt` and `.lessThan` can be used interchangeably with\n   * `.below`.\n   *\n   * @name below\n   * @alias lt\n   * @alias lessThan\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertBelow (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , shouldThrow = true;\n\n    if (doLength) {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to below must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to below must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var len = obj.length;\n      this.assert(\n          len < n\n        , 'expected #{this} to have a length below #{exp} but got #{act}'\n        , 'expected #{this} to not have a length below #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj < n\n        , 'expected #{this} to be below #{exp}'\n        , 'expected #{this} to be at least #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('below', assertBelow);\n  Assertion.addMethod('lt', assertBelow);\n  Assertion.addMethod('lessThan', assertBelow);\n\n  /**\n   * ### .most(n[, msg])\n   *\n   * Asserts that the target is a number or a date less than or equal to the given number\n   * or date `n` respectively. However, it's often best to assert that the target is equal to its\n   * expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.at.most(2); // Not recommended\n   *     expect(1).to.be.at.most(1); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the value of the\n   * target's `length` property is less than or equal to the given number `n`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.at.most(4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.most`.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.not.be.at.most(1); // Not recommended\n   *\n   * `.most` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(2).to.be.at.most(1, 'nooo why fail??');\n   *     expect(2, 'nooo why fail??').to.be.at.most(1);\n   *\n   * The alias `.lte` can be used interchangeably with `.most`.\n   *\n   * @name most\n   * @alias lte\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertMost (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , nType = _.type(n).toLowerCase()\n      , shouldThrow = true;\n\n    if (doLength) {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n    \n    if (!doLength && (objType === 'date' && nType !== 'date')) {\n      errorMessage = msgPrefix + 'the argument to most must be a date';\n    } else if (nType !== 'number' && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the argument to most must be a number';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var len = obj.length;\n      this.assert(\n          len <= n\n        , 'expected #{this} to have a length at most #{exp} but got #{act}'\n        , 'expected #{this} to have a length above #{exp}'\n        , n\n        , len\n      );\n    } else {\n      this.assert(\n          obj <= n\n        , 'expected #{this} to be at most #{exp}'\n        , 'expected #{this} to be above #{exp}'\n        , n\n      );\n    }\n  }\n\n  Assertion.addMethod('most', assertMost);\n  Assertion.addMethod('lte', assertMost);\n\n  /**\n   * ### .within(start, finish[, msg])\n   *\n   * Asserts that the target is a number or a date greater than or equal to the given\n   * number or date `start`, and less than or equal to the given number or date `finish` respectively.\n   * However, it's often best to assert that the target is equal to its expected\n   * value.\n   *\n   *     expect(2).to.equal(2); // Recommended\n   *     expect(2).to.be.within(1, 3); // Not recommended\n   *     expect(2).to.be.within(2, 3); // Not recommended\n   *     expect(2).to.be.within(1, 2); // Not recommended\n   *\n   * Add `.lengthOf` earlier in the chain to assert that the value of the\n   * target's `length` property is greater than or equal to the given number\n   * `start`, and less than or equal to the given number `finish`.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3); // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2, 4); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.within`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.within(2, 4); // Not recommended\n   *\n   * `.within` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(4).to.be.within(1, 3, 'nooo why fail??');\n   *     expect(4, 'nooo why fail??').to.be.within(1, 3);\n   *\n   * @name within\n   * @param {Number} start lower bound inclusive\n   * @param {Number} finish upper bound inclusive\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('within', function (start, finish, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , doLength = flag(this, 'doLength')\n      , flagMsg = flag(this, 'message')\n      , msgPrefix = ((flagMsg) ? flagMsg + ': ' : '')\n      , ssfi = flag(this, 'ssfi')\n      , objType = _.type(obj).toLowerCase()\n      , startType = _.type(start).toLowerCase()\n      , finishType = _.type(finish).toLowerCase()\n      , shouldThrow = true\n      , range = (startType === 'date' && finishType === 'date')\n          ? start.toUTCString() + '..' + finish.toUTCString()\n          : start + '..' + finish;\n\n    if (doLength) {\n      new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    }\n\n    if (!doLength && (objType === 'date' && (startType !== 'date' || finishType !== 'date'))) {\n      errorMessage = msgPrefix + 'the arguments to within must be dates';\n    } else if ((startType !== 'number' || finishType !== 'number') && (doLength || objType === 'number')) {\n      errorMessage = msgPrefix + 'the arguments to within must be numbers';\n    } else if (!doLength && (objType !== 'date' && objType !== 'number')) {\n      var printObj = (objType === 'string') ? \"'\" + obj + \"'\" : obj;\n      errorMessage = msgPrefix + 'expected ' + printObj + ' to be a number or a date';\n    } else {\n      shouldThrow = false;\n    }\n\n    if (shouldThrow) {\n      throw new AssertionError(errorMessage, undefined, ssfi);\n    }\n\n    if (doLength) {\n      var len = obj.length;\n      this.assert(\n          len >= start && len <= finish\n        , 'expected #{this} to have a length within ' + range\n        , 'expected #{this} to not have a length within ' + range\n      );\n    } else {\n      this.assert(\n          obj >= start && obj <= finish\n        , 'expected #{this} to be within ' + range\n        , 'expected #{this} to not be within ' + range\n      );\n    }\n  });\n\n  /**\n   * ### .instanceof(constructor[, msg])\n   *\n   * Asserts that the target is an instance of the given `constructor`.\n   *\n   *     function Cat () { }\n   *\n   *     expect(new Cat()).to.be.an.instanceof(Cat);\n   *     expect([1, 2]).to.be.an.instanceof(Array);\n   *\n   * Add `.not` earlier in the chain to negate `.instanceof`.\n   *\n   *     expect({a: 1}).to.not.be.an.instanceof(Array);\n   *\n   * `.instanceof` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.be.an.instanceof(Array, 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.an.instanceof(Array);\n   *\n   * Due to limitations in ES5, `.instanceof` may not always work as expected\n   * when using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing built-in object such as\n   * `Array`, `Error`, and `Map`. See your transpiler's docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * The alias `.instanceOf` can be used interchangeably with `.instanceof`.\n   *\n   * @name instanceof\n   * @param {Constructor} constructor\n   * @param {String} msg _optional_\n   * @alias instanceOf\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertInstanceOf (constructor, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var target = flag(this, 'object')\n    var ssfi = flag(this, 'ssfi');\n    var flagMsg = flag(this, 'message');\n    var validInstanceOfTarget = constructor === Object(constructor) && (\n        typeof constructor === 'function' ||\n        (typeof Symbol !== 'undefined' &&\n         typeof Symbol.hasInstance !== 'undefined' &&\n         Symbol.hasInstance in constructor)\n    );\n\n    if (!validInstanceOfTarget) {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      var constructorType = constructor === null ? 'null' : typeof constructor;\n      throw new AssertionError(\n        flagMsg + 'The instanceof assertion needs a constructor but ' + constructorType + ' was given.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isInstanceOf = target instanceof constructor\n\n    var name = _.getName(constructor);\n    if (name === null) {\n        name = 'an unnamed constructor';\n    }\n\n    this.assert(\n        isInstanceOf\n      , 'expected #{this} to be an instance of ' + name\n      , 'expected #{this} to not be an instance of ' + name\n    );\n  };\n\n  Assertion.addMethod('instanceof', assertInstanceOf);\n  Assertion.addMethod('instanceOf', assertInstanceOf);\n\n  /**\n   * ### .property(name[, val[, msg]])\n   *\n   * Asserts that the target has a property with the given key `name`.\n   *\n   *     expect({a: 1}).to.have.property('a');\n   *\n   * When `val` is provided, `.property` also asserts that the property's value\n   * is equal to the given `val`.\n   *\n   *     expect({a: 1}).to.have.property('a', 1);\n   *\n   * By default, strict (`===`) equality is used. Add `.deep` earlier in the\n   * chain to use deep equality instead. See the `deep-eql` project page for\n   * info on the deep equality algorithm: https://github.com/chaijs/deep-eql.\n   *\n   *     // Target object deeply (but not strictly) has property `x: {a: 1}`\n   *     expect({x: {a: 1}}).to.have.deep.property('x', {a: 1});\n   *     expect({x: {a: 1}}).to.not.have.property('x', {a: 1});\n   *\n   * The target's enumerable and non-enumerable properties are always included\n   * in the search. By default, both own and inherited properties are included.\n   * Add `.own` earlier in the chain to exclude inherited properties from the\n   * search.\n   *\n   *     Object.prototype.b = 2;\n   *\n   *     expect({a: 1}).to.have.own.property('a');\n   *     expect({a: 1}).to.have.own.property('a', 1);\n   *     expect({a: 1}).to.have.property('b').but.not.own.property('b'); \n   *\n   * `.deep` and `.own` can be combined.\n   *\n   *     expect({x: {a: 1}}).to.have.deep.own.property('x', {a: 1});\n   *\n   * Add `.nested` earlier in the chain to enable dot- and bracket-notation when\n   * referencing nested properties.\n   *\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]');\n   *     expect({a: {b: ['x', 'y']}}).to.have.nested.property('a.b[1]', 'y');\n   *\n   * If `.` or `[]` are part of an actual property name, they can be escaped by\n   * adding two backslashes before them.\n   *\n   *     expect({'.a': {'[b]': 'x'}}).to.have.nested.property('\\\\.a.\\\\[b\\\\]');\n   *\n   * `.deep` and `.nested` can be combined.\n   *\n   *     expect({a: {b: [{c: 3}]}})\n   *       .to.have.deep.nested.property('a.b[0]', {c: 3});\n   *\n   * `.own` and `.nested` cannot be combined.\n   *\n   * Add `.not` earlier in the chain to negate `.property`.\n   *\n   *     expect({a: 1}).to.not.have.property('b');\n   * \n   * However, it's dangerous to negate `.property` when providing `val`. The\n   * problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't have a property with the given key `name`, or that it\n   * does have a property with the given key `name` but its value isn't equal to\n   * the given `val`. It's often best to identify the exact output that's\n   * expected, and then write an assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property with the given key\n   * `name`, it's often best to assert exactly that.\n   *\n   *     expect({b: 2}).to.not.have.property('a'); // Recommended\n   *     expect({b: 2}).to.not.have.property('a', 1); // Not recommended\n   *\n   * When the target is expected to have a property with the given key `name`,\n   * it's often best to assert that the property has its expected value, rather\n   * than asserting that it doesn't have one of many unexpected values.\n   *\n   *     expect({a: 3}).to.have.property('a', 3); // Recommended\n   *     expect({a: 3}).to.not.have.property('a', 1); // Not recommended\n   *\n   * `.property` changes the target of any assertions that follow in the chain\n   * to be the value of the property from the original target object.\n   *\n   *     expect({a: 1}).to.have.property('a').that.is.a('number');\n   *\n   * `.property` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing `val`, only use the\n   * second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.property('a', 2, 'nooo why fail??');\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('a', 2);\n   *     expect({a: 1}, 'nooo why fail??').to.have.property('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1}).to.have.property('b', undefined, 'nooo why fail??');\n   * \n   * The above assertion isn't the same thing as not providing `val`. Instead,\n   * it's asserting that the target object has a `b` property that's equal to\n   * `undefined`.\n   *\n   * The assertions `.ownProperty` and `.haveOwnProperty` can be used\n   * interchangeably with `.own.property`.\n   *\n   * @name property\n   * @param {String} name\n   * @param {Mixed} val (optional)\n   * @param {String} msg _optional_\n   * @returns value of property for chaining\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertProperty (name, val, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var isNested = flag(this, 'nested')\n      , isOwn = flag(this, 'own')\n      , flagMsg = flag(this, 'message')\n      , obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi');\n\n    if (isNested && isOwn) {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      throw new AssertionError(\n        flagMsg + 'The \"nested\" and \"own\" flags cannot be combined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    if (obj === null || obj === undefined) {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      throw new AssertionError(\n        flagMsg + 'Target cannot be null or undefined.',\n        undefined,\n        ssfi\n      );\n    }\n\n    var isDeep = flag(this, 'deep')\n      , negate = flag(this, 'negate')\n      , pathInfo = isNested ? _.getPathInfo(obj, name) : null\n      , value = isNested ? pathInfo.value : obj[name];\n\n    var descriptor = '';\n    if (isDeep) descriptor += 'deep ';\n    if (isOwn) descriptor += 'own ';\n    if (isNested) descriptor += 'nested ';\n    descriptor += 'property ';\n\n    var hasProperty;\n    if (isOwn) hasProperty = Object.prototype.hasOwnProperty.call(obj, name);\n    else if (isNested) hasProperty = pathInfo.exists;\n    else hasProperty = _.hasProperty(obj, name);\n\n    // When performing a negated assertion for both name and val, merely having\n    // a property with the given name isn't enough to cause the assertion to\n    // fail. It must both have a property with the given name, and the value of\n    // that property must equal the given val. Therefore, skip this assertion in\n    // favor of the next.\n    if (!negate || arguments.length === 1) {\n      this.assert(\n          hasProperty\n        , 'expected #{this} to have ' + descriptor + _.inspect(name)\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name));\n    }\n\n    if (arguments.length > 1) {\n      this.assert(\n          hasProperty && (isDeep ? _.eql(val, value) : val === value)\n        , 'expected #{this} to have ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'\n        , 'expected #{this} to not have ' + descriptor + _.inspect(name) + ' of #{act}'\n        , val\n        , value\n      );\n    }\n\n    flag(this, 'object', value);\n  }\n\n  Assertion.addMethod('property', assertProperty);\n\n  function assertOwnProperty (name, value, msg) {\n    flag(this, 'own', true);\n    assertProperty.apply(this, arguments);\n  }\n\n  Assertion.addMethod('ownProperty', assertOwnProperty);\n  Assertion.addMethod('haveOwnProperty', assertOwnProperty);\n\n  /**\n   * ### .ownPropertyDescriptor(name[, descriptor[, msg]])\n   *\n   * Asserts that the target has its own property descriptor with the given key\n   * `name`. Enumerable and non-enumerable properties are included in the\n   * search.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a');\n   *\n   * When `descriptor` is provided, `.ownPropertyDescriptor` also asserts that\n   * the property's descriptor is deeply equal to the given `descriptor`. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.ownPropertyDescriptor`.\n   *\n   *     expect({a: 1}).to.not.have.ownPropertyDescriptor('b');\n   * \n   * However, it's dangerous to negate `.ownPropertyDescriptor` when providing\n   * a `descriptor`. The problem is that it creates uncertain expectations by\n   * asserting that the target either doesn't have a property descriptor with\n   * the given key `name`, or that it does have a property descriptor with the\n   * given key `name` but its not deeply equal to the given `descriptor`. It's\n   * often best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to have a property descriptor with the given\n   * key `name`, it's often best to assert exactly that.\n   *\n   *     // Recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a');\n   *\n   *     // Not recommended\n   *     expect({b: 2}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * When the target is expected to have a property descriptor with the given\n   * key `name`, it's often best to assert that the property has its expected\n   * descriptor, rather than asserting that it doesn't have one of many\n   * unexpected descriptors.\n   *\n   *     // Recommended\n   *     expect({a: 3}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 3,\n   *     });\n   *\n   *     // Not recommended\n   *     expect({a: 3}).to.not.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 1,\n   *     });\n   *\n   * `.ownPropertyDescriptor` changes the target of any assertions that follow\n   * in the chain to be the value of the property descriptor from the original\n   * target object.\n   *\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a')\n   *       .that.has.property('enumerable', true);\n   *\n   * `.ownPropertyDescriptor` accepts an optional `msg` argument which is a\n   * custom error message to show when the assertion fails. The message can also\n   * be given as the second argument to `expect`. When not providing\n   * `descriptor`, only use the second form.\n   *\n   *     // Recommended\n   *     expect({a: 1}).to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     }, 'nooo why fail??');\n   *\n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('a', {\n   *       configurable: true,\n   *       enumerable: true,\n   *       writable: true,\n   *       value: 2,\n   *     });\n   * \n   *     // Recommended\n   *     expect({a: 1}, 'nooo why fail??').to.have.ownPropertyDescriptor('b');\n   *\n   *     // Not recommended\n   *     expect({a: 1})\n   *       .to.have.ownPropertyDescriptor('b', undefined, 'nooo why fail??');\n   *\n   * The above assertion isn't the same thing as not providing `descriptor`.\n   * Instead, it's asserting that the target object has a `b` property\n   * descriptor that's deeply equal to `undefined`.\n   *\n   * The alias `.haveOwnPropertyDescriptor` can be used interchangeably with\n   * `.ownPropertyDescriptor`.\n   *\n   * @name ownPropertyDescriptor\n   * @alias haveOwnPropertyDescriptor\n   * @param {String} name\n   * @param {Object} descriptor _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertOwnPropertyDescriptor (name, descriptor, msg) {\n    if (typeof descriptor === 'string') {\n      msg = descriptor;\n      descriptor = null;\n    }\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);\n    if (actualDescriptor && descriptor) {\n      this.assert(\n          _.eql(descriptor, actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)\n        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)\n        , descriptor\n        , actualDescriptor\n        , true\n      );\n    } else {\n      this.assert(\n          actualDescriptor\n        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)\n        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)\n      );\n    }\n    flag(this, 'object', actualDescriptor);\n  }\n\n  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);\n  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);\n\n  /**\n   * ### .lengthOf(n[, msg])\n   *\n   * Asserts that the target's `length` property is equal to the given number\n   * `n`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *     expect('foo').to.have.lengthOf(3);\n   *\n   * Add `.not` earlier in the chain to negate `.lengthOf`. However, it's often\n   * best to assert that the target's `length` property is equal to its expected\n   * value, rather than not equal to one of many unexpected values.\n   *\n   *     expect('foo').to.have.lengthOf(3); // Recommended\n   *     expect('foo').to.not.have.lengthOf(4); // Not recommended\n   *\n   * `.lengthOf` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2, 3]).to.have.lengthOf(2, 'nooo why fail??');\n   *     expect([1, 2, 3], 'nooo why fail??').to.have.lengthOf(2);\n   *\n   * `.lengthOf` can also be used as a language chain, causing all `.above`,\n   * `.below`, `.least`, `.most`, and `.within` assertions that follow in the\n   * chain to use the target's `length` property as the target. However, it's\n   * often best to assert that the target's `length` property is equal to its\n   * expected length, rather than asserting that its `length` property falls\n   * within some range of values.\n   *\n   *     // Recommended\n   *     expect([1, 2, 3]).to.have.lengthOf(3);\n   *\n   *     // Not recommended\n   *     expect([1, 2, 3]).to.have.lengthOf.above(2);\n   *     expect([1, 2, 3]).to.have.lengthOf.below(4);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.least(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.at.most(3);\n   *     expect([1, 2, 3]).to.have.lengthOf.within(2,4);\n   *\n   * Due to a compatibility issue, the alias `.length` can't be chained directly\n   * off of an uninvoked method such as `.a`. Therefore, `.length` can't be used\n   * interchangeably with `.lengthOf` in every situation. It's recommended to\n   * always use `.lengthOf` instead of `.length`.\n   *\n   *     expect([1, 2, 3]).to.have.a.length(3); // incompatible; throws error\n   *     expect([1, 2, 3]).to.have.a.lengthOf(3);  // passes as expected\n   *\n   * @name lengthOf\n   * @alias length\n   * @param {Number} n\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertLengthChain () {\n    flag(this, 'doLength', true);\n  }\n\n  function assertLength (n, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).to.have.property('length');\n    var len = obj.length;\n\n    this.assert(\n        len == n\n      , 'expected #{this} to have a length of #{exp} but got #{act}'\n      , 'expected #{this} to not have a length of #{act}'\n      , n\n      , len\n    );\n  }\n\n  Assertion.addChainableMethod('length', assertLength, assertLengthChain);\n  Assertion.addChainableMethod('lengthOf', assertLength, assertLengthChain);\n\n  /**\n   * ### .match(re[, msg])\n   *\n   * Asserts that the target matches the given regular expression `re`.\n   *\n   *     expect('foobar').to.match(/^foo/);\n   *\n   * Add `.not` earlier in the chain to negate `.match`.\n   *\n   *     expect('foobar').to.not.match(/taco/);\n   *\n   * `.match` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect('foobar').to.match(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.match(/taco/);\n   *\n   * The alias `.matches` can be used interchangeably with `.match`.\n   *\n   * @name match\n   * @alias matches\n   * @param {RegExp} re\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n  function assertMatch(re, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    this.assert(\n        re.exec(obj)\n      , 'expected #{this} to match ' + re\n      , 'expected #{this} not to match ' + re\n    );\n  }\n\n  Assertion.addMethod('match', assertMatch);\n  Assertion.addMethod('matches', assertMatch);\n\n  /**\n   * ### .string(str[, msg])\n   *\n   * Asserts that the target string contains the given substring `str`.\n   *\n   *     expect('foobar').to.have.string('bar');\n   *\n   * Add `.not` earlier in the chain to negate `.string`.\n   *\n   *     expect('foobar').to.not.have.string('taco');\n   *\n   * `.string` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect('foobar').to.have.string(/taco/, 'nooo why fail??');\n   *     expect('foobar', 'nooo why fail??').to.have.string(/taco/);\n   *\n   * @name string\n   * @param {String} str\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('string', function (str, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(obj, flagMsg, ssfi, true).is.a('string');\n\n    this.assert(\n        ~obj.indexOf(str)\n      , 'expected #{this} to contain ' + _.inspect(str)\n      , 'expected #{this} to not contain ' + _.inspect(str)\n    );\n  });\n\n  /**\n   * ### .keys(key1[, key2[, ...]])\n   *\n   * Asserts that the target object, array, map, or set has the given keys. Only\n   * the target's own inherited properties are included in the search. \n   *\n   * When the target is an object or array, keys can be provided as one or more\n   * string arguments, a single array argument, or a single object argument. In\n   * the latter case, only the keys in the given object matter; the values are\n   * ignored.\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *     expect(['x', 'y']).to.have.all.keys(0, 1);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys(['a', 'b']);\n   *     expect(['x', 'y']).to.have.all.keys([0, 1]);\n   *\n   *     expect({a: 1, b: 2}).to.have.all.keys({a: 4, b: 5}); // ignore 4 and 5\n   *     expect(['x', 'y']).to.have.all.keys({0: 4, 1: 5}); // ignore 4 and 5\n   *\n   * When the target is a map or set, each key must be provided as a separate\n   * argument.\n   *\n   *     expect(new Map([['a', 1], ['b', 2]])).to.have.all.keys('a', 'b');\n   *     expect(new Set(['a', 'b'])).to.have.all.keys('a', 'b');\n   *\n   * Because `.keys` does different things based on the target's type, it's\n   * important to check the target's type before using `.keys`. See the `.a` doc\n   * for info on testing a target's type.\n   *\n   *     expect({a: 1, b: 2}).to.be.an('object').that.has.all.keys('a', 'b');\n   *\n   * By default, strict (`===`) equality is used to compare keys of maps and\n   * sets. Add `.deep` earlier in the chain to use deep equality instead. See\n   * the `deep-eql` project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target set deeply (but not strictly) has key `{a: 1}`\n   *     expect(new Set([{a: 1}])).to.have.all.deep.keys([{a: 1}]);\n   *     expect(new Set([{a: 1}])).to.not.have.all.keys([{a: 1}]);\n   *\n   * By default, the target must have all of the given keys and no more. Add\n   * `.any` earlier in the chain to only require that the target have at least\n   * one of the given keys. Also, add `.not` earlier in the chain to negate\n   * `.keys`. It's often best to add `.any` when negating `.keys`, and to use\n   * `.all` when asserting `.keys` without negation.\n   *\n   * When negating `.keys`, `.any` is preferred because `.not.any.keys` asserts\n   * exactly what's expected of the output, whereas `.not.all.keys` creates\n   * uncertain expectations.\n   *\n   *     // Recommended; asserts that target doesn't have any of the given keys\n   *     expect({a: 1, b: 2}).to.not.have.any.keys('c', 'd');\n   *\n   *     // Not recommended; asserts that target doesn't have all of the given\n   *     // keys but may or may not have some of them\n   *     expect({a: 1, b: 2}).to.not.have.all.keys('c', 'd');\n   *\n   * When asserting `.keys` without negation, `.all` is preferred because\n   * `.all.keys` asserts exactly what's expected of the output, whereas\n   * `.any.keys` creates uncertain expectations.\n   *\n   *     // Recommended; asserts that target has all the given keys\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b');\n   *\n   *     // Not recommended; asserts that target has at least one of the given\n   *     // keys but may or may not have more of them\n   *     expect({a: 1, b: 2}).to.have.any.keys('a', 'b');\n   *\n   * Note that `.all` is used by default when neither `.all` nor `.any` appear\n   * earlier in the chain. However, it's often best to add `.all` anyway because\n   * it improves readability.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1, b: 2}).to.have.all.keys('a', 'b'); // Recommended\n   *     expect({a: 1, b: 2}).to.have.keys('a', 'b'); // Not recommended\n   *\n   * Add `.include` earlier in the chain to require that the target's keys be a\n   * superset of the expected keys, rather than identical sets.\n   *\n   *     // Target object's keys are a superset of ['a', 'b'] but not identical\n   *     expect({a: 1, b: 2, c: 3}).to.include.all.keys('a', 'b');\n   *     expect({a: 1, b: 2, c: 3}).to.not.have.all.keys('a', 'b');\n   *\n   * However, if `.any` and `.include` are combined, only the `.any` takes\n   * effect. The `.include` is ignored in this case.\n   *\n   *     // Both assertions are identical\n   *     expect({a: 1}).to.have.any.keys('a', 'b');\n   *     expect({a: 1}).to.include.any.keys('a', 'b');\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.have.key('b');\n   *\n   * The alias `.key` can be used interchangeably with `.keys`.\n   *\n   * @name keys\n   * @alias key\n   * @param {...String|Array|Object} keys\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertKeys (keys) {\n    var obj = flag(this, 'object')\n      , objType = _.type(obj)\n      , keysType = _.type(keys)\n      , ssfi = flag(this, 'ssfi')\n      , isDeep = flag(this, 'deep')\n      , str\n      , deepStr = ''\n      , ok = true\n      , flagMsg = flag(this, 'message');\n\n    flagMsg = flagMsg ? flagMsg + ': ' : '';\n    var mixedArgsMsg = flagMsg + 'when testing keys against an object or an array you must give a single Array|Object|String argument or multiple String arguments';\n\n    if (objType === 'Map' || objType === 'Set') {\n      deepStr = isDeep ? 'deeply ' : '';\n      actual = [];\n\n      // Map and Set '.keys' aren't supported in IE 11. Therefore, use .forEach.\n      obj.forEach(function (val, key) { actual.push(key) });\n\n      if (keysType !== 'Array') {\n        keys = Array.prototype.slice.call(arguments);\n      }\n\n    } else {\n      actual = _.getOwnEnumerableProperties(obj);\n\n      switch (keysType) {\n        case 'Array':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          break;\n        case 'Object':\n          if (arguments.length > 1) {\n            throw new AssertionError(mixedArgsMsg, undefined, ssfi);\n          }\n          keys = Object.keys(keys);\n          break;\n        default:\n          keys = Array.prototype.slice.call(arguments);\n      }\n\n      // Only stringify non-Symbols because Symbols would become \"Symbol()\"\n      keys = keys.map(function (val) {\n        return typeof val === 'symbol' ? val : String(val);\n      });\n    }\n\n    if (!keys.length) {\n      throw new AssertionError(flagMsg + 'keys required', undefined, ssfi);\n    }\n\n    var len = keys.length\n      , any = flag(this, 'any')\n      , all = flag(this, 'all')\n      , expected = keys\n      , actual;\n\n    if (!any && !all) {\n      all = true;\n    }\n\n    // Has any\n    if (any) {\n      ok = expected.some(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n    }\n\n    // Has all\n    if (all) {\n      ok = expected.every(function(expectedKey) {\n        return actual.some(function(actualKey) {\n          if (isDeep) {\n            return _.eql(expectedKey, actualKey);\n          } else {\n            return expectedKey === actualKey;\n          }\n        });\n      });\n\n      if (!flag(this, 'contains')) {\n        ok = ok && keys.length == actual.length;\n      }\n    }\n\n    // Key string\n    if (len > 1) {\n      keys = keys.map(function(key) {\n        return _.inspect(key);\n      });\n      var last = keys.pop();\n      if (all) {\n        str = keys.join(', ') + ', and ' + last;\n      }\n      if (any) {\n        str = keys.join(', ') + ', or ' + last;\n      }\n    } else {\n      str = _.inspect(keys[0]);\n    }\n\n    // Form\n    str = (len > 1 ? 'keys ' : 'key ') + str;\n\n    // Have / include\n    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;\n\n    // Assertion\n    this.assert(\n        ok\n      , 'expected #{this} to ' + deepStr + str\n      , 'expected #{this} to not ' + deepStr + str\n      , expected.slice(0).sort(_.compareByInspect)\n      , actual.sort(_.compareByInspect)\n      , true\n    );\n  }\n\n  Assertion.addMethod('keys', assertKeys);\n  Assertion.addMethod('key', assertKeys);\n\n  /**\n   * ### .throw([errorLike], [errMsgMatcher], [msg])\n   *\n   * When no arguments are provided, `.throw` invokes the target function and\n   * asserts that an error is thrown.\n   * \n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw();\n   *\n   * When one argument is provided, and it's an error constructor, `.throw`\n   * invokes the target function and asserts that an error is thrown that's an\n   * instance of that error constructor.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError);\n   *\n   * When one argument is provided, and it's an error instance, `.throw` invokes\n   * the target function and asserts that an error is thrown that's strictly\n   * (`===`) equal to that error instance.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(err);\n   *\n   * When one argument is provided, and it's a string, `.throw` invokes the\n   * target function and asserts that an error is thrown with a message that\n   * contains that string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw('salmon');\n   *\n   * When one argument is provided, and it's a regular expression, `.throw`\n   * invokes the target function and asserts that an error is thrown with a\n   * message that matches that regular expression.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(/salmon/);\n   *\n   * When two arguments are provided, and the first is an error instance or\n   * constructor, and the second is a string or regular expression, `.throw`\n   * invokes the function and asserts that an error is thrown that fulfills both\n   * conditions as described above.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon');\n   *     expect(badFn).to.throw(TypeError, /salmon/);\n   *     expect(badFn).to.throw(err, 'salmon');\n   *     expect(badFn).to.throw(err, /salmon/);\n   *\n   * Add `.not` earlier in the chain to negate `.throw`.\n   *     \n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw();\n   * \n   * However, it's dangerous to negate `.throw` when providing any arguments.\n   * The problem is that it creates uncertain expectations by asserting that the\n   * target either doesn't throw an error, or that it throws an error but of a\n   * different type than the given type, or that it throws an error of the given\n   * type but with a message that doesn't include the given string. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to throw an error, it's often best to assert\n   * exactly that.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.not.throw(); // Recommended\n   *     expect(goodFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * When the target is expected to throw an error, it's often best to assert\n   * that the error is of its expected type, and has a message that includes an\n   * expected string, rather than asserting that it doesn't have one of many\n   * unexpected types, and doesn't have a message that includes some string.\n   *\n   *     var badFn = function () { throw new TypeError('Illegal salmon!'); };\n   *\n   *     expect(badFn).to.throw(TypeError, 'salmon'); // Recommended\n   *     expect(badFn).to.not.throw(ReferenceError, 'x'); // Not recommended\n   *\n   * `.throw` changes the target of any assertions that follow in the chain to\n   * be the error object that's thrown.\n   *\n   *     var err = new TypeError('Illegal salmon!');\n   *     err.code = 42;\n   *     var badFn = function () { throw err; };\n   *\n   *     expect(badFn).to.throw(TypeError).with.property('code', 42);\n   *\n   * `.throw` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`. When not providing two arguments, always use\n   * the second form.\n   *\n   *     var goodFn = function () {};\n   *\n   *     expect(goodFn).to.throw(TypeError, 'x', 'nooo why fail??');\n   *     expect(goodFn, 'nooo why fail??').to.throw();\n   *\n   * Due to limitations in ES5, `.throw` may not always work as expected when\n   * using a transpiler such as Babel or TypeScript. In particular, it may\n   * produce unexpected results when subclassing the built-in `Error` object and\n   * then passing the subclassed constructor to `.throw`. See your transpiler's\n   * docs for details:\n   *\n   * - ([Babel](https://babeljs.io/docs/usage/caveats/#classes))\n   * - ([TypeScript](https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work))\n   *\n   * Beware of some common mistakes when using the `throw` assertion. One common\n   * mistake is to accidentally invoke the function yourself instead of letting\n   * the `throw` assertion invoke the function for you. For example, when\n   * testing if a function named `fn` throws, provide `fn` instead of `fn()` as\n   * the target for the assertion.\n   *\n   *     expect(fn).to.throw();     // Good! Tests `fn` as desired\n   *     expect(fn()).to.throw();   // Bad! Tests result of `fn()`, not `fn`\n   *\n   * If you need to assert that your function `fn` throws when passed certain\n   * arguments, then wrap a call to `fn` inside of another function.\n   *\n   *     expect(function () { fn(42); }).to.throw();  // Function expression\n   *     expect(() => fn(42)).to.throw();             // ES6 arrow function\n   *\n   * Another common mistake is to provide an object method (or any stand-alone\n   * function that relies on `this`) as the target of the assertion. Doing so is\n   * problematic because the `this` context will be lost when the function is\n   * invoked by `.throw`; there's no way for it to know what `this` is supposed\n   * to be. There are two ways around this problem. One solution is to wrap the\n   * method or function call inside of another function. Another solution is to\n   * use `bind`.\n   *\n   *     expect(function () { cat.meow(); }).to.throw();  // Function expression\n   *     expect(() => cat.meow()).to.throw();             // ES6 arrow function\n   *     expect(cat.meow.bind(cat)).to.throw();           // Bind\n   *\n   * Finally, it's worth mentioning that it's a best practice in JavaScript to\n   * only throw `Error` and derivatives of `Error` such as `ReferenceError`,\n   * `TypeError`, and user-defined objects that extend `Error`. No other type of\n   * value will generate a stack trace when initialized. With that said, the\n   * `throw` assertion does technically support any type of value being thrown,\n   * not just `Error` and its derivatives.\n   *\n   * The aliases `.throws` and `.Throw` can be used interchangeably with\n   * `.throw`.\n   *\n   * @name throw\n   * @alias throws\n   * @alias Throw\n   * @param {Error|ErrorConstructor} errorLike\n   * @param {String|RegExp} errMsgMatcher error message\n   * @param {String} msg _optional_\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @returns error for chaining (null if no error)\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertThrows (errorLike, errMsgMatcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , ssfi = flag(this, 'ssfi')\n      , flagMsg = flag(this, 'message')\n      , negate = flag(this, 'negate') || false;\n    new Assertion(obj, flagMsg, ssfi, true).is.a('function');\n\n    if (errorLike instanceof RegExp || typeof errorLike === 'string') {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var caughtErr;\n    try {\n      obj();\n    } catch (err) {\n      caughtErr = err;\n    }\n\n    // If we have the negate flag enabled and at least one valid argument it means we do expect an error\n    // but we want it to match a given set of criteria\n    var everyArgIsUndefined = errorLike === undefined && errMsgMatcher === undefined;\n\n    // If we've got the negate flag enabled and both args, we should only fail if both aren't compatible\n    // See Issue #551 and PR #683@GitHub\n    var everyArgIsDefined = Boolean(errorLike && errMsgMatcher);\n    var errorLikeFail = false;\n    var errMsgMatcherFail = false;\n\n    // Checking if error was thrown\n    if (everyArgIsUndefined || !everyArgIsUndefined && !negate) {\n      // We need this to display results correctly according to their types\n      var errorLikeString = 'an error';\n      if (errorLike instanceof Error) {\n        errorLikeString = '#{exp}';\n      } else if (errorLike) {\n        errorLikeString = _.checkError.getConstructorName(errorLike);\n      }\n\n      this.assert(\n          caughtErr\n        , 'expected #{this} to throw ' + errorLikeString\n        , 'expected #{this} to not throw an error but #{act} was thrown'\n        , errorLike && errorLike.toString()\n        , (caughtErr instanceof Error ?\n            caughtErr.toString() : (typeof caughtErr === 'string' ? caughtErr : caughtErr &&\n                                    _.checkError.getConstructorName(caughtErr)))\n      );\n    }\n\n    if (errorLike && caughtErr) {\n      // We should compare instances only if `errorLike` is an instance of `Error`\n      if (errorLike instanceof Error) {\n        var isCompatibleInstance = _.checkError.compatibleInstance(caughtErr, errorLike);\n\n        if (isCompatibleInstance === negate) {\n          // These checks were created to ensure we won't fail too soon when we've got both args and a negate\n          // See Issue #551 and PR #683@GitHub\n          if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n          } else {\n            this.assert(\n                negate\n              , 'expected #{this} to throw #{exp} but #{act} was thrown'\n              , 'expected #{this} to not throw #{exp}' + (caughtErr && !negate ? ' but #{act} was thrown' : '')\n              , errorLike.toString()\n              , caughtErr.toString()\n            );\n          }\n        }\n      }\n\n      var isCompatibleConstructor = _.checkError.compatibleConstructor(caughtErr, errorLike);\n      if (isCompatibleConstructor === negate) {\n        if (everyArgIsDefined && negate) {\n            errorLikeFail = true;\n        } else {\n          this.assert(\n              negate\n            , 'expected #{this} to throw #{exp} but #{act} was thrown'\n            , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n            , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n            , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n          );\n        }\n      }\n    }\n\n    if (caughtErr && errMsgMatcher !== undefined && errMsgMatcher !== null) {\n      // Here we check compatible messages\n      var placeholder = 'including';\n      if (errMsgMatcher instanceof RegExp) {\n        placeholder = 'matching'\n      }\n\n      var isCompatibleMessage = _.checkError.compatibleMessage(caughtErr, errMsgMatcher);\n      if (isCompatibleMessage === negate) {\n        if (everyArgIsDefined && negate) {\n            errMsgMatcherFail = true;\n        } else {\n          this.assert(\n            negate\n            , 'expected #{this} to throw error ' + placeholder + ' #{exp} but got #{act}'\n            , 'expected #{this} to throw error not ' + placeholder + ' #{exp}'\n            ,  errMsgMatcher\n            ,  _.checkError.getMessage(caughtErr)\n          );\n        }\n      }\n    }\n\n    // If both assertions failed and both should've matched we throw an error\n    if (errorLikeFail && errMsgMatcherFail) {\n      this.assert(\n        negate\n        , 'expected #{this} to throw #{exp} but #{act} was thrown'\n        , 'expected #{this} to not throw #{exp}' + (caughtErr ? ' but #{act} was thrown' : '')\n        , (errorLike instanceof Error ? errorLike.toString() : errorLike && _.checkError.getConstructorName(errorLike))\n        , (caughtErr instanceof Error ? caughtErr.toString() : caughtErr && _.checkError.getConstructorName(caughtErr))\n      );\n    }\n\n    flag(this, 'object', caughtErr);\n  };\n\n  Assertion.addMethod('throw', assertThrows);\n  Assertion.addMethod('throws', assertThrows);\n  Assertion.addMethod('Throw', assertThrows);\n\n  /**\n   * ### .respondTo(method[, msg])\n   *\n   * When the target is a non-function object, `.respondTo` asserts that the\n   * target has a method with the given name `method`. The method can be own or\n   * inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.respondTo('meow');\n   *\n   * When the target is a function, `.respondTo` asserts that the target's\n   * `prototype` property has a method with the given name `method`. Again, the\n   * method can be own or inherited, and it can be enumerable or non-enumerable.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(Cat).to.respondTo('meow');\n   *\n   * Add `.itself` earlier in the chain to force `.respondTo` to treat the\n   * target as a non-function object, even if it's a function. Thus, it asserts\n   * that the target has a method with the given name `method`, rather than\n   * asserting that the target's `prototype` property has a method with the\n   * given name `method`.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * When not adding `.itself`, it's important to check the target's type before\n   * using `.respondTo`. See the `.a` doc for info on checking a target's type.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *\n   *     expect(new Cat()).to.be.an('object').that.respondsTo('meow');\n   *\n   * Add `.not` earlier in the chain to negate `.respondTo`.\n   *\n   *     function Dog () {}\n   *     Dog.prototype.bark = function () {};\n   *\n   *     expect(new Dog()).to.not.respondTo('meow');\n   *\n   * `.respondTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect({}).to.respondTo('meow', 'nooo why fail??');\n   *     expect({}, 'nooo why fail??').to.respondTo('meow');\n   *\n   * The alias `.respondsTo` can be used interchangeably with `.respondTo`.\n   *\n   * @name respondTo\n   * @alias respondsTo\n   * @param {String} method\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function respondTo (method, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , itself = flag(this, 'itself')\n      , context = ('function' === typeof obj && !itself)\n        ? obj.prototype[method]\n        : obj[method];\n\n    this.assert(\n        'function' === typeof context\n      , 'expected #{this} to respond to ' + _.inspect(method)\n      , 'expected #{this} to not respond to ' + _.inspect(method)\n    );\n  }\n\n  Assertion.addMethod('respondTo', respondTo);\n  Assertion.addMethod('respondsTo', respondTo);\n\n  /**\n   * ### .itself\n   *\n   * Forces all `.respondTo` assertions that follow in the chain to behave as if\n   * the target is a non-function object, even if it's a function. Thus, it\n   * causes `.respondTo` to assert that the target has a method with the given\n   * name, rather than asserting that the target's `prototype` property has a\n   * method with the given name.\n   *\n   *     function Cat () {}\n   *     Cat.prototype.meow = function () {};\n   *     Cat.hiss = function () {};\n   *\n   *     expect(Cat).itself.to.respondTo('hiss').but.not.respondTo('meow');\n   *\n   * @name itself\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('itself', function () {\n    flag(this, 'itself', true);\n  });\n\n  /**\n   * ### .satisfy(matcher[, msg])\n   *\n   * Invokes the given `matcher` function with the target being passed as the\n   * first argument, and asserts that the value returned is truthy.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 0; \n   *     });\n   *\n   * Add `.not` earlier in the chain to negate `.satisfy`.\n   *\n   *     expect(1).to.not.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * `.satisfy` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1).to.satisfy(function(num) {\n   *       return num > 2;\n   *     }, 'nooo why fail??');\n   *\n   *     expect(1, 'nooo why fail??').to.satisfy(function(num) {\n   *       return num > 2;\n   *     });\n   *\n   * The alias `.satisfies` can be used interchangeably with `.satisfy`.\n   *\n   * @name satisfy\n   * @alias satisfies\n   * @param {Function} matcher\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function satisfy (matcher, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object');\n    var result = matcher(obj);\n    this.assert(\n        result\n      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)\n      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)\n      , flag(this, 'negate') ? false : true\n      , result\n    );\n  }\n\n  Assertion.addMethod('satisfy', satisfy);\n  Assertion.addMethod('satisfies', satisfy);\n\n  /**\n   * ### .closeTo(expected, delta[, msg])\n   *\n   * Asserts that the target is a number that's within a given +/- `delta` range\n   * of the given number `expected`. However, it's often best to assert that the\n   * target is equal to its expected value.\n   *\n   *     // Recommended\n   *     expect(1.5).to.equal(1.5);\n   *\n   *     // Not recommended\n   *     expect(1.5).to.be.closeTo(1, 0.5);\n   *     expect(1.5).to.be.closeTo(2, 0.5);\n   *     expect(1.5).to.be.closeTo(1, 1);\n   *\n   * Add `.not` earlier in the chain to negate `.closeTo`.\n   *\n   *     expect(1.5).to.equal(1.5); // Recommended\n   *     expect(1.5).to.not.be.closeTo(3, 1); // Not recommended\n   *\n   * `.closeTo` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect(1.5).to.be.closeTo(3, 1, 'nooo why fail??');\n   *     expect(1.5, 'nooo why fail??').to.be.closeTo(3, 1);\n   *\n   * The alias `.approximately` can be used interchangeably with `.closeTo`.\n   *\n   * @name closeTo\n   * @alias approximately\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function closeTo(expected, delta, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).is.a('number');\n    if (typeof expected !== 'number' || typeof delta !== 'number') {\n      flagMsg = flagMsg ? flagMsg + ': ' : '';\n      throw new AssertionError(\n          flagMsg + 'the arguments to closeTo or approximately must be numbers',\n          undefined,\n          ssfi\n      );\n    }\n\n    this.assert(\n        Math.abs(obj - expected) <= delta\n      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta\n      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta\n    );\n  }\n\n  Assertion.addMethod('closeTo', closeTo);\n  Assertion.addMethod('approximately', closeTo);\n\n  // Note: Duplicates are ignored if testing for inclusion instead of sameness.\n  function isSubsetOf(subset, superset, cmp, contains, ordered) {\n    if (!contains) {\n      if (subset.length !== superset.length) return false;\n      superset = superset.slice();\n    }\n\n    return subset.every(function(elem, idx) {\n      if (ordered) return cmp ? cmp(elem, superset[idx]) : elem === superset[idx];\n\n      if (!cmp) {\n        var matchIdx = superset.indexOf(elem);\n        if (matchIdx === -1) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      }\n\n      return superset.some(function(elem2, matchIdx) {\n        if (!cmp(elem, elem2)) return false;\n\n        // Remove match from superset so not counted twice if duplicate in subset.\n        if (!contains) superset.splice(matchIdx, 1);\n        return true;\n      });\n    });\n  }\n\n  /**\n   * ### .members(set[, msg])\n   *\n   * Asserts that the target array has the same members as the given array\n   * `set`.\n   *\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3]);\n   *     expect([1, 2, 2]).to.have.members([2, 1, 2]);\n   *\n   * By default, members are compared using strict (`===`) equality. Add `.deep`\n   * earlier in the chain to use deep equality instead. See the `deep-eql`\n   * project page for info on the deep equality algorithm:\n   * https://github.com/chaijs/deep-eql.\n   *\n   *     // Target array deeply (but not strictly) has member `{a: 1}`\n   *     expect([{a: 1}]).to.have.deep.members([{a: 1}]);\n   *     expect([{a: 1}]).to.not.have.members([{a: 1}]);\n   *\n   * By default, order doesn't matter. Add `.ordered` earlier in the chain to\n   * require that members appear in the same order.\n   *\n   *     expect([1, 2, 3]).to.have.ordered.members([1, 2, 3]);\n   *     expect([1, 2, 3]).to.have.members([2, 1, 3])\n   *       .but.not.ordered.members([2, 1, 3]);\n   *\n   * By default, both arrays must be the same size. Add `.include` earlier in\n   * the chain to require that the target's members be a superset of the\n   * expected members. Note that duplicates are ignored in the subset when\n   * `.include` is added.\n   *\n   *     // Target array is a superset of [1, 2] but not identical\n   *     expect([1, 2, 3]).to.include.members([1, 2]);\n   *     expect([1, 2, 3]).to.not.have.members([1, 2]);\n   *\n   *     // Duplicates in the subset are ignored\n   *     expect([1, 2, 3]).to.include.members([1, 2, 2, 2]);\n   *\n   * `.deep`, `.ordered`, and `.include` can all be combined. However, if\n   * `.include` and `.ordered` are combined, the ordering begins at the start of\n   * both arrays.\n   *\n   *     expect([{a: 1}, {b: 2}, {c: 3}])\n   *       .to.include.deep.ordered.members([{a: 1}, {b: 2}])\n   *       .but.not.include.deep.ordered.members([{b: 2}, {c: 3}]);\n   *\n   * Add `.not` earlier in the chain to negate `.members`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the target array doesn't have all of the same members as\n   * the given array `set` but may or may not have some of them. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     expect([1, 2]).to.not.include(3).and.not.include(4); // Recommended\n   *     expect([1, 2]).to.not.have.members([3, 4]); // Not recommended\n   *\n   * `.members` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`.\n   *\n   *     expect([1, 2]).to.have.members([1, 2, 3], 'nooo why fail??');\n   *     expect([1, 2], 'nooo why fail??').to.have.members([1, 2, 3]);\n   *\n   * @name members\n   * @param {Array} set\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addMethod('members', function (subset, msg) {\n    if (msg) flag(this, 'message', msg);\n    var obj = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n\n    new Assertion(obj, flagMsg, ssfi, true).to.be.an('array');\n    new Assertion(subset, flagMsg, ssfi, true).to.be.an('array');\n\n    var contains = flag(this, 'contains');\n    var ordered = flag(this, 'ordered');\n\n    var subject, failMsg, failNegateMsg, lengthCheck;\n\n    if (contains) {\n      subject = ordered ? 'an ordered superset' : 'a superset';\n      failMsg = 'expected #{this} to be ' + subject + ' of #{exp}';\n      failNegateMsg = 'expected #{this} to not be ' + subject + ' of #{exp}';\n    } else {\n      subject = ordered ? 'ordered members' : 'members';\n      failMsg = 'expected #{this} to have the same ' + subject + ' as #{exp}';\n      failNegateMsg = 'expected #{this} to not have the same ' + subject + ' as #{exp}';\n    }\n\n    var cmp = flag(this, 'deep') ? _.eql : undefined;\n\n    this.assert(\n        isSubsetOf(subset, obj, cmp, contains, ordered)\n      , failMsg\n      , failNegateMsg\n      , subset\n      , obj\n      , true\n    );\n  });\n\n  /**\n   * ### .oneOf(list[, msg])\n   *\n   * Asserts that the target is a member of the given array `list`. However,\n   * it's often best to assert that the target is equal to its expected value.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.be.oneOf([1, 2, 3]); // Not recommended\n   *\n   * Comparisons are performed using strict (`===`) equality.\n   *\n   * Add `.not` earlier in the chain to negate `.oneOf`.\n   *\n   *     expect(1).to.equal(1); // Recommended\n   *     expect(1).to.not.be.oneOf([2, 3, 4]); // Not recommended\n   *\n   * `.oneOf` accepts an optional `msg` argument which is a custom error message\n   * to show when the assertion fails. The message can also be given as the\n   * second argument to `expect`.\n   *\n   *     expect(1).to.be.oneOf([2, 3, 4], 'nooo why fail??');\n   *     expect(1, 'nooo why fail??').to.be.oneOf([2, 3, 4]);\n   *\n   * @name oneOf\n   * @param {Array<*>} list\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function oneOf (list, msg) {\n    if (msg) flag(this, 'message', msg);\n    var expected = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(list, flagMsg, ssfi, true).to.be.an('array');\n\n    this.assert(\n        list.indexOf(expected) > -1\n      , 'expected #{this} to be one of #{exp}'\n      , 'expected #{this} to not be one of #{exp}'\n      , list\n      , expected\n    );\n  }\n\n  Assertion.addMethod('oneOf', oneOf);\n\n\n  /**\n   * ### .change(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.change` asserts that the given function\n   * `subject` returns a different value when it's invoked before the target\n   * function compared to when it's invoked afterward. However, it's often best\n   * to assert that `subject` is equal to its expected value.\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     // Recommended\n   *     expect(getDots()).to.equal('');\n   *     addDot();\n   *     expect(getDots()).to.equal('.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(getDots);\n   *\n   * When two arguments are provided, `.change` asserts that the value of the\n   * given object `subject`'s `prop` property is different before invoking the\n   * target function compared to afterward.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     // Recommended\n   *     expect(myObj).to.have.property('dots', '');\n   *     addDot();\n   *     expect(myObj).to.have.property('dots', '.');\n   *\n   *     // Not recommended\n   *     expect(addDot).to.change(myObj, 'dots');\n   *\n   * Strict (`===`) equality is used to compare before and after values.\n   *\n   * Add `.not` earlier in the chain to negate `.change`.\n   *\n   *     var dots = ''\n   *       , noop = function () {}\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(noop).to.not.change(getDots);\n   *\n   *     var myObj = {dots: ''}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'dots');\n   *\n   * `.change` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {dots: ''}\n   *       , addDot = function () { myObj.dots += '.'; };\n   *\n   *     expect(addDot).to.not.change(myObj, 'dots', 'nooo why fail??');\n   *\n   *     var dots = ''\n   *       , addDot = function () { dots += '.'; }\n   *       , getDots = function () { return dots; };\n   *\n   *     expect(addDot, 'nooo why fail??').to.not.change(getDots);\n   *\n   * `.change` also causes all `.by` assertions that follow in the chain to\n   * assert how much a numeric subject was increased or decreased by. However,\n   * it's dangerous to use `.change.by`. The problem is that it creates\n   * uncertain expectations by asserting that the subject either increases by\n   * the given delta, or that it decreases by the given delta. It's often best\n   * to identify the exact output that's expected, and then write an assertion\n   * that only accepts that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * The alias `.changes` can be used interchangeably with `.change`.\n   *\n   * @name change\n   * @alias changes\n   * @param {String} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertChanges (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    // This gets flagged because of the .by(delta) assertion\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'change');\n    flag(this, 'realDelta', final !== initial);\n\n    this.assert(\n      initial !== final\n      , 'expected ' + msgObj + ' to change'\n      , 'expected ' + msgObj + ' to not change'\n    );\n  }\n\n  Assertion.addMethod('change', assertChanges);\n  Assertion.addMethod('changes', assertChanges);\n\n  /**\n   * ### .increase(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.increase` asserts that the given function\n   * `subject` returns a greater number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.increase` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * greater of a number is returned. It's often best to assert that the return\n   * value increased by the expected amount, rather than asserting it increased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , addTwo = function () { val += 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(addTwo).to.increase(getVal).by(2); // Recommended\n   *     expect(addTwo).to.increase(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.increase` asserts that the value of the\n   * given object `subject`'s `prop` property is greater after invoking the\n   * target function compared to beforehand.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.increase`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either decreases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to decrease, it's often best to assert that it\n   * decreased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.not.increase(myObj, 'val'); // Not recommended\n   * \n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.increase(myObj, 'val'); // Not recommended\n   *\n   * `.increase` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.increase(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.increase(getVal);\n   *\n   * The alias `.increases` can be used interchangeably with `.increase`.\n   *\n   * @name increase\n   * @alias increases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertIncreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'increase');\n    flag(this, 'realDelta', final - initial);\n\n    this.assert(\n      final - initial > 0\n      , 'expected ' + msgObj + ' to increase'\n      , 'expected ' + msgObj + ' to not increase'\n    );\n  }\n\n  Assertion.addMethod('increase', assertIncreases);\n  Assertion.addMethod('increases', assertIncreases);\n\n  /**\n   * ### .decrease(subject[, prop[, msg]])\n   *\n   * When one argument is provided, `.decrease` asserts that the given function\n   * `subject` returns a lesser number when it's invoked after invoking the\n   * target function compared to when it's invoked beforehand. `.decrease` also\n   * causes all `.by` assertions that follow in the chain to assert how much\n   * lesser of a number is returned. It's often best to assert that the return\n   * value decreased by the expected amount, rather than asserting it decreased\n   * by any amount.\n   *\n   *     var val = 1\n   *       , subtractTwo = function () { val -= 2; }\n   *       , getVal = function () { return val; };\n   *\n   *     expect(subtractTwo).to.decrease(getVal).by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(getVal); // Not recommended\n   *\n   * When two arguments are provided, `.decrease` asserts that the value of the\n   * given object `subject`'s `prop` property is lesser after invoking the\n   * target function compared to beforehand. \n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.decrease(myObj, 'val'); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.decrease`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either increases, or that it stays the same.\n   * It's often best to identify the exact output that's expected, and then\n   * write an assertion that only accepts that exact output.\n   *\n   * When the subject is expected to increase, it's often best to assert that it\n   * increased by the expected amount.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.not.decrease(myObj, 'val'); // Not recommended\n   * \n   * When the subject is expected to stay the same, it's often best to assert\n   * exactly that.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.not.change(myObj, 'val'); // Recommended\n   *     expect(noop).to.not.decrease(myObj, 'val'); // Not recommended\n   *\n   * `.decrease` accepts an optional `msg` argument which is a custom error\n   * message to show when the assertion fails. The message can also be given as\n   * the second argument to `expect`. When not providing two arguments, always\n   * use the second form.\n   *\n   *     var myObj = {val: 1}\n   *       , noop = function () {};\n   *\n   *     expect(noop).to.decrease(myObj, 'val', 'nooo why fail??');\n   *\n   *     var val = 1\n   *       , noop = function () {}\n   *       , getVal = function () { return val; };\n   *\n   *     expect(noop, 'nooo why fail??').to.decrease(getVal);\n   *\n   * The alias `.decreases` can be used interchangeably with `.decrease`.\n   *\n   * @name decrease\n   * @alias decreases\n   * @param {String|Function} subject\n   * @param {String} prop name _optional_\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDecreases (subject, prop, msg) {\n    if (msg) flag(this, 'message', msg);\n    var fn = flag(this, 'object')\n      , flagMsg = flag(this, 'message')\n      , ssfi = flag(this, 'ssfi');\n    new Assertion(fn, flagMsg, ssfi, true).is.a('function');\n\n    var initial;\n    if (!prop) {\n      new Assertion(subject, flagMsg, ssfi, true).is.a('function');\n      initial = subject();\n    } else {\n      new Assertion(subject, flagMsg, ssfi, true).to.have.property(prop);\n      initial = subject[prop];\n    }\n\n    // Make sure that the target is a number\n    new Assertion(initial, flagMsg, ssfi, true).is.a('number');\n\n    fn();\n\n    var final = prop === undefined || prop === null ? subject() : subject[prop];\n    var msgObj = prop === undefined || prop === null ? initial : '.' + prop;\n\n    flag(this, 'deltaMsgObj', msgObj);\n    flag(this, 'initialDeltaValue', initial);\n    flag(this, 'finalDeltaValue', final);\n    flag(this, 'deltaBehavior', 'decrease');\n    flag(this, 'realDelta', initial - final);\n\n    this.assert(\n      final - initial < 0\n      , 'expected ' + msgObj + ' to decrease'\n      , 'expected ' + msgObj + ' to not decrease'\n    );\n  }\n\n  Assertion.addMethod('decrease', assertDecreases);\n  Assertion.addMethod('decreases', assertDecreases);\n\n  /**\n   * ### .by(delta[, msg])\n   *\n   * When following an `.increase` assertion in the chain, `.by` asserts that\n   * the subject of the `.increase` assertion increased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   * When following a `.decrease` assertion in the chain, `.by` asserts that the\n   * subject of the `.decrease` assertion decreased by the given `delta`.\n   *\n   *     var myObj = {val: 1}\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2);\n   *\n   * When following a `.change` assertion in the chain, `.by` asserts that the\n   * subject of the `.change` assertion either increased or decreased by the\n   * given `delta`. However, it's dangerous to use `.change.by`. The problem is\n   * that it creates uncertain expectations. It's often best to identify the\n   * exact output that's expected, and then write an assertion that only accepts\n   * that exact output.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; }\n   *       , subtractTwo = function () { myObj.val -= 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(2); // Recommended\n   *     expect(addTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   *     expect(subtractTwo).to.decrease(myObj, 'val').by(2); // Recommended\n   *     expect(subtractTwo).to.change(myObj, 'val').by(2); // Not recommended\n   *\n   * Add `.not` earlier in the chain to negate `.by`. However, it's often best\n   * to assert that the subject changed by its expected delta, rather than\n   * asserting that it didn't change by one of countless unexpected deltas.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     // Recommended\n   *     expect(addTwo).to.increase(myObj, 'val').by(2);\n   *\n   *     // Not recommended\n   *     expect(addTwo).to.increase(myObj, 'val').but.not.by(3);\n   *\n   * `.by` accepts an optional `msg` argument which is a custom error message to\n   * show when the assertion fails. The message can also be given as the second\n   * argument to `expect`.\n   *\n   *     var myObj = {val: 1}\n   *       , addTwo = function () { myObj.val += 2; };\n   *\n   *     expect(addTwo).to.increase(myObj, 'val').by(3, 'nooo why fail??');\n   *     expect(addTwo, 'nooo why fail??').to.increase(myObj, 'val').by(3);\n   *\n   * @name by\n   * @param {Number} delta\n   * @param {String} msg _optional_\n   * @namespace BDD\n   * @api public\n   */\n\n  function assertDelta(delta, msg) {\n    if (msg) flag(this, 'message', msg);\n\n    var msgObj = flag(this, 'deltaMsgObj');\n    var initial = flag(this, 'initialDeltaValue');\n    var final = flag(this, 'finalDeltaValue');\n    var behavior = flag(this, 'deltaBehavior');\n    var realDelta = flag(this, 'realDelta');\n\n    var expression;\n    if (behavior === 'change') {\n      expression = Math.abs(final - initial) === Math.abs(delta);\n    } else {\n      expression = realDelta === Math.abs(delta);\n    }\n\n    this.assert(\n      expression\n      , 'expected ' + msgObj + ' to ' + behavior + ' by ' + delta\n      , 'expected ' + msgObj + ' to not ' + behavior + ' by ' + delta\n    );\n  }\n\n  Assertion.addMethod('by', assertDelta);\n\n  /**\n   * ### .extensible\n   *\n   * Asserts that the target is extensible, which means that new properties can\n   * be added to it. Primitives are never extensible.\n   *\n   *     expect({a: 1}).to.be.extensible;\n   *\n   * Add `.not` earlier in the chain to negate `.extensible`.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({})\n   *       , sealedObject = Object.seal({})\n   *       , frozenObject = Object.freeze({});\n   *\n   *     expect(nonExtensibleObject).to.not.be.extensible;\n   *     expect(sealedObject).to.not.be.extensible;\n   *     expect(frozenObject).to.not.be.extensible;\n   *     expect(1).to.not.be.extensible;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect(1, 'nooo why fail??').to.be.extensible;\n   *\n   * @name extensible\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('extensible', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a non-extensible ordinary object, simply return false.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isExtensible = obj === Object(obj) && Object.isExtensible(obj);\n\n    this.assert(\n      isExtensible\n      , 'expected #{this} to be extensible'\n      , 'expected #{this} to not be extensible'\n    );\n  });\n\n  /**\n   * ### .sealed\n   *\n   * Asserts that the target is sealed, which means that new properties can't be\n   * added to it, and its existing properties can't be reconfigured or deleted.\n   * However, it's possible that its existing properties can still be reassigned\n   * to different values. Primitives are always sealed.\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(sealedObject).to.be.sealed;\n   *     expect(frozenObject).to.be.sealed;\n   *     expect(1).to.be.sealed;\n   *\n   * Add `.not` earlier in the chain to negate `.sealed`.\n   *\n   *     expect({a: 1}).to.not.be.sealed;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.sealed;\n   *\n   * @name sealed\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('sealed', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a sealed ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isSealed = obj === Object(obj) ? Object.isSealed(obj) : true;\n\n    this.assert(\n      isSealed\n      , 'expected #{this} to be sealed'\n      , 'expected #{this} to not be sealed'\n    );\n  });\n\n  /**\n   * ### .frozen\n   *\n   * Asserts that the target is frozen, which means that new properties can't be\n   * added to it, and its existing properties can't be reassigned to different\n   * values, reconfigured, or deleted. Primitives are always frozen.\n   *\n   *     var frozenObject = Object.freeze({});\n   *\n   *     expect(frozenObject).to.be.frozen;\n   *     expect(1).to.be.frozen;\n   *\n   * Add `.not` earlier in the chain to negate `.frozen`.\n   *\n   *     expect({a: 1}).to.not.be.frozen;\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect({a: 1}, 'nooo why fail??').to.be.frozen;\n   *\n   * @name frozen\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('frozen', function() {\n    var obj = flag(this, 'object');\n\n    // In ES5, if the argument to this method is a primitive, then it will cause a TypeError.\n    // In ES6, a non-object argument will be treated as if it was a frozen ordinary object, simply return true.\n    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen\n    // The following provides ES6 behavior for ES5 environments.\n\n    var isFrozen = obj === Object(obj) ? Object.isFrozen(obj) : true;\n\n    this.assert(\n      isFrozen\n      , 'expected #{this} to be frozen'\n      , 'expected #{this} to not be frozen'\n    );\n  });\n\n  /**\n   * ### .finite\n   *\n   * Asserts that the target is a number, and isn't `NaN` or positive/negative\n   * `Infinity`.\n   *\n   *     expect(1).to.be.finite;\n   *\n   * Add `.not` earlier in the chain to negate `.finite`. However, it's\n   * dangerous to do so. The problem is that it creates uncertain expectations\n   * by asserting that the subject either isn't a number, or that it's `NaN`, or\n   * that it's positive `Infinity`, or that it's negative `Infinity`. It's often\n   * best to identify the exact output that's expected, and then write an\n   * assertion that only accepts that exact output.\n   *\n   * When the target isn't expected to be a number, it's often best to assert\n   * that it's the expected type, rather than asserting that it isn't one of\n   * many unexpected types.\n   *\n   *     expect('foo').to.be.a('string'); // Recommended\n   *     expect('foo').to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be `NaN`, it's often best to assert exactly\n   * that.\n   *\n   *     expect(NaN).to.be.NaN; // Recommended\n   *     expect(NaN).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be positive infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(Infinity).to.equal(Infinity); // Recommended\n   *     expect(Infinity).to.not.be.finite; // Not recommended\n   *\n   * When the target is expected to be negative infinity, it's often best to\n   * assert exactly that.\n   *\n   *     expect(-Infinity).to.equal(-Infinity); // Recommended\n   *     expect(-Infinity).to.not.be.finite; // Not recommended\n   *\n   * A custom error message can be given as the second argument to `expect`.\n   *\n   *     expect('foo', 'nooo why fail??').to.be.finite;\n   *\n   * @name finite\n   * @namespace BDD\n   * @api public\n   */\n\n  Assertion.addProperty('finite', function(msg) {\n    var obj = flag(this, 'object');\n\n    this.assert(\n        typeof obj === \"number\" && isFinite(obj)\n      , 'expected #{this} to be a finite number'\n      , 'expected #{this} to not be a finite number'\n    );\n  });\n};\n",
    "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n\nmodule.exports = function (chai, util) {\n\n  /*!\n   * Chai dependencies.\n   */\n\n  var Assertion = chai.Assertion\n    , flag = util.flag;\n\n  /*!\n   * Module export.\n   */\n\n  /**\n   * ### assert(expression, message)\n   *\n   * Write your own test expressions.\n   *\n   *     assert('foo' !== 'bar', 'foo is not bar');\n   *     assert(Array.isArray([]), 'empty arrays are arrays');\n   *\n   * @param {Mixed} expression to test for truthiness\n   * @param {String} message to display on error\n   * @name assert\n   * @namespace Assert\n   * @api public\n   */\n\n  var assert = chai.assert = function (express, errmsg) {\n    var test = new Assertion(null, null, chai.assert, true);\n    test.assert(\n        express\n      , errmsg\n      , '[ negation message unavailable ]'\n    );\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure. Node.js `assert` module-compatible.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.fail = function (actual, expected, message, operator) {\n    message = message || 'assert.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, assert.fail);\n  };\n\n  /**\n   * ### .isOk(object, [message])\n   *\n   * Asserts that `object` is truthy.\n   *\n   *     assert.isOk('everything', 'everything is ok');\n   *     assert.isOk(false, 'this will fail');\n   *\n   * @name isOk\n   * @alias ok\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isOk = function (val, msg) {\n    new Assertion(val, msg, assert.isOk, true).is.ok;\n  };\n\n  /**\n   * ### .isNotOk(object, [message])\n   *\n   * Asserts that `object` is falsy.\n   *\n   *     assert.isNotOk('everything', 'this will fail');\n   *     assert.isNotOk(false, 'this will pass');\n   *\n   * @name isNotOk\n   * @alias notOk\n   * @param {Mixed} object to test\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotOk = function (val, msg) {\n    new Assertion(val, msg, assert.isNotOk, true).is.not.ok;\n  };\n\n  /**\n   * ### .equal(actual, expected, [message])\n   *\n   * Asserts non-strict equality (`==`) of `actual` and `expected`.\n   *\n   *     assert.equal(3, '3', '== coerces values to strings');\n   *\n   * @name equal\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.equal = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.equal, true);\n\n    test.assert(\n        exp == flag(test, 'object')\n      , 'expected #{this} to equal #{exp}'\n      , 'expected #{this} to not equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .notEqual(actual, expected, [message])\n   *\n   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n   *\n   *     assert.notEqual(3, 4, 'these numbers are not equal');\n   *\n   * @name notEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notEqual = function (act, exp, msg) {\n    var test = new Assertion(act, msg, assert.notEqual, true);\n\n    test.assert(\n        exp != flag(test, 'object')\n      , 'expected #{this} to not equal #{exp}'\n      , 'expected #{this} to equal #{act}'\n      , exp\n      , act\n      , true\n    );\n  };\n\n  /**\n   * ### .strictEqual(actual, expected, [message])\n   *\n   * Asserts strict equality (`===`) of `actual` and `expected`.\n   *\n   *     assert.strictEqual(true, true, 'these booleans are strictly equal');\n   *\n   * @name strictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.strictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.strictEqual, true).to.equal(exp);\n  };\n\n  /**\n   * ### .notStrictEqual(actual, expected, [message])\n   *\n   * Asserts strict inequality (`!==`) of `actual` and `expected`.\n   *\n   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');\n   *\n   * @name notStrictEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notStrictEqual, true).to.not.equal(exp);\n  };\n\n  /**\n   * ### .deepEqual(actual, expected, [message])\n   *\n   * Asserts that `actual` is deeply equal to `expected`.\n   *\n   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });\n   *\n   * @name deepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @alias deepStrictEqual\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepEqual = assert.deepStrictEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.deepEqual, true).to.eql(exp);\n  };\n\n  /**\n   * ### .notDeepEqual(actual, expected, [message])\n   *\n   * Assert that `actual` is not deeply equal to `expected`.\n   *\n   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });\n   *\n   * @name notDeepEqual\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepEqual = function (act, exp, msg) {\n    new Assertion(act, msg, assert.notDeepEqual, true).to.not.eql(exp);\n  };\n\n   /**\n   * ### .isAbove(valueToCheck, valueToBeAbove, [message])\n   *\n   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`.\n   *\n   *     assert.isAbove(5, 2, '5 is strictly greater than 2');\n   *\n   * @name isAbove\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAbove\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAbove = function (val, abv, msg) {\n    new Assertion(val, msg, assert.isAbove, true).to.be.above(abv);\n  };\n\n   /**\n   * ### .isAtLeast(valueToCheck, valueToBeAtLeast, [message])\n   *\n   * Asserts `valueToCheck` is greater than or equal to (>=) `valueToBeAtLeast`.\n   *\n   *     assert.isAtLeast(5, 2, '5 is greater or equal to 2');\n   *     assert.isAtLeast(3, 3, '3 is greater or equal to 3');\n   *\n   * @name isAtLeast\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtLeast\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtLeast = function (val, atlst, msg) {\n    new Assertion(val, msg, assert.isAtLeast, true).to.be.least(atlst);\n  };\n\n   /**\n   * ### .isBelow(valueToCheck, valueToBeBelow, [message])\n   *\n   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`.\n   *\n   *     assert.isBelow(3, 6, '3 is strictly less than 6');\n   *\n   * @name isBelow\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeBelow\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBelow = function (val, blw, msg) {\n    new Assertion(val, msg, assert.isBelow, true).to.be.below(blw);\n  };\n\n   /**\n   * ### .isAtMost(valueToCheck, valueToBeAtMost, [message])\n   *\n   * Asserts `valueToCheck` is less than or equal to (<=) `valueToBeAtMost`.\n   *\n   *     assert.isAtMost(3, 6, '3 is less than or equal to 6');\n   *     assert.isAtMost(4, 4, '4 is less than or equal to 4');\n   *\n   * @name isAtMost\n   * @param {Mixed} valueToCheck\n   * @param {Mixed} valueToBeAtMost\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isAtMost = function (val, atmst, msg) {\n    new Assertion(val, msg, assert.isAtMost, true).to.be.most(atmst);\n  };\n\n  /**\n   * ### .isTrue(value, [message])\n   *\n   * Asserts that `value` is true.\n   *\n   *     var teaServed = true;\n   *     assert.isTrue(teaServed, 'the tea has been served');\n   *\n   * @name isTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isTrue, true).is['true'];\n  };\n\n  /**\n   * ### .isNotTrue(value, [message])\n   *\n   * Asserts that `value` is not true.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotTrue(tea, 'great, time for tea!');\n   *\n   * @name isNotTrue\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotTrue = function (val, msg) {\n    new Assertion(val, msg, assert.isNotTrue, true).to.not.equal(true);\n  };\n\n  /**\n   * ### .isFalse(value, [message])\n   *\n   * Asserts that `value` is false.\n   *\n   *     var teaServed = false;\n   *     assert.isFalse(teaServed, 'no tea yet? hmm...');\n   *\n   * @name isFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isFalse, true).is['false'];\n  };\n\n  /**\n   * ### .isNotFalse(value, [message])\n   *\n   * Asserts that `value` is not false.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotFalse(tea, 'great, time for tea!');\n   *\n   * @name isNotFalse\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFalse = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFalse, true).to.not.equal(false);\n  };\n\n  /**\n   * ### .isNull(value, [message])\n   *\n   * Asserts that `value` is null.\n   *\n   *     assert.isNull(err, 'there was no error');\n   *\n   * @name isNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNull, true).to.equal(null);\n  };\n\n  /**\n   * ### .isNotNull(value, [message])\n   *\n   * Asserts that `value` is not null.\n   *\n   *     var tea = 'tasty chai';\n   *     assert.isNotNull(tea, 'great, time for tea!');\n   *\n   * @name isNotNull\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNull = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNull, true).to.not.equal(null);\n  };\n\n  /**\n   * ### .isNaN\n   *\n   * Asserts that value is NaN.\n   *\n   *     assert.isNaN(NaN, 'NaN is NaN');\n   *\n   * @name isNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNaN, true).to.be.NaN;\n  };\n\n  /**\n   * ### .isNotNaN\n   *\n   * Asserts that value is not NaN.\n   *\n   *     assert.isNotNaN(4, '4 is not NaN');\n   *\n   * @name isNotNaN\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n  assert.isNotNaN = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNaN, true).not.to.be.NaN;\n  };\n\n  /**\n   * ### .exists\n   *\n   * Asserts that the target is neither `null` nor `undefined`.\n   *\n   *     var foo = 'hi';\n   *\n   *     assert.exists(foo, 'foo is neither `null` nor `undefined`');\n   *\n   * @name exists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.exists = function (val, msg) {\n    new Assertion(val, msg, assert.exists, true).to.exist;\n  };\n\n  /**\n   * ### .notExists\n   *\n   * Asserts that the target is either `null` or `undefined`.\n   *\n   *     var bar = null\n   *       , baz;\n   *\n   *     assert.notExists(bar);\n   *     assert.notExists(baz, 'baz is either null or undefined');\n   *\n   * @name notExists\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notExists = function (val, msg) {\n    new Assertion(val, msg, assert.notExists, true).to.not.exist;\n  };\n\n  /**\n   * ### .isUndefined(value, [message])\n   *\n   * Asserts that `value` is `undefined`.\n   *\n   *     var tea;\n   *     assert.isUndefined(tea, 'no tea defined');\n   *\n   * @name isUndefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isUndefined = function (val, msg) {\n    new Assertion(val, msg, assert.isUndefined, true).to.equal(undefined);\n  };\n\n  /**\n   * ### .isDefined(value, [message])\n   *\n   * Asserts that `value` is not `undefined`.\n   *\n   *     var tea = 'cup of chai';\n   *     assert.isDefined(tea, 'tea has been defined');\n   *\n   * @name isDefined\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isDefined = function (val, msg) {\n    new Assertion(val, msg, assert.isDefined, true).to.not.equal(undefined);\n  };\n\n  /**\n   * ### .isFunction(value, [message])\n   *\n   * Asserts that `value` is a function.\n   *\n   *     function serveTea() { return 'cup of tea'; };\n   *     assert.isFunction(serveTea, 'great, we can have tea now');\n   *\n   * @name isFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isFunction, true).to.be.a('function');\n  };\n\n  /**\n   * ### .isNotFunction(value, [message])\n   *\n   * Asserts that `value` is _not_ a function.\n   *\n   *     var serveTea = [ 'heat', 'pour', 'sip' ];\n   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');\n   *\n   * @name isNotFunction\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFunction = function (val, msg) {\n    new Assertion(val, msg, assert.isNotFunction, true).to.not.be.a('function');\n  };\n\n  /**\n   * ### .isObject(value, [message])\n   *\n   * Asserts that `value` is an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   * _The assertion does not match subclassed objects._\n   *\n   *     var selection = { name: 'Chai', serve: 'with spices' };\n   *     assert.isObject(selection, 'tea selection is an object');\n   *\n   * @name isObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isObject = function (val, msg) {\n    new Assertion(val, msg, assert.isObject, true).to.be.a('object');\n  };\n\n  /**\n   * ### .isNotObject(value, [message])\n   *\n   * Asserts that `value` is _not_ an object of type 'Object' (as revealed by `Object.prototype.toString`).\n   *\n   *     var selection = 'chai'\n   *     assert.isNotObject(selection, 'tea selection is not an object');\n   *     assert.isNotObject(null, 'null is not an object');\n   *\n   * @name isNotObject\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotObject = function (val, msg) {\n    new Assertion(val, msg, assert.isNotObject, true).to.not.be.a('object');\n  };\n\n  /**\n   * ### .isArray(value, [message])\n   *\n   * Asserts that `value` is an array.\n   *\n   *     var menu = [ 'green', 'chai', 'oolong' ];\n   *     assert.isArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isArray = function (val, msg) {\n    new Assertion(val, msg, assert.isArray, true).to.be.an('array');\n  };\n\n  /**\n   * ### .isNotArray(value, [message])\n   *\n   * Asserts that `value` is _not_ an array.\n   *\n   *     var menu = 'green|chai|oolong';\n   *     assert.isNotArray(menu, 'what kind of tea do we want?');\n   *\n   * @name isNotArray\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotArray = function (val, msg) {\n    new Assertion(val, msg, assert.isNotArray, true).to.not.be.an('array');\n  };\n\n  /**\n   * ### .isString(value, [message])\n   *\n   * Asserts that `value` is a string.\n   *\n   *     var teaOrder = 'chai';\n   *     assert.isString(teaOrder, 'order placed');\n   *\n   * @name isString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isString = function (val, msg) {\n    new Assertion(val, msg, assert.isString, true).to.be.a('string');\n  };\n\n  /**\n   * ### .isNotString(value, [message])\n   *\n   * Asserts that `value` is _not_ a string.\n   *\n   *     var teaOrder = 4;\n   *     assert.isNotString(teaOrder, 'order placed');\n   *\n   * @name isNotString\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotString = function (val, msg) {\n    new Assertion(val, msg, assert.isNotString, true).to.not.be.a('string');\n  };\n\n  /**\n   * ### .isNumber(value, [message])\n   *\n   * Asserts that `value` is a number.\n   *\n   *     var cups = 2;\n   *     assert.isNumber(cups, 'how many cups');\n   *\n   * @name isNumber\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNumber, true).to.be.a('number');\n  };\n\n  /**\n   * ### .isNotNumber(value, [message])\n   *\n   * Asserts that `value` is _not_ a number.\n   *\n   *     var cups = '2 cups please';\n   *     assert.isNotNumber(cups, 'how many cups');\n   *\n   * @name isNotNumber\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotNumber = function (val, msg) {\n    new Assertion(val, msg, assert.isNotNumber, true).to.not.be.a('number');\n  };\n\n   /**\n   * ### .isFinite(value, [message])\n   *\n   * Asserts that `value` is a finite number. Unlike `.isNumber`, this will fail for `NaN` and `Infinity`.\n   *\n   *     var cups = 2;\n   *     assert.isFinite(cups, 'how many cups');\n   *\n   *     assert.isFinite(NaN); // throws\n   *\n   * @name isFinite\n   * @param {Number} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFinite = function (val, msg) {\n    new Assertion(val, msg, assert.isFinite, true).to.be.finite;\n  };\n\n  /**\n   * ### .isBoolean(value, [message])\n   *\n   * Asserts that `value` is a boolean.\n   *\n   *     var teaReady = true\n   *       , teaServed = false;\n   *\n   *     assert.isBoolean(teaReady, 'is the tea ready');\n   *     assert.isBoolean(teaServed, 'has tea been served');\n   *\n   * @name isBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isBoolean, true).to.be.a('boolean');\n  };\n\n  /**\n   * ### .isNotBoolean(value, [message])\n   *\n   * Asserts that `value` is _not_ a boolean.\n   *\n   *     var teaReady = 'yep'\n   *       , teaServed = 'nope';\n   *\n   *     assert.isNotBoolean(teaReady, 'is the tea ready');\n   *     assert.isNotBoolean(teaServed, 'has tea been served');\n   *\n   * @name isNotBoolean\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotBoolean = function (val, msg) {\n    new Assertion(val, msg, assert.isNotBoolean, true).to.not.be.a('boolean');\n  };\n\n  /**\n   * ### .typeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');\n   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');\n   *     assert.typeOf('tea', 'string', 'we have a string');\n   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');\n   *     assert.typeOf(null, 'null', 'we have a null');\n   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');\n   *\n   * @name typeOf\n   * @param {Mixed} value\n   * @param {String} name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.typeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.typeOf, true).to.be.a(type);\n  };\n\n  /**\n   * ### .notTypeOf(value, name, [message])\n   *\n   * Asserts that `value`'s type is _not_ `name`, as determined by\n   * `Object.prototype.toString`.\n   *\n   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');\n   *\n   * @name notTypeOf\n   * @param {Mixed} value\n   * @param {String} typeof name\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notTypeOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notTypeOf, true).to.not.be.a(type);\n  };\n\n  /**\n   * ### .instanceOf(object, constructor, [message])\n   *\n   * Asserts that `value` is an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new Tea('chai');\n   *\n   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');\n   *\n   * @name instanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.instanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.instanceOf, true).to.be.instanceOf(type);\n  };\n\n  /**\n   * ### .notInstanceOf(object, constructor, [message])\n   *\n   * Asserts `value` is not an instance of `constructor`.\n   *\n   *     var Tea = function (name) { this.name = name; }\n   *       , chai = new String('chai');\n   *\n   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');\n   *\n   * @name notInstanceOf\n   * @param {Object} object\n   * @param {Constructor} constructor\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInstanceOf = function (val, type, msg) {\n    new Assertion(val, msg, assert.notInstanceOf, true)\n      .to.not.be.instanceOf(type);\n  };\n\n  /**\n   * ### .include(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.include([1,2,3], 2, 'array contains value');\n   *     assert.include('foobar', 'foo', 'string contains substring');\n   *     assert.include({ foo: 'bar', hello: 'universe' }, { foo: 'bar' }, 'object contains property');\n   *\n   * Strict equality (===) is used. When asserting the inclusion of a value in\n   * an array, the array is searched for an element that's strictly equal to the\n   * given value. When asserting a subset of properties in an object, the object\n   * is searched for the given property keys, checking that each one is present\n   * and stricty equal to the given property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.include([obj1, obj2], obj1);\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1});\n   *     assert.include({foo: obj1, bar: obj2}, {foo: obj1, bar: obj2});\n   *\n   * @name include\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.include = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.include, true).include(inc);\n  };\n\n  /**\n   * ### .notInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array, a substring in a string, or a subset of\n   * properties in an object.\n   *\n   *     assert.notInclude([1,2,3], 4, 'array doesn't contain value');\n   *     assert.notInclude('foobar', 'baz', 'string doesn't contain substring');\n   *     assert.notInclude({ foo: 'bar', hello: 'universe' }, { foo: 'baz' }, 'object doesn't contain property');\n   *\n   * Strict equality (===) is used. When asserting the absence of a value in an\n   * array, the array is searched to confirm the absence of an element that's\n   * strictly equal to the given value. When asserting a subset of properties in\n   * an object, the object is searched to confirm that at least one of the given\n   * property keys is either not present or not strictly equal to the given\n   * property value. For instance:\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notInclude([obj1, obj2], {a: 1});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.notInclude({foo: obj1, bar: obj2}, {foo: obj1, bar: {b: 2}});\n   *\n   * @name notInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notInclude, true).not.include(inc);\n  };\n\n  /**\n   * ### .deepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` includes `needle`. Can be used to assert the\n   * inclusion of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.deepInclude([obj1, obj2], {a: 1});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}});\n   *     assert.deepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 2}});\n   *\n   * @name deepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepInclude, true).deep.include(inc);\n  };\n\n  /**\n   * ### .notDeepInclude(haystack, needle, [message])\n   *\n   * Asserts that `haystack` does not include `needle`. Can be used to assert\n   * the absence of a value in an array or a subset of properties in an object.\n   * Deep equality is used.\n   *\n   *     var obj1 = {a: 1}\n   *       , obj2 = {b: 2};\n   *     assert.notDeepInclude([obj1, obj2], {a: 9});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 9}});\n   *     assert.notDeepInclude({foo: obj1, bar: obj2}, {foo: {a: 1}, bar: {b: 9}});\n   *\n   * @name notDeepInclude\n   * @param {Array|String} haystack\n   * @param {Mixed} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepInclude, true).not.deep.include(inc);\n  };\n\n  /**\n   * ### .nestedInclude(haystack, needle, [message])\n   * \n   * Asserts that 'haystack' includes 'needle'. \n   * Can be used to assert the inclusion of a subset of properties in an \n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested \n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   * \n   *     assert.nestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.[b]': 'x'});\n   *     assert.nestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'x'});\n   * \n   * @name nestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public \n   */ \n\n  assert.nestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.nestedInclude, true).nested.include(inc);\n  };\n\n  /**\n   * ### .notNestedInclude(haystack, needle, [message])\n   * \n   * Asserts that 'haystack' does not include 'needle'. \n   * Can be used to assert the absence of a subset of properties in an \n   * object.\n   * Enables the use of dot- and bracket-notation for referencing nested \n   * properties. \n   * '[]' and '.' in property names can be escaped using double backslashes.\n   * \n   *     assert.notNestedInclude({'.a': {'b': 'x'}}, {'\\\\.a.b': 'y'});\n   *     assert.notNestedInclude({'a': {'[b]': 'x'}}, {'a.\\\\[b\\\\]': 'y'});\n   * \n   * @name notNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public \n   */ \n\n  assert.notNestedInclude = function (exp, inc, msg) {\n    new Assertion(exp, msg, assert.notNestedInclude, true)\n      .not.nested.include(inc);\n  };\n\n  /**\n   * ### .deepNestedInclude(haystack, needle, [message])\n   * \n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an \n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested \n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   * \n   *     assert.deepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {x: 1}});\n   *     assert.deepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {x: 1}});\n   *    \n   * @name deepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public \n   */\n\n  assert.deepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepNestedInclude, true)\n      .deep.nested.include(inc);\n  };\n\n  /**\n   * ### .notDeepNestedInclude(haystack, needle, [message])\n   * \n   * Asserts that 'haystack' does not include 'needle'.\n   * Can be used to assert the absence of a subset of properties in an \n   * object while checking for deep equality.\n   * Enables the use of dot- and bracket-notation for referencing nested \n   * properties.\n   * '[]' and '.' in property names can be escaped using double backslashes.\n   * \n   *     assert.notDeepNestedInclude({a: {b: [{x: 1}]}}, {'a.b[0]': {y: 1}})\n   *     assert.notDeepNestedInclude({'.a': {'[b]': {x: 1}}}, {'\\\\.a.\\\\[b\\\\]': {y: 2}});\n   *    \n   * @name notDeepNestedInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public \n   */\n\n  assert.notDeepNestedInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepNestedInclude, true)\n      .not.deep.nested.include(inc);\n  };\n\n  /**\n   * ### .ownInclude(haystack, needle, [message])\n   * \n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an \n   * object while ignoring inherited properties.\n   * \n   *     assert.ownInclude({ a: 1 }, { a: 1 });\n   * \n   * @name ownInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ownInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.ownInclude, true).own.include(inc);\n  };\n\n  /**\n   * ### .notOwnInclude(haystack, needle, [message])\n   * \n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an \n   * object while ignoring inherited properties.\n   * \n   *     Object.prototype.b = 2;\n   * \n   *     assert.notOwnInclude({ a: 1 }, { b: 2 });\n   * \n   * @name notOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notOwnInclude, true).not.own.include(inc);\n  };\n\n  /**\n   * ### .deepOwnInclude(haystack, needle, [message])\n   * \n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the inclusion of a subset of properties in an \n   * object while ignoring inherited properties and checking for deep equality.\n   * \n   *      assert.deepOwnInclude({a: {b: 2}}, {a: {b: 2}});\n   *      \n   * @name deepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.deepOwnInclude, true)\n      .deep.own.include(inc);\n  };\n\n   /**\n   * ### .notDeepOwnInclude(haystack, needle, [message])\n   * \n   * Asserts that 'haystack' includes 'needle'.\n   * Can be used to assert the absence of a subset of properties in an \n   * object while ignoring inherited properties and checking for deep equality.\n   * \n   *      assert.notDeepOwnInclude({a: {b: 2}}, {a: {c: 3}});\n   *      \n   * @name notDeepOwnInclude\n   * @param {Object} haystack\n   * @param {Object} needle\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepOwnInclude = function(exp, inc, msg) {\n    new Assertion(exp, msg, assert.notDeepOwnInclude, true)\n      .not.deep.own.include(inc);\n  };\n\n  /**\n   * ### .match(value, regexp, [message])\n   *\n   * Asserts that `value` matches the regular expression `regexp`.\n   *\n   *     assert.match('foobar', /^foo/, 'regexp matches');\n   *\n   * @name match\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.match = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.match, true).to.match(re);\n  };\n\n  /**\n   * ### .notMatch(value, regexp, [message])\n   *\n   * Asserts that `value` does not match the regular expression `regexp`.\n   *\n   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');\n   *\n   * @name notMatch\n   * @param {Mixed} value\n   * @param {RegExp} regexp\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notMatch = function (exp, re, msg) {\n    new Assertion(exp, msg, assert.notMatch, true).to.not.match(re);\n  };\n\n  /**\n   * ### .property(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`.\n   *\n   *     assert.property({ tea: { green: 'matcha' }}, 'tea');\n   *     assert.property({ tea: { green: 'matcha' }}, 'toString');\n   *\n   * @name property\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.property = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.property, true).to.have.property(prop);\n  };\n\n  /**\n   * ### .notProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property`.\n   *\n   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *\n   * @name notProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notProperty, true)\n      .to.not.have.property(prop);\n  };\n\n  /**\n   * ### .propertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');\n   *\n   * @name propertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.propertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.propertyVal, true)\n      .to.have.property(prop, val);\n  };\n\n  /**\n   * ### .notPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a strict equality check\n   * (===).\n   *\n   *     assert.notPropertyVal({ tea: 'is good' }, 'tea', 'is bad');\n   *     assert.notPropertyVal({ tea: 'is good' }, 'coffee', 'is good');\n   *\n   * @name notPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notPropertyVal, true)\n      .to.not.have.property(prop, val);\n  };\n\n  /**\n   * ### .deepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property` with a value given by `value`. Uses a deep equality check.\n   *\n   *     assert.deepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepPropertyVal, true)\n      .to.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct or inherited property named\n   * by `property` with value given by `value`. Uses a deep equality check.\n   *\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *\n   * @name notDeepPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepPropertyVal, true)\n      .to.not.have.deep.property(prop, val);\n  };\n\n  /**\n   * ### .ownProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct property named by `property`. Inherited\n   * properties aren't checked.\n   *\n   *     assert.ownProperty({ tea: { green: 'matcha' }}, 'tea');\n   *\n   * @name ownProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.ownProperty, true)\n      .to.have.own.property(prop);\n  };\n\n  /**\n   * ### .notOwnProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by\n   * `property`. Inherited properties aren't checked.\n   *\n   *     assert.notOwnProperty({ tea: { green: 'matcha' }}, 'coffee');\n   *     assert.notOwnProperty({}, 'toString');\n   *\n   * @name notOwnProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notOwnProperty, true)\n      .to.not.have.own.property(prop);\n  };\n\n  /**\n   * ### .ownPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a strict equality check (===).\n   * Inherited properties aren't checked.\n   *\n   *     assert.ownPropertyVal({ coffee: 'is good'}, 'coffee', 'is good');\n   *\n   * @name ownPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.ownPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.ownPropertyVal, true)\n      .to.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .notOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a strict equality check\n   * (===). Inherited properties aren't checked.\n   *\n   *     assert.notOwnPropertyVal({ tea: 'is better'}, 'tea', 'is worse');\n   *     assert.notOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notOwnPropertyVal, true)\n      .to.not.have.own.property(prop, value);\n  };\n\n  /**\n   * ### .deepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a direct property named by `property` and a value\n   * equal to the provided `value`. Uses a deep equality check. Inherited\n   * properties aren't checked.\n   *\n   *     assert.deepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'matcha' });\n   *\n   * @name deepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.deepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.deepOwnPropertyVal, true)\n      .to.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .notDeepOwnPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a direct property named by `property`\n   * with a value equal to the provided `value`. Uses a deep equality check.\n   * Inherited properties aren't checked.\n   *\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { black: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'tea', { green: 'oolong' });\n   *     assert.notDeepOwnPropertyVal({ tea: { green: 'matcha' } }, 'coffee', { green: 'matcha' });\n   *     assert.notDeepOwnPropertyVal({}, 'toString', Object.prototype.toString);\n   *\n   * @name notDeepOwnPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @api public\n   */\n\n  assert.notDeepOwnPropertyVal = function (obj, prop, value, msg) {\n    new Assertion(obj, msg, assert.notDeepOwnPropertyVal, true)\n      .to.not.have.deep.own.property(prop, value);\n  };\n\n  /**\n   * ### .nestedProperty(object, property, [message])\n   *\n   * Asserts that `object` has a direct or inherited property named by\n   * `property`, which can be a string using dot- and bracket-notation for\n   * nested reference.\n   *\n   *     assert.nestedProperty({ tea: { green: 'matcha' }}, 'tea.green');\n   *\n   * @name nestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.nestedProperty, true)\n      .to.have.nested.property(prop);\n  };\n\n  /**\n   * ### .notNestedProperty(object, property, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property`, which\n   * can be a string using dot- and bracket-notation for nested reference. The\n   * property cannot exist on the object nor anywhere in its prototype chain.\n   *\n   *     assert.notNestedProperty({ tea: { green: 'matcha' }}, 'tea.oolong');\n   *\n   * @name notNestedProperty\n   * @param {Object} object\n   * @param {String} property\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedProperty = function (obj, prop, msg) {\n    new Assertion(obj, msg, assert.notNestedProperty, true)\n      .to.not.have.nested.property(prop);\n  };\n\n  /**\n   * ### .nestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a strict equality check (===).\n   *\n   *     assert.nestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');\n   *\n   * @name nestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.nestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.nestedPropertyVal, true)\n      .to.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a strict equality check (===).\n   *\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');\n   *     assert.notNestedPropertyVal({ tea: { green: 'matcha' }}, 'coffee.green', 'matcha');\n   *\n   * @name notNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notNestedPropertyVal, true)\n      .to.not.have.nested.property(prop, val);\n  };\n\n  /**\n   * ### .deepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` has a property named by `property` with a value given\n   * by `value`. `property` can use dot- and bracket-notation for nested\n   * reference. Uses a deep equality check.\n   *\n   *     assert.deepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yum' });\n   *\n   * @name deepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.deepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.deepNestedPropertyVal, true)\n      .to.have.deep.nested.property(prop, val);\n  };\n\n  /**\n   * ### .notDeepNestedPropertyVal(object, property, value, [message])\n   *\n   * Asserts that `object` does _not_ have a property named by `property` with\n   * value given by `value`. `property` can use dot- and bracket-notation for\n   * nested reference. Uses a deep equality check.\n   *\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { oolong: 'yum' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.green', { matcha: 'yuck' });\n   *     assert.notDeepNestedPropertyVal({ tea: { green: { matcha: 'yum' } } }, 'tea.black', { matcha: 'yum' });\n   *\n   * @name notDeepNestedPropertyVal\n   * @param {Object} object\n   * @param {String} property\n   * @param {Mixed} value\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notDeepNestedPropertyVal = function (obj, prop, val, msg) {\n    new Assertion(obj, msg, assert.notDeepNestedPropertyVal, true)\n      .to.not.have.deep.nested.property(prop, val);\n  }\n\n  /**\n   * ### .lengthOf(object, length, [message])\n   *\n   * Asserts that `object` has a `length` property with the expected value.\n   *\n   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');\n   *     assert.lengthOf('foobar', 6, 'string has length of 6');\n   *\n   * @name lengthOf\n   * @param {Mixed} object\n   * @param {Number} length\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.lengthOf = function (exp, len, msg) {\n    new Assertion(exp, msg, assert.lengthOf, true).to.have.lengthOf(len);\n  };\n\n  /**\n   * ### .hasAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyKey({foo: 1, bar: 2, baz: 3}, ['foo', 'iDontExist', 'baz']);\n   *     assert.hasAnyKey({foo: 1, bar: 2, baz: 3}, {foo: 30, iDontExist: 99, baz: 1337]);\n   *     assert.hasAnyKey(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'thisKeyDoesNotExist']);\n   *     assert.hasAnyKey(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'thisKeyDoesNotExist']);\n   *\n   * @name hasAnyKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyKeys, true).to.have.any.keys(keys);\n  }\n\n  /**\n   * ### .hasAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.hasAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337]);\n   *     assert.hasAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.hasAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name hasAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllKeys, true).to.have.all.keys(keys);\n  }\n\n  /**\n   * ### .containsAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all of the `keys` provided but may have more keys not listed.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, ['foo', 'bar', 'baz']);\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, baz: 1337});\n   *     assert.containsAllKeys({foo: 1, bar: 2, baz: 3}, {foo: 30, bar: 99, baz: 1337});\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}]);\n   *     assert.containsAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{foo: 1}, 'key']);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}]);\n   *     assert.containsAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{foo: 'bar'}, 'anotherKey']);\n   *\n   * @name containsAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllKeys, true)\n      .to.contain.all.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAnyKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAnyKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAnyKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAnyKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAnyKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyKeys, true)\n      .to.not.have.any.keys(keys);\n  }\n\n  /**\n   * ### .doesNotHaveAllKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, ['one', 'two', 'example']);\n   *     assert.doesNotHaveAllKeys({foo: 1, bar: 2, baz: 3}, {one: 1, two: 2, example: 'foo'});\n   *     assert.doesNotHaveAllKeys(new Map([[{foo: 1}, 'bar'], ['key', 'value']]), [{one: 'two'}, 'example']);\n   *     assert.doesNotHaveAllKeys(new Set([{foo: 'bar'}, 'anotherKey'], [{one: 'two'}, 'example']);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {String[]} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllKeys, true)\n      .to.not.have.all.keys(keys);\n  }\n\n  /**\n   * ### .hasAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {three: 'three'}]);\n   *     assert.hasAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name doesNotHaveAllKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAnyDeepKeys, true)\n      .to.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .hasAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has all and only all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne']]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}]), {one: 'one'});\n   *     assert.hasAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name hasAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.hasAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.hasAllDeepKeys, true)\n      .to.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .containsAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` contains all of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{one: 'one'}, {two: 'two'}]);\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {one: 'one'});\n   *     assert.containsAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {two: 'two'}]);\n   *\n   * @name containsAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.containsAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.containsAllDeepKeys, true)\n      .to.contain.all.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAnyDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` has none of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAnyDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAnyDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{twenty: 'twenty'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAnyDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAnyDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAnyDeepKeys, true)\n      .to.not.have.any.deep.keys(keys);\n  }\n\n /**\n   * ### .doesNotHaveAllDeepKeys(object, [keys], [message])\n   *\n   * Asserts that `object` does not have at least one of the `keys` provided.\n   * Since Sets and Maps can have objects as keys you can use this assertion to perform\n   * a deep comparison.\n   * You can also provide a single object instead of a `keys` array and its keys\n   * will be used as the expected set of keys.\n   *\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [1, 2]]), {thisDoesNot: 'exist'});\n   *     assert.doesNotHaveAllDeepKeys(new Map([[{one: 'one'}, 'valueOne'], [{two: 'two'}, 'valueTwo']]), [{twenty: 'twenty'}, {one: 'one'}]);\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), {twenty: 'twenty'});\n   *     assert.doesNotHaveAllDeepKeys(new Set([{one: 'one'}, {two: 'two'}]), [{one: 'one'}, {fifty: 'fifty'}]);\n   *\n   * @name doesNotHaveAllDeepKeys\n   * @param {Mixed} object\n   * @param {Array|Object} keys\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotHaveAllDeepKeys = function (obj, keys, msg) {\n    new Assertion(obj, msg, assert.doesNotHaveAllDeepKeys, true)\n      .to.not.have.all.deep.keys(keys);\n  }\n\n /**\n   * ### .throws(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.throws(fn, 'function throws a reference error');\n   *     assert.throws(fn, /function throws a reference error/);\n   *     assert.throws(fn, ReferenceError);\n   *     assert.throws(fn, errorInstance);\n   *     assert.throws(fn, ReferenceError, 'Error thrown must be a ReferenceError and have this msg');\n   *     assert.throws(fn, errorInstance, 'Error thrown must be the same errorInstance and have this msg');\n   *     assert.throws(fn, ReferenceError, /Error thrown must be a ReferenceError and match this/);\n   *     assert.throws(fn, errorInstance, /Error thrown must be the same errorInstance and match this/);\n   *\n   * @name throws\n   * @alias throw\n   * @alias Throw\n   * @param {Function} fn\n   * @param {ErrorConstructor|Error} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.throws = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    var assertErr = new Assertion(fn, msg, assert.throws, true)\n      .to.throw(errorLike, errMsgMatcher);\n    return flag(assertErr, 'object');\n  };\n\n  /**\n   * ### .doesNotThrow(fn, [errorLike/string/regexp], [string/regexp], [message])\n   *\n   * If `errorLike` is an `Error` constructor, asserts that `fn` will _not_ throw an error that is an\n   * instance of `errorLike`.\n   * If `errorLike` is an `Error` instance, asserts that the error thrown is _not_ the same\n   * instance as `errorLike`.\n   * If `errMsgMatcher` is provided, it also asserts that the error thrown will _not_ have a\n   * message matching `errMsgMatcher`.\n   *\n   *     assert.doesNotThrow(fn, 'Any Error thrown must not have this message');\n   *     assert.doesNotThrow(fn, /Any Error thrown must not match this/);\n   *     assert.doesNotThrow(fn, Error);\n   *     assert.doesNotThrow(fn, errorInstance);\n   *     assert.doesNotThrow(fn, Error, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, errorInstance, 'Error must not have this message');\n   *     assert.doesNotThrow(fn, Error, /Error must not match this/);\n   *     assert.doesNotThrow(fn, errorInstance, /Error must not match this/);\n   *\n   * @name doesNotThrow\n   * @param {Function} fn\n   * @param {ErrorConstructor} errorLike\n   * @param {RegExp|String} errMsgMatcher\n   * @param {String} message\n   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotThrow = function (fn, errorLike, errMsgMatcher, msg) {\n    if ('string' === typeof errorLike || errorLike instanceof RegExp) {\n      errMsgMatcher = errorLike;\n      errorLike = null;\n    }\n\n    new Assertion(fn, msg, assert.doesNotThrow, true)\n      .to.not.throw(errorLike, errMsgMatcher);\n  };\n\n  /**\n   * ### .operator(val1, operator, val2, [message])\n   *\n   * Compares two values using `operator`.\n   *\n   *     assert.operator(1, '<', 2, 'everything is ok');\n   *     assert.operator(1, '>', 2, 'this will fail');\n   *\n   * @name operator\n   * @param {Mixed} val1\n   * @param {String} operator\n   * @param {Mixed} val2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.operator = function (val, operator, val2, msg) {\n    var ok;\n    switch(operator) {\n      case '==':\n        ok = val == val2;\n        break;\n      case '===':\n        ok = val === val2;\n        break;\n      case '>':\n        ok = val > val2;\n        break;\n      case '>=':\n        ok = val >= val2;\n        break;\n      case '<':\n        ok = val < val2;\n        break;\n      case '<=':\n        ok = val <= val2;\n        break;\n      case '!=':\n        ok = val != val2;\n        break;\n      case '!==':\n        ok = val !== val2;\n        break;\n      default:\n        msg = msg ? msg + ': ' : msg;\n        throw new chai.AssertionError(\n          msg + 'Invalid operator \"' + operator + '\"',\n          undefined,\n          assert.operator\n        );\n    }\n    var test = new Assertion(ok, msg, assert.operator, true);\n    test.assert(\n        true === flag(test, 'object')\n      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)\n      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );\n  };\n\n  /**\n   * ### .closeTo(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name closeTo\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.closeTo = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.closeTo, true).to.be.closeTo(exp, delta);\n  };\n\n  /**\n   * ### .approximately(actual, expected, delta, [message])\n   *\n   * Asserts that the target is equal `expected`, to within a +/- `delta` range.\n   *\n   *     assert.approximately(1.5, 1, 0.5, 'numbers are close');\n   *\n   * @name approximately\n   * @param {Number} actual\n   * @param {Number} expected\n   * @param {Number} delta\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.approximately = function (act, exp, delta, msg) {\n    new Assertion(act, msg, assert.approximately, true)\n      .to.be.approximately(exp, delta);\n  };\n\n  /**\n   * ### .sameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * strict equality check (===).\n   *\n   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');\n   *\n   * @name sameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameMembers, true)\n      .to.have.same.members(set2);\n  }\n\n  /**\n   * ### .notSameMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.notSameMembers([ 1, 2, 3 ], [ 5, 1, 3 ], 'not same members');\n   *\n   * @name notSameMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameMembers, true)\n      .to.not.have.same.members(set2);\n  }\n\n  /**\n   * ### .sameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in any order. Uses a\n   * deep equality check.\n   *\n   *     assert.sameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { c: 3 }], 'same deep members');\n   *\n   * @name sameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepMembers, true)\n      .to.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in any order.\n   * Uses a deep equality check.\n   *\n   *     assert.notSameDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [{ b: 2 }, { a: 1 }, { f: 5 }], 'not same deep members');\n   *\n   * @name notSameDeepMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepMembers, true)\n      .to.not.have.same.deep.members(set2);\n  }\n\n  /**\n   * ### .sameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a strict equality check (===).\n   *\n   *     assert.sameOrderedMembers([ 1, 2, 3 ], [ 1, 2, 3 ], 'same ordered members');\n   *\n   * @name sameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameOrderedMembers, true)\n      .to.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a strict equality check (===).\n   *\n   *     assert.notSameOrderedMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'not same ordered members');\n   *\n   * @name notSameOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameOrderedMembers, true)\n      .to.not.have.same.ordered.members(set2);\n  }\n\n  /**\n   * ### .sameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` have the same members in the same order.\n   * Uses a deep equality check.\n   *\n   * assert.sameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { c: 3 } ], 'same deep ordered members');\n   *\n   * @name sameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.sameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.sameDeepOrderedMembers, true)\n      .to.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .notSameDeepOrderedMembers(set1, set2, [message])\n   *\n   * Asserts that `set1` and `set2` don't have the same members in the same\n   * order. Uses a deep equality check.\n   *\n   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 }, { z: 5 } ], 'not same deep ordered members');\n   * assert.notSameDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { c: 3 } ], 'not same deep ordered members');\n   *\n   * @name notSameDeepOrderedMembers\n   * @param {Array} set1\n   * @param {Array} set2\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notSameDeepOrderedMembers = function (set1, set2, msg) {\n    new Assertion(set1, msg, assert.notSameDeepOrderedMembers, true)\n      .to.not.have.same.deep.ordered.members(set2);\n  }\n\n  /**\n   * ### .includeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1, 2 ], 'include members');\n   *\n   * @name includeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeMembers, true)\n      .to.include.members(subset);\n  }\n\n  /**\n   * ### .notIncludeMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * strict equality check (===). Duplicates are ignored.\n   *\n   *     assert.notIncludeMembers([ 1, 2, 3 ], [ 5, 1 ], 'not include members');\n   *\n   * @name notIncludeMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeMembers, true)\n      .to.not.include.members(subset);\n  }\n\n  /**\n   * ### .includeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in any order. Uses a deep\n   * equality check. Duplicates are ignored.\n   *\n   *     assert.includeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 }, { b: 2 } ], 'include deep members');\n   *\n   * @name includeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepMembers, true)\n      .to.include.deep.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in any order. Uses a\n   * deep equality check. Duplicates are ignored.\n   *\n   *     assert.notIncludeDeepMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { f: 5 } ], 'not include deep members');\n   *\n   * @name notIncludeDeepMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepMembers, true)\n      .to.not.include.deep.members(subset);\n  }\n\n  /**\n   * ### .includeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.includeOrderedMembers([ 1, 2, 3 ], [ 1, 2 ], 'include ordered members');\n   *\n   * @name includeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeOrderedMembers, true)\n      .to.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a strict equality\n   * check (===).\n   *\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 1 ], 'not include ordered members');\n   *     assert.notIncludeOrderedMembers([ 1, 2, 3 ], [ 2, 3 ], 'not include ordered members');\n   *\n   * @name notIncludeOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeOrderedMembers, true)\n      .to.not.include.ordered.members(subset);\n  }\n\n  /**\n   * ### .includeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` is included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.includeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { b: 2 } ], 'include deep ordered members');\n   *\n   * @name includeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.includeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.includeDeepOrderedMembers, true)\n      .to.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .notIncludeDeepOrderedMembers(superset, subset, [message])\n   *\n   * Asserts that `subset` isn't included in `superset` in the same order\n   * beginning with the first element in `superset`. Uses a deep equality\n   * check.\n   *\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { a: 1 }, { f: 5 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { a: 1 } ], 'not include deep ordered members');\n   *     assert.notIncludeDeepOrderedMembers([ { a: 1 }, { b: 2 }, { c: 3 } ], [ { b: 2 }, { c: 3 } ], 'not include deep ordered members');\n   *\n   * @name notIncludeDeepOrderedMembers\n   * @param {Array} superset\n   * @param {Array} subset\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.notIncludeDeepOrderedMembers = function (superset, subset, msg) {\n    new Assertion(superset, msg, assert.notIncludeDeepOrderedMembers, true)\n      .to.not.include.deep.ordered.members(subset);\n  }\n\n  /**\n   * ### .oneOf(inList, list, [message])\n   *\n   * Asserts that non-object, non-array value `inList` appears in the flat array `list`.\n   *\n   *     assert.oneOf(1, [ 2, 1 ], 'Not found in list');\n   *\n   * @name oneOf\n   * @param {*} inList\n   * @param {Array<*>} list\n   * @param {String} message\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.oneOf = function (inList, list, msg) {\n    new Assertion(inList, msg, assert.oneOf, true).to.be.oneOf(list);\n  }\n\n  /**\n   * ### .changes(function, object, property, [message])\n   *\n   * Asserts that a function changes the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 22 };\n   *     assert.changes(fn, obj, 'val');\n   *\n   * @name changes\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changes = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changes, true).to.change(obj, prop);\n  }\n\n   /**\n   * ### .changesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function changes the value of a property by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 2 };\n   *     assert.changesBy(fn, obj, 'val', 2);\n   *\n   * @name changesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesBy, true)\n      .to.change(obj, prop).by(delta);\n  }\n\n   /**\n   * ### .doesNotChange(function, object, property, [message])\n   *\n   * Asserts that a function does not change the value of a property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { console.log('foo'); };\n   *     assert.doesNotChange(fn, obj, 'val');\n   *\n   * @name doesNotChange\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotChange = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotChange, true)\n      .to.not.change(obj, prop);\n  }\n\n  /**\n   * ### .changesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not change the value of a property or of a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.changesButNotBy(fn, obj, 'val', 5);\n   *\n   * @name changesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.changesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.changesButNotBy, true)\n      .to.change(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .increases(function, object, property, [message])\n   *\n   * Asserts that a function increases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 13 };\n   *     assert.increases(fn, obj, 'val');\n   *\n   * @name increases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.increases, true)\n      .to.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function increases a numeric object property or a function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val += 10 };\n   *     assert.increasesBy(fn, obj, 'val', 10);\n   *\n   * @name increasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesBy, true)\n      .to.increase(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotIncrease(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 8 };\n   *     assert.doesNotIncrease(fn, obj, 'val');\n   *\n   * @name doesNotIncrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotIncrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotIncrease, true)\n      .to.not.increase(obj, prop);\n  }\n\n  /**\n   * ### .increasesButNotBy(function, object, property, [message])\n   *\n   * Asserts that a function does not increase a numeric object property or function's return value by an amount (delta).\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.increasesButNotBy(fn, obj, 'val', 10);\n   *\n   * @name increasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.increasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.increasesButNotBy, true)\n      .to.increase(obj, prop).but.not.by(delta);\n  }\n\n  /**\n   * ### .decreases(function, object, property, [message])\n   *\n   * Asserts that a function decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreases(fn, obj, 'val');\n   *\n   * @name decreases\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreases = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.decreases, true)\n      .to.decrease(obj, prop);\n  }\n\n  /**\n   * ### .decreasesBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val -= 5 };\n   *     assert.decreasesBy(fn, obj, 'val', 5);\n   *\n   * @name decreasesBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesBy, true)\n      .to.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .doesNotDecrease(function, object, property, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property.\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 15 };\n   *     assert.doesNotDecrease(fn, obj, 'val');\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecrease = function (fn, obj, prop, msg) {\n    if (arguments.length === 3 && typeof obj === 'function') {\n      msg = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecrease, true)\n      .to.not.decrease(obj, prop);\n  }\n\n  /**\n   * ### .doesNotDecreaseBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.doesNotDecreaseBy(fn, obj, 'val', 1);\n   *\n   * @name doesNotDecrease\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.doesNotDecreaseBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    return new Assertion(fn, msg, assert.doesNotDecreaseBy, true)\n      .to.not.decrease(obj, prop).by(delta);\n  }\n\n  /**\n   * ### .decreasesButNotBy(function, object, property, delta, [message])\n   *\n   * Asserts that a function does not decreases a numeric object property or a function's return value by an amount (delta)\n   *\n   *     var obj = { val: 10 };\n   *     var fn = function() { obj.val = 5 };\n   *     assert.decreasesButNotBy(fn, obj, 'val', 1);\n   *\n   * @name decreasesButNotBy\n   * @param {Function} modifier function\n   * @param {Object} object or getter function\n   * @param {String} property name _optional_\n   * @param {Number} change amount (delta)\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.decreasesButNotBy = function (fn, obj, prop, delta, msg) {\n    if (arguments.length === 4 && typeof obj === 'function') {\n      var tmpMsg = delta;\n      delta = prop;\n      msg = tmpMsg;\n    } else if (arguments.length === 3) {\n      delta = prop;\n      prop = null;\n    }\n\n    new Assertion(fn, msg, assert.decreasesButNotBy, true)\n      .to.decrease(obj, prop).but.not.by(delta);\n  }\n\n  /*!\n   * ### .ifError(object)\n   *\n   * Asserts if value is not a false value, and throws if it is a true value.\n   * This is added to allow for chai to be a drop-in replacement for Node's\n   * assert class.\n   *\n   *     var err = new Error('I am a custom error');\n   *     assert.ifError(err); // Rethrows err!\n   *\n   * @name ifError\n   * @param {Object} object\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.ifError = function (val) {\n    if (val) {\n      throw(val);\n    }\n  };\n\n  /**\n   * ### .isExtensible(object)\n   *\n   * Asserts that `object` is extensible (can have new properties added to it).\n   *\n   *     assert.isExtensible({});\n   *\n   * @name isExtensible\n   * @alias extensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isExtensible, true).to.be.extensible;\n  };\n\n  /**\n   * ### .isNotExtensible(object)\n   *\n   * Asserts that `object` is _not_ extensible.\n   *\n   *     var nonExtensibleObject = Object.preventExtensions({});\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.freeze({});\n   *\n   *     assert.isNotExtensible(nonExtensibleObject);\n   *     assert.isNotExtensible(sealedObject);\n   *     assert.isNotExtensible(frozenObject);\n   *\n   * @name isNotExtensible\n   * @alias notExtensible\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotExtensible = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotExtensible, true).to.not.be.extensible;\n  };\n\n  /**\n   * ### .isSealed(object)\n   *\n   * Asserts that `object` is sealed (cannot have new properties added to it\n   * and its existing properties cannot be removed).\n   *\n   *     var sealedObject = Object.seal({});\n   *     var frozenObject = Object.seal({});\n   *\n   *     assert.isSealed(sealedObject);\n   *     assert.isSealed(frozenObject);\n   *\n   * @name isSealed\n   * @alias sealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isSealed, true).to.be.sealed;\n  };\n\n  /**\n   * ### .isNotSealed(object)\n   *\n   * Asserts that `object` is _not_ sealed.\n   *\n   *     assert.isNotSealed({});\n   *\n   * @name isNotSealed\n   * @alias notSealed\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotSealed = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotSealed, true).to.not.be.sealed;\n  };\n\n  /**\n   * ### .isFrozen(object)\n   *\n   * Asserts that `object` is frozen (cannot have new properties added to it\n   * and its existing properties cannot be modified).\n   *\n   *     var frozenObject = Object.freeze({});\n   *     assert.frozen(frozenObject);\n   *\n   * @name isFrozen\n   * @alias frozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isFrozen, true).to.be.frozen;\n  };\n\n  /**\n   * ### .isNotFrozen(object)\n   *\n   * Asserts that `object` is _not_ frozen.\n   *\n   *     assert.isNotFrozen({});\n   *\n   * @name isNotFrozen\n   * @alias notFrozen\n   * @param {Object} object\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotFrozen = function (obj, msg) {\n    new Assertion(obj, msg, assert.isNotFrozen, true).to.not.be.frozen;\n  };\n\n  /**\n   * ### .isEmpty(target)\n   *\n   * Asserts that the target does not contain any values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isEmpty([]);\n   *     assert.isEmpty('');\n   *     assert.isEmpty(new Map);\n   *     assert.isEmpty({});\n   *\n   * @name isEmpty\n   * @alias empty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isEmpty, true).to.be.empty;\n  };\n\n  /**\n   * ### .isNotEmpty(target)\n   *\n   * Asserts that the target contains values.\n   * For arrays and strings, it checks the `length` property.\n   * For `Map` and `Set` instances, it checks the `size` property.\n   * For non-function objects, it gets the count of own\n   * enumerable string keys.\n   *\n   *     assert.isNotEmpty([1, 2]);\n   *     assert.isNotEmpty('34');\n   *     assert.isNotEmpty(new Set([5, 6]));\n   *     assert.isNotEmpty({ key: 7 });\n   *\n   * @name isNotEmpty\n   * @alias notEmpty\n   * @param {Object|Array|String|Map|Set} target\n   * @param {String} message _optional_\n   * @namespace Assert\n   * @api public\n   */\n\n  assert.isNotEmpty = function(val, msg) {\n    new Assertion(val, msg, assert.isNotEmpty, true).to.not.be.empty;\n  };\n\n  /*!\n   * Aliases.\n   */\n\n  (function alias(name, as){\n    assert[as] = assert[name];\n    return alias;\n  })\n  ('isOk', 'ok')\n  ('isNotOk', 'notOk')\n  ('throws', 'throw')\n  ('throws', 'Throw')\n  ('isExtensible', 'extensible')\n  ('isNotExtensible', 'notExtensible')\n  ('isSealed', 'sealed')\n  ('isNotSealed', 'notSealed')\n  ('isFrozen', 'frozen')\n  ('isNotFrozen', 'notFrozen')\n  ('isEmpty', 'empty')\n  ('isNotEmpty', 'notEmpty');\n};\n",
    "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  chai.expect = function (val, message) {\n    return new chai.Assertion(val, message);\n  };\n\n  /**\n   * ### .fail(actual, expected, [message], [operator])\n   *\n   * Throw a failure.\n   *\n   * @name fail\n   * @param {Mixed} actual\n   * @param {Mixed} expected\n   * @param {String} message\n   * @param {String} operator\n   * @namespace BDD\n   * @api public\n   */\n\n  chai.expect.fail = function (actual, expected, message, operator) {\n    message = message || 'expect.fail()';\n    throw new chai.AssertionError(message, {\n        actual: actual\n      , expected: expected\n      , operator: operator\n    }, chai.expect.fail);\n  };\n};\n",
    "/*!\n * chai\n * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nmodule.exports = function (chai, util) {\n  var Assertion = chai.Assertion;\n\n  function loadShould () {\n    // explicitly define this method as function as to have it's name to include as `ssfi`\n    function shouldGetter() {\n      if (this instanceof String\n          || this instanceof Number\n          || this instanceof Boolean\n          || typeof Symbol === 'function' && this instanceof Symbol) {\n        return new Assertion(this.valueOf(), null, shouldGetter);\n      }\n      return new Assertion(this, null, shouldGetter);\n    }\n    function shouldSetter(value) {\n      // See https://github.com/chaijs/chai/issues/86: this makes\n      // `whatever.should = someValue` actually set `someValue`, which is\n      // especially useful for `global.should = require('chai').should()`.\n      //\n      // Note that we have to use [[DefineProperty]] instead of [[Put]]\n      // since otherwise we would trigger this very setter!\n      Object.defineProperty(this, 'should', {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    }\n    // modify Object.prototype to have `should`\n    Object.defineProperty(Object.prototype, 'should', {\n      set: shouldSetter\n      , get: shouldGetter\n      , configurable: true\n    });\n\n    var should = {};\n\n    /**\n     * ### .fail(actual, expected, [message], [operator])\n     *\n     * Throw a failure.\n     *\n     * @name fail\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @param {String} operator\n     * @namespace BDD\n     * @api public\n     */\n\n    should.fail = function (actual, expected, message, operator) {\n      message = message || 'should.fail()';\n      throw new chai.AssertionError(message, {\n          actual: actual\n        , expected: expected\n        , operator: operator\n      }, should.fail);\n    };\n\n    /**\n     * ### .equal(actual, expected, [message])\n     *\n     * Asserts non-strict equality (`==`) of `actual` and `expected`.\n     *\n     *     should.equal(3, '3', '== coerces values to strings');\n     *\n     * @name equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/string/regexp], [string/regexp], [message])\n     *\n     * Asserts that `function` will throw an error that is an instance of\n     * `constructor`, or alternately that it will throw an error with message\n     * matching `regexp`.\n     *\n     *     should.throw(fn, 'function throws a reference error');\n     *     should.throw(fn, /function throws a reference error/);\n     *     should.throw(fn, ReferenceError);\n     *     should.throw(fn, ReferenceError, 'function throws a reference error');\n     *     should.throw(fn, ReferenceError, /function throws a reference error/);\n     *\n     * @name throw\n     * @alias Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.Throw(errt, errs);\n    };\n\n    /**\n     * ### .exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var foo = 'hi';\n     *\n     *     should.exist(foo, 'foo exists');\n     *\n     * @name exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.exist = function (val, msg) {\n      new Assertion(val, msg).to.exist;\n    }\n\n    // negation\n    should.not = {}\n\n    /**\n     * ### .not.equal(actual, expected, [message])\n     *\n     * Asserts non-strict inequality (`!=`) of `actual` and `expected`.\n     *\n     *     should.not.equal(3, 4, 'these numbers are not equal');\n     *\n     * @name not.equal\n     * @param {Mixed} actual\n     * @param {Mixed} expected\n     * @param {String} message\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.equal = function (val1, val2, msg) {\n      new Assertion(val1, msg).to.not.equal(val2);\n    };\n\n    /**\n     * ### .throw(function, [constructor/regexp], [message])\n     *\n     * Asserts that `function` will _not_ throw an error that is an instance of\n     * `constructor`, or alternately that it will not throw an error with message\n     * matching `regexp`.\n     *\n     *     should.not.throw(fn, Error, 'function does not throw');\n     *\n     * @name not.throw\n     * @alias not.Throw\n     * @param {Function} function\n     * @param {ErrorConstructor} constructor\n     * @param {RegExp} regexp\n     * @param {String} message\n     * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.Throw = function (fn, errt, errs, msg) {\n      new Assertion(fn, msg).to.not.Throw(errt, errs);\n    };\n\n    /**\n     * ### .not.exist\n     *\n     * Asserts that the target is neither `null` nor `undefined`.\n     *\n     *     var bar = null;\n     *\n     *     should.not.exist(bar, 'bar does not exist');\n     *\n     * @name not.exist\n     * @namespace Should\n     * @api public\n     */\n\n    should.not.exist = function (val, msg) {\n      new Assertion(val, msg).to.not.exist;\n    }\n\n    should['throw'] = should['Throw'];\n    should.not['throw'] = should.not['Throw'];\n\n    return should;\n  };\n\n  chai.should = loadShould;\n  chai.Should = loadShould;\n};\n",
    "/*!\n * Chai - addChainingMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/*!\n * Module variables\n */\n\n// Check whether `Object.setPrototypeOf` is supported\nvar canSetPrototype = typeof Object.setPrototypeOf === 'function';\n\n// Without `Object.setPrototypeOf` support, this module will need to add properties to a function.\n// However, some of functions' own props are not configurable and should be skipped.\nvar testFn = function() {};\nvar excludeNames = Object.getOwnPropertyNames(testFn).filter(function(name) {\n  var propDesc = Object.getOwnPropertyDescriptor(testFn, name);\n\n  // Note: PhantomJS 1.x includes `callee` as one of `testFn`'s own properties,\n  // but then returns `undefined` as the property descriptor for `callee`. As a\n  // workaround, we perform an otherwise unnecessary type-check for `propDesc`,\n  // and then filter it out if it's not an object as it should be.\n  if (typeof propDesc !== 'object')\n    return true;\n\n  return !propDesc.configurable;\n});\n\n// Cache `Function` properties\nvar call  = Function.prototype.call,\n    apply = Function.prototype.apply;\n\n/**\n * ### .addChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Adds a method to an object, such that the method can also be chained.\n *\n *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);\n *\n * The result can then be used as both a method assertion, executing both `method` and\n * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.\n *\n *     expect(fooStr).to.be.foo('bar');\n *     expect(fooStr).to.be.foo.equal('foo');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for `name`, when called\n * @param {Function} chainingBehavior function to be called every time the property is accessed\n * @namespace Utils\n * @name addChainableMethod\n * @api public\n */\n\nmodule.exports = function addChainableMethod(ctx, name, method, chainingBehavior) {\n  if (typeof chainingBehavior !== 'function') {\n    chainingBehavior = function () { };\n  }\n\n  var chainableBehavior = {\n      method: method\n    , chainingBehavior: chainingBehavior\n  };\n\n  // save the methods so we can overwrite them later, if we need to.\n  if (!ctx.__methods) {\n    ctx.__methods = {};\n  }\n  ctx.__methods[name] = chainableBehavior;\n\n  Object.defineProperty(ctx, name,\n    { get: function chainableMethodGetter() {\n        chainableBehavior.chainingBehavior.call(this);\n\n        var chainableMethodWrapper = function () {\n          // Setting the `ssfi` flag to `chainableMethodWrapper` causes this\n          // function to be the starting point for removing implementation\n          // frames from the stack trace of a failed assertion.\n          //\n          // However, we only want to use this function as the starting point if\n          // the `lockSsfi` flag isn't set.\n          //\n          // If the `lockSsfi` flag is set, then this assertion is being\n          // invoked from inside of another assertion. In this case, the `ssfi`\n          // flag has already been set by the outer assertion.\n          //\n          // Note that overwriting a chainable method merely replaces the saved\n          // methods in `ctx.__methods` instead of completely replacing the\n          // overwritten assertion. Therefore, an overwriting assertion won't\n          // set the `ssfi` or `lockSsfi` flags.\n          if (!flag(this, 'lockSsfi')) {\n            flag(this, 'ssfi', chainableMethodWrapper);\n          }\n\n          var result = chainableBehavior.method.apply(this, arguments);\n          if (result !== undefined) {\n            return result;\n          }\n\n          var newAssertion = new chai.Assertion();\n          transferFlags(this, newAssertion);\n          return newAssertion;\n        };\n\n        addLengthGuard(chainableMethodWrapper, name, true);\n\n        // Use `Object.setPrototypeOf` if available\n        if (canSetPrototype) {\n          // Inherit all properties from the object by replacing the `Function` prototype\n          var prototype = Object.create(this);\n          // Restore the `call` and `apply` methods from `Function`\n          prototype.call = call;\n          prototype.apply = apply;\n          Object.setPrototypeOf(chainableMethodWrapper, prototype);\n        }\n        // Otherwise, redefine all properties (slow!)\n        else {\n          var asserterNames = Object.getOwnPropertyNames(ctx);\n          asserterNames.forEach(function (asserterName) {\n            if (excludeNames.indexOf(asserterName) !== -1) {\n              return;\n            }\n\n            var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);\n            Object.defineProperty(chainableMethodWrapper, asserterName, pd);\n          });\n        }\n\n        transferFlags(this, chainableMethodWrapper);\n        return proxify(chainableMethodWrapper);\n      }\n    , configurable: true\n  });\n};\n",
    "var config = require('../config');\n\nvar fnLengthDesc = Object.getOwnPropertyDescriptor(function () {}, 'length');\n\n/*!\n * Chai - addLengthGuard utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .addLengthGuard(fn, assertionName, isChainable)\n *\n * Define `length` as a getter on the given uninvoked method assertion. The\n * getter acts as a guard against chaining `length` directly off of an uninvoked\n * method assertion, which is a problem because it references `function`'s\n * built-in `length` property instead of Chai's `length` assertion. When the\n * getter catches the user making this mistake, it throws an error with a\n * helpful message.\n *\n * There are two ways in which this mistake can be made. The first way is by\n * chaining the `length` assertion directly off of an uninvoked chainable\n * method. In this case, Chai suggests that the user use `lengthOf` instead. The\n * second way is by chaining the `length` assertion directly off of an uninvoked\n * non-chainable method. Non-chainable methods must be invoked prior to\n * chaining. In this case, Chai suggests that the user consult the docs for the\n * given assertion.\n *\n * If the `length` property of functions is unconfigurable, then return `fn`\n * without modification.\n *\n * Note that in ES6, the function's `length` property is configurable, so once\n * support for legacy environments is dropped, Chai's `length` property can\n * replace the built-in function's `length` property, and this length guard will\n * no longer be necessary. In the mean time, maintaining consistency across all\n * environments is the priority.\n *\n * @param {Function} fn\n * @param {String} assertionName\n * @param {Boolean} isChainable\n * @namespace Utils\n * @name addLengthGuard\n */\n\nmodule.exports = function addLengthGuard (fn, assertionName, isChainable) {\n  if (!fnLengthDesc.configurable) return fn;\n\n  Object.defineProperty(fn, 'length', {\n    get: function () {\n      if (isChainable) {\n        throw Error('Invalid Chai property: ' + assertionName + '.length. Due' +\n          ' to a compatibility issue, \"length\" cannot directly follow \"' +\n          assertionName + '\". Use \"' + assertionName + '.lengthOf\" instead.');\n      }\n\n      throw Error('Invalid Chai property: ' + assertionName + '.length. See' +\n        ' docs for proper usage of \"' + assertionName + '\".');\n    }\n  });\n\n  return fn;\n};\n",
    "/*!\n * Chai - addMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addMethod(ctx, name, method)\n *\n * Adds a method to the prototype of an object.\n *\n *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.equal(str);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(fooStr).to.be.foo('bar');\n *\n * @param {Object} ctx object to which the method is added\n * @param {String} name of method to add\n * @param {Function} method function to be used for name\n * @namespace Utils\n * @name addMethod\n * @api public\n */\n\nmodule.exports = function addMethod(ctx, name, method) {\n  var methodWrapper = function () {\n    // Setting the `ssfi` flag to `methodWrapper` causes this function to be the\n    // starting point for removing implementation frames from the stack trace of\n    // a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', methodWrapper);\n    }\n\n    var result = method.apply(this, arguments);\n    if (result !== undefined)\n      return result;\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  addLengthGuard(methodWrapper, name, false);\n  ctx[name] = proxify(methodWrapper, name);\n};\n",
    "/*!\n * Chai - addProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .addProperty(ctx, name, getter)\n *\n * Adds a property to the prototype of an object.\n *\n *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {\n *       var obj = utils.flag(this, 'object');\n *       new chai.Assertion(obj).to.be.instanceof(Foo);\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.addProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.foo;\n *\n * @param {Object} ctx object to which the property is added\n * @param {String} name of property to add\n * @param {Function} getter function to be used for name\n * @namespace Utils\n * @name addProperty\n * @api public\n */\n\nmodule.exports = function addProperty(ctx, name, getter) {\n  getter = getter === undefined ? new Function() : getter;\n\n  Object.defineProperty(ctx, name,\n    { get: function propertyGetter() {\n        // Setting the `ssfi` flag to `propertyGetter` causes this function to\n        // be the starting point for removing implementation frames from the\n        // stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', propertyGetter);\n        }\n\n        var result = getter.call(this);\n        if (result !== undefined)\n          return result;\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n",
    "/*!\n * Chai - compareByInspect utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\n\n/**\n * ### .compareByInspect(mixed, mixed)\n *\n * To be used as a compareFunction with Array.prototype.sort. Compares elements\n * using inspect instead of default behavior of using toString so that Symbols\n * and objects with irregular/missing toString can still be sorted without a\n * TypeError.\n *\n * @param {Mixed} first element to compare\n * @param {Mixed} second element to compare\n * @returns {Number} -1 if 'a' should come before 'b'; otherwise 1 \n * @name compareByInspect\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function compareByInspect(a, b) {\n  return inspect(a) < inspect(b) ? -1 : 1;\n};\n",
    "/*!\n * Chai - expectTypes utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .expectTypes(obj, types)\n *\n * Ensures that the object being tested against is of a valid type.\n *\n *     utils.expectTypes(this, ['array', 'object', 'string']);\n *\n * @param {Mixed} obj constructed Assertion\n * @param {Array} type A list of allowed types for this assertion\n * @namespace Utils\n * @name expectTypes\n * @api public\n */\n\nvar AssertionError = require('assertion-error');\nvar flag = require('./flag');\nvar type = require('type-detect');\n\nmodule.exports = function expectTypes(obj, types) {\n  var flagMsg = flag(obj, 'message');\n  var ssfi = flag(obj, 'ssfi');\n\n  flagMsg = flagMsg ? flagMsg + ': ' : '';\n\n  obj = flag(obj, 'object');\n  types = types.map(function (t) { return t.toLowerCase(); });\n  types.sort();\n\n  // Transforms ['lorem', 'ipsum'] into 'a lorem, or an ipsum'\n  var str = types.map(function (t, index) {\n    var art = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(t.charAt(0)) ? 'an' : 'a';\n    var or = types.length > 1 && index === types.length - 1 ? 'or ' : '';\n    return or + art + ' ' + t;\n  }).join(', ');\n\n  var objType = type(obj).toLowerCase();\n\n  if (!types.some(function (expected) { return objType === expected; })) {\n    throw new AssertionError(\n      flagMsg + 'object tested must be ' + str + ', but ' + objType + ' given',\n      undefined,\n      ssfi\n    );\n  }\n};\n",
    "/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .flag(object, key, [value])\n *\n * Get or set a flag value on an object. If a\n * value is provided it will be set, else it will\n * return the currently set value or `undefined` if\n * the value is not set.\n *\n *     utils.flag(this, 'foo', 'bar'); // setter\n *     utils.flag(this, 'foo'); // getter, returns `bar`\n *\n * @param {Object} object constructed Assertion\n * @param {String} key\n * @param {Mixed} value (optional)\n * @namespace Utils\n * @name flag\n * @api private\n */\n\nmodule.exports = function flag(obj, key, value) {\n  var flags = obj.__flags || (obj.__flags = Object.create(null));\n  if (arguments.length === 3) {\n    flags[key] = value;\n  } else {\n    return flags[key];\n  }\n};\n",
    "/*!\n * Chai - getActual utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getActual(object, [actual])\n *\n * Returns the `actual` value for an Assertion.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getActual\n */\n\nmodule.exports = function getActual(obj, args) {\n  return args.length > 4 ? args[4] : obj._obj;\n};\n",
    "/*!\n * Chai - getEnumerableProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getEnumerableProperties(object)\n *\n * This allows the retrieval of enumerable property names of an object,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getEnumerableProperties(object) {\n  var result = [];\n  for (var name in object) {\n    result.push(name);\n  }\n  return result;\n};\n",
    "/*!\n * Chai - message composition utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag')\n  , getActual = require('./getActual')\n  , inspect = require('./inspect')\n  , objDisplay = require('./objDisplay');\n\n/**\n * ### .getMessage(object, message, negateMessage)\n *\n * Construct the error message based on flags\n * and template tags. Template tags will return\n * a stringified inspection of the object referenced.\n *\n * Message template tags:\n * - `#{this}` current asserted object\n * - `#{act}` actual value\n * - `#{exp}` expected value\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name getMessage\n * @api public\n */\n\nmodule.exports = function getMessage(obj, args) {\n  var negate = flag(obj, 'negate')\n    , val = flag(obj, 'object')\n    , expected = args[3]\n    , actual = getActual(obj, args)\n    , msg = negate ? args[2] : args[1]\n    , flagMsg = flag(obj, 'message');\n\n  if(typeof msg === \"function\") msg = msg();\n  msg = msg || '';\n  msg = msg\n    .replace(/#\\{this\\}/g, function () { return objDisplay(val); })\n    .replace(/#\\{act\\}/g, function () { return objDisplay(actual); })\n    .replace(/#\\{exp\\}/g, function () { return objDisplay(expected); });\n\n  return flagMsg ? flagMsg + ': ' + msg : msg;\n};\n",
    "/*!\n * Chai - getOwnEnumerableProperties utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/**\n * ### .getOwnEnumerableProperties(object)\n *\n * This allows the retrieval of directly-owned enumerable property names and\n * symbols of an object. This function is necessary because Object.keys only\n * returns enumerable property names, not enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerableProperties\n * @api public\n */\n\nmodule.exports = function getOwnEnumerableProperties(obj) {\n  return Object.keys(obj).concat(getOwnEnumerablePropertySymbols(obj));\n};\n",
    "/*!\n * Chai - getOwnEnumerablePropertySymbols utility\n * Copyright(c) 2011-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getOwnEnumerablePropertySymbols(object)\n *\n * This allows the retrieval of directly-owned enumerable property symbols of an\n * object. This function is necessary because Object.getOwnPropertySymbols\n * returns both enumerable and non-enumerable property symbols.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getOwnEnumerablePropertySymbols\n * @api public\n */\n\nmodule.exports = function getOwnEnumerablePropertySymbols(obj) {\n  if (typeof Object.getOwnPropertySymbols !== 'function') return [];\n\n  return Object.getOwnPropertySymbols(obj).filter(function (sym) {\n    return Object.getOwnPropertyDescriptor(obj, sym).enumerable;\n  });\n};\n",
    "/*!\n * Chai - getProperties utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getProperties(object)\n *\n * This allows the retrieval of property names of an object, enumerable or not,\n * inherited or not.\n *\n * @param {Object} object\n * @returns {Array}\n * @namespace Utils\n * @name getProperties\n * @api public\n */\n\nmodule.exports = function getProperties(object) {\n  var result = Object.getOwnPropertyNames(object);\n\n  function addProperty(property) {\n    if (result.indexOf(property) === -1) {\n      result.push(property);\n    }\n  }\n\n  var proto = Object.getPrototypeOf(object);\n  while (proto !== null) {\n    Object.getOwnPropertyNames(proto).forEach(addProperty);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return result;\n};\n",
    "/*!\n * chai\n * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Dependencies that are used for multiple exports are required here only once\n */\n\nvar pathval = require('pathval');\n\n/*!\n * test utility\n */\n\nexports.test = require('./test');\n\n/*!\n * type utility\n */\n\nexports.type = require('type-detect');\n\n/*!\n * expectTypes utility\n */\nexports.expectTypes = require('./expectTypes');\n\n/*!\n * message utility\n */\n\nexports.getMessage = require('./getMessage');\n\n/*!\n * actual utility\n */\n\nexports.getActual = require('./getActual');\n\n/*!\n * Inspect util\n */\n\nexports.inspect = require('./inspect');\n\n/*!\n * Object Display util\n */\n\nexports.objDisplay = require('./objDisplay');\n\n/*!\n * Flag utility\n */\n\nexports.flag = require('./flag');\n\n/*!\n * Flag transferring utility\n */\n\nexports.transferFlags = require('./transferFlags');\n\n/*!\n * Deep equal utility\n */\n\nexports.eql = require('deep-eql');\n\n/*!\n * Deep path info\n */\n\nexports.getPathInfo = pathval.getPathInfo;\n\n/*!\n * Check if a property exists\n */\n\nexports.hasProperty = pathval.hasProperty;\n\n/*!\n * Function name\n */\n\nexports.getName = require('get-func-name');\n\n/*!\n * add Property\n */\n\nexports.addProperty = require('./addProperty');\n\n/*!\n * add Method\n */\n\nexports.addMethod = require('./addMethod');\n\n/*!\n * overwrite Property\n */\n\nexports.overwriteProperty = require('./overwriteProperty');\n\n/*!\n * overwrite Method\n */\n\nexports.overwriteMethod = require('./overwriteMethod');\n\n/*!\n * Add a chainable method\n */\n\nexports.addChainableMethod = require('./addChainableMethod');\n\n/*!\n * Overwrite chainable method\n */\n\nexports.overwriteChainableMethod = require('./overwriteChainableMethod');\n\n/*!\n * Compare by inspect method\n */\n\nexports.compareByInspect = require('./compareByInspect');\n\n/*!\n * Get own enumerable property symbols method\n */\n\nexports.getOwnEnumerablePropertySymbols = require('./getOwnEnumerablePropertySymbols');\n\n/*!\n * Get own enumerable properties method\n */\n\nexports.getOwnEnumerableProperties = require('./getOwnEnumerableProperties');\n\n/*!\n * Checks error against a given set of criteria\n */\n\nexports.checkError = require('check-error');\n\n/*!\n * Proxify util\n */\n\nexports.proxify = require('./proxify');\n\n/*!\n * addLengthGuard util\n */\n\nexports.addLengthGuard = require('./addLengthGuard');\n\n/*!\n * isProxyEnabled helper\n */\n\nexports.isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * isNaN method\n */\n\nexports.isNaN = require('./isNaN');\n",
    "// This is (almost) directly from Node.js utils\n// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js\n\nvar getName = require('get-func-name');\nvar getProperties = require('./getProperties');\nvar getEnumerableProperties = require('./getEnumerableProperties');\nvar config = require('../config');\n\nmodule.exports = inspect;\n\n/**\n * ### .inspect(obj, [showHidden], [depth], [colors])\n *\n * Echoes the value of a value. Tries to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Boolean} showHidden Flag that shows hidden (not enumerable)\n *    properties of objects. Default is false.\n * @param {Number} depth Depth in which to descend in object. Default is 2.\n * @param {Boolean} colors Flag to turn on ANSI escape codes to color the\n *    output. Default is false (no coloring).\n * @namespace Utils\n * @name inspect\n */\nfunction inspect(obj, showHidden, depth, colors) {\n  var ctx = {\n    showHidden: showHidden,\n    seen: [],\n    stylize: function (str) { return str; }\n  };\n  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));\n}\n\n// Returns true if object is a DOM element.\nvar isDOMElement = function (object) {\n  if (typeof HTMLElement === 'object') {\n    return object instanceof HTMLElement;\n  } else {\n    return object &&\n      typeof object === 'object' &&\n      'nodeType' in object &&\n      object.nodeType === 1 &&\n      typeof object.nodeName === 'string';\n  }\n};\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (value && typeof value.inspect === 'function' &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (typeof ret !== 'string') {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // If this is a DOM element, try to get the outer HTML.\n  if (isDOMElement(value)) {\n    if ('outerHTML' in value) {\n      return value.outerHTML;\n      // This value does not have an outerHTML attribute,\n      //   it could still be an XML element\n    } else {\n      // Attempt to serialize it\n      try {\n        if (document.xmlVersion) {\n          var xmlSerializer = new XMLSerializer();\n          return xmlSerializer.serializeToString(value);\n        } else {\n          // Firefox 11- do not support outerHTML\n          //   It does, however, support innerHTML\n          //   Use the following to render the element\n          var ns = \"http://www.w3.org/1999/xhtml\";\n          var container = document.createElementNS(ns, '_');\n\n          container.appendChild(value.cloneNode(false));\n          var html = container.innerHTML\n            .replace('><', '>' + value.innerHTML + '<');\n          container.innerHTML = '';\n          return html;\n        }\n      } catch (err) {\n        // This could be a non-native DOM implementation,\n        //   continue with the normal flow:\n        //   printing the element as if it is an object.\n      }\n    }\n  }\n\n  // Look up the keys of the object.\n  var visibleKeys = getEnumerableProperties(value);\n  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;\n\n  var name, nameSuffix;\n\n  // Some type of object without properties can be shortcutted.\n  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,\n  // a `stack` plus `description` property; ignore those for consistency.\n  if (keys.length === 0 || (isError(value) && (\n      (keys.length === 1 && keys[0] === 'stack') ||\n      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')\n     ))) {\n    if (typeof value === 'function') {\n      name = getName(value);\n      nameSuffix = name ? ': ' + name : '';\n      return ctx.stylize('[Function' + nameSuffix + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = ''\n    , array = false\n    , typedArray = false\n    , braces = ['{', '}'];\n\n  if (isTypedArray(value)) {\n    typedArray = true;\n    braces = ['[', ']'];\n  }\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (typeof value === 'function') {\n    name = getName(value);\n    nameSuffix = name ? ': ' + name : '';\n    base = ' [Function' + nameSuffix + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    return formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else if (typedArray) {\n    return formatTypedArray(value);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  switch (typeof value) {\n    case 'undefined':\n      return ctx.stylize('undefined', 'undefined');\n\n    case 'string':\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n\n    case 'number':\n      if (value === 0 && (1/value) === -Infinity) {\n        return ctx.stylize('-0', 'number');\n      }\n      return ctx.stylize('' + value, 'number');\n\n    case 'boolean':\n      return ctx.stylize('' + value, 'boolean');\n\n    case 'symbol':\n      return ctx.stylize(value.toString(), 'symbol');\n  }\n  // For some reason typeof null is \"object\", so special case here.\n  if (value === null) {\n    return ctx.stylize('null', 'null');\n  }\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (Object.prototype.hasOwnProperty.call(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatTypedArray(value) {\n  var str = '[ ';\n\n  for (var i = 0; i < value.length; ++i) {\n    if (str.length >= config.truncateThreshold - 7) {\n      str += '...';\n      break;\n    }\n    str += value[i] + ', ';\n  }\n  str += ' ]';\n\n  // Removing trailing `, ` if the array was not truncated\n  if (str.indexOf(',  ]') !== -1) {\n    str = str.replace(',  ]', ' ]');\n  }\n\n  return str;\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name;\n  var propDescriptor = Object.getOwnPropertyDescriptor(value, key);\n  var str;\n\n  if (propDescriptor) {\n    if (propDescriptor.get) {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (propDescriptor.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n  }\n  if (visibleKeys.indexOf(key) < 0) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(value[key]) < 0) {\n      if (recurseTimes === null) {\n        str = formatValue(ctx, value[key], null);\n      } else {\n        str = formatValue(ctx, value[key], recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (typeof name === 'undefined') {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction isTypedArray(ar) {\n  // Unfortunately there's no way to check if an object is a TypedArray\n  // We have to check if it's one of these types\n  return (typeof ar === 'object' && /\\w+Array]$/.test(objectToString(ar)));\n}\n\nfunction isArray(ar) {\n  return Array.isArray(ar) ||\n         (typeof ar === 'object' && objectToString(ar) === '[object Array]');\n}\n\nfunction isRegExp(re) {\n  return typeof re === 'object' && objectToString(re) === '[object RegExp]';\n}\n\nfunction isDate(d) {\n  return typeof d === 'object' && objectToString(d) === '[object Date]';\n}\n\nfunction isError(e) {\n  return typeof e === 'object' && objectToString(e) === '[object Error]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n",
    "/*!\n * Chai - isNaN utility\n * Copyright(c) 2012-2015 Sakthipriyan Vairamani <thechargingvolcano@gmail.com>\n * MIT Licensed\n */\n\n/**\n * ### .isNaN(value)\n *\n * Checks if the given value is NaN or not.\n *\n *     utils.isNaN(NaN); // true\n *\n * @param {Value} The value which has to be checked if it is NaN\n * @name isNaN\n * @api private\n */\n\nfunction isNaN(value) {\n  // Refer http://www.ecma-international.org/ecma-262/6.0/#sec-isnan-number\n  // section's NOTE.\n  return value !== value;\n}\n\n// If ECMAScript 6's Number.isNaN is present, prefer that.\nmodule.exports = Number.isNaN || isNaN;\n",
    "var config = require('../config');\n\n/*!\n * Chai - isProxyEnabled helper\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .isProxyEnabled()\n *\n * Helper function to check if Chai's proxy protection feature is enabled. If\n * proxies are unsupported or disabled via the user's Chai config, then return\n * false. Otherwise, return true.\n *\n * @namespace Utils\n * @name isProxyEnabled\n */\n\nmodule.exports = function isProxyEnabled() {\n  return config.useProxy && \n    typeof Proxy !== 'undefined' &&\n    typeof Reflect !== 'undefined';\n};\n",
    "/*!\n * Chai - flag utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar inspect = require('./inspect');\nvar config = require('../config');\n\n/**\n * ### .objDisplay(object)\n *\n * Determines if an object or an array matches\n * criteria to be inspected in-line for error\n * messages or should be truncated.\n *\n * @param {Mixed} javascript object to inspect\n * @name objDisplay\n * @namespace Utils\n * @api public\n */\n\nmodule.exports = function objDisplay(obj) {\n  var str = inspect(obj)\n    , type = Object.prototype.toString.call(obj);\n\n  if (config.truncateThreshold && str.length >= config.truncateThreshold) {\n    if (type === '[object Function]') {\n      return !obj.name || obj.name === ''\n        ? '[Function]'\n        : '[Function: ' + obj.name + ']';\n    } else if (type === '[object Array]') {\n      return '[ Array(' + obj.length + ') ]';\n    } else if (type === '[object Object]') {\n      var keys = Object.keys(obj)\n        , kstr = keys.length > 2\n          ? keys.splice(0, 2).join(', ') + ', ...'\n          : keys.join(', ');\n      return '{ Object (' + kstr + ') }';\n    } else {\n      return str;\n    }\n  } else {\n    return str;\n  }\n};\n",
    "/*!\n * Chai - overwriteChainableMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteChainableMethod(ctx, name, method, chainingBehavior)\n *\n * Overwites an already existing chainable method\n * and provides access to the previous function or\n * property.  Must return functions to be used for\n * name.\n *\n *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'lengthOf',\n *       function (_super) {\n *       }\n *     , function (_super) {\n *       }\n *     );\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.have.lengthOf(3);\n *     expect(myFoo).to.have.lengthOf.above(3);\n *\n * @param {Object} ctx object whose method / property is to be overwritten\n * @param {String} name of method / property to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @param {Function} chainingBehavior function that returns a function to be used for property\n * @namespace Utils\n * @name overwriteChainableMethod\n * @api public\n */\n\nmodule.exports = function overwriteChainableMethod(ctx, name, method, chainingBehavior) {\n  var chainableBehavior = ctx.__methods[name];\n\n  var _chainingBehavior = chainableBehavior.chainingBehavior;\n  chainableBehavior.chainingBehavior = function overwritingChainableMethodGetter() {\n    var result = chainingBehavior(_chainingBehavior).call(this);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n\n  var _method = chainableBehavior.method;\n  chainableBehavior.method = function overwritingChainableMethodWrapper() {\n    var result = method(_method).apply(this, arguments);\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  };\n};\n",
    "/*!\n * Chai - overwriteMethod utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar addLengthGuard = require('./addLengthGuard');\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar proxify = require('./proxify');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteMethod(ctx, name, fn)\n *\n * Overwites an already existing method and provides\n * access to previous function. Must return function\n * to be used for name.\n *\n *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {\n *       return function (str) {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.value).to.equal(str);\n *         } else {\n *           _super.apply(this, arguments);\n *         }\n *       }\n *     });\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteMethod('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.equal('bar');\n *\n * @param {Object} ctx object whose method is to be overwritten\n * @param {String} name of method to overwrite\n * @param {Function} method function that returns a function to be used for name\n * @namespace Utils\n * @name overwriteMethod\n * @api public\n */\n\nmodule.exports = function overwriteMethod(ctx, name, method) {\n  var _method = ctx[name]\n    , _super = function () {\n      throw new Error(name + ' is not a function');\n    };\n\n  if (_method && 'function' === typeof _method)\n    _super = _method;\n\n  var overwritingMethodWrapper = function () {\n    // Setting the `ssfi` flag to `overwritingMethodWrapper` causes this\n    // function to be the starting point for removing implementation frames from\n    // the stack trace of a failed assertion.\n    //\n    // However, we only want to use this function as the starting point if the\n    // `lockSsfi` flag isn't set.\n    //\n    // If the `lockSsfi` flag is set, then either this assertion has been\n    // overwritten by another assertion, or this assertion is being invoked from\n    // inside of another assertion. In the first case, the `ssfi` flag has\n    // already been set by the overwriting assertion. In the second case, the\n    // `ssfi` flag has already been set by the outer assertion.\n    if (!flag(this, 'lockSsfi')) {\n      flag(this, 'ssfi', overwritingMethodWrapper);\n    }\n\n    // Setting the `lockSsfi` flag to `true` prevents the overwritten assertion\n    // from changing the `ssfi` flag. By this point, the `ssfi` flag is already\n    // set to the correct starting point for this assertion.\n    var origLockSsfi = flag(this, 'lockSsfi');\n    flag(this, 'lockSsfi', true);\n    var result = method(_super).apply(this, arguments);\n    flag(this, 'lockSsfi', origLockSsfi);\n\n    if (result !== undefined) {\n      return result;\n    }\n\n    var newAssertion = new chai.Assertion();\n    transferFlags(this, newAssertion);\n    return newAssertion;\n  }\n\n  addLengthGuard(overwritingMethodWrapper, name, false);\n  ctx[name] = proxify(overwritingMethodWrapper, name);\n};\n",
    "/*!\n * Chai - overwriteProperty utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\nvar chai = require('../../chai');\nvar flag = require('./flag');\nvar isProxyEnabled = require('./isProxyEnabled');\nvar transferFlags = require('./transferFlags');\n\n/**\n * ### .overwriteProperty(ctx, name, fn)\n *\n * Overwites an already existing property getter and provides\n * access to previous value. Must return function to use as getter.\n *\n *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {\n *       return function () {\n *         var obj = utils.flag(this, 'object');\n *         if (obj instanceof Foo) {\n *           new chai.Assertion(obj.name).to.equal('bar');\n *         } else {\n *           _super.call(this);\n *         }\n *       }\n *     });\n *\n *\n * Can also be accessed directly from `chai.Assertion`.\n *\n *     chai.Assertion.overwriteProperty('foo', fn);\n *\n * Then can be used as any other assertion.\n *\n *     expect(myFoo).to.be.ok;\n *\n * @param {Object} ctx object whose property is to be overwritten\n * @param {String} name of property to overwrite\n * @param {Function} getter function that returns a getter function to be used for name\n * @namespace Utils\n * @name overwriteProperty\n * @api public\n */\n\nmodule.exports = function overwriteProperty(ctx, name, getter) {\n  var _get = Object.getOwnPropertyDescriptor(ctx, name)\n    , _super = function () {};\n\n  if (_get && 'function' === typeof _get.get)\n    _super = _get.get\n\n  Object.defineProperty(ctx, name,\n    { get: function overwritingPropertyGetter() {\n        // Setting the `ssfi` flag to `overwritingPropertyGetter` causes this\n        // function to be the starting point for removing implementation frames\n        // from the stack trace of a failed assertion.\n        //\n        // However, we only want to use this function as the starting point if\n        // the `lockSsfi` flag isn't set and proxy protection is disabled.\n        //\n        // If the `lockSsfi` flag is set, then either this assertion has been\n        // overwritten by another assertion, or this assertion is being invoked\n        // from inside of another assertion. In the first case, the `ssfi` flag\n        // has already been set by the overwriting assertion. In the second\n        // case, the `ssfi` flag has already been set by the outer assertion.\n        //\n        // If proxy protection is enabled, then the `ssfi` flag has already been\n        // set by the proxy getter.\n        if (!isProxyEnabled() && !flag(this, 'lockSsfi')) {\n          flag(this, 'ssfi', overwritingPropertyGetter);\n        }\n\n        // Setting the `lockSsfi` flag to `true` prevents the overwritten\n        // assertion from changing the `ssfi` flag. By this point, the `ssfi`\n        // flag is already set to the correct starting point for this assertion.\n        var origLockSsfi = flag(this, 'lockSsfi');\n        flag(this, 'lockSsfi', true);\n        var result = getter(_super).call(this);\n        flag(this, 'lockSsfi', origLockSsfi);\n\n        if (result !== undefined) {\n          return result;\n        }\n\n        var newAssertion = new chai.Assertion();\n        transferFlags(this, newAssertion);\n        return newAssertion;\n      }\n    , configurable: true\n  });\n};\n",
    "var config = require('../config');\nvar flag = require('./flag');\nvar getProperties = require('./getProperties');\nvar isProxyEnabled = require('./isProxyEnabled');\n\n/*!\n * Chai - proxify utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .proxify(object)\n *\n * Return a proxy of given object that throws an error when a non-existent\n * property is read. By default, the root cause is assumed to be a misspelled\n * property, and thus an attempt is made to offer a reasonable suggestion from\n * the list of existing properties. However, if a nonChainableMethodName is\n * provided, then the root cause is instead a failure to invoke a non-chainable\n * method prior to reading the non-existent property.\n * \n * If proxies are unsupported or disabled via the user's Chai config, then\n * return object without modification.\n *\n * @param {Object} obj\n * @param {String} nonChainableMethodName\n * @namespace Utils\n * @name proxify\n */\n\nvar builtins = ['__flags', '__methods', '_obj', 'assert'];\n\nmodule.exports = function proxify(obj, nonChainableMethodName) {\n  if (!isProxyEnabled()) return obj;\n\n  return new Proxy(obj, {\n    get: function proxyGetter(target, property) {\n      // This check is here because we should not throw errors on Symbol properties\n      // such as `Symbol.toStringTag`.\n      // The values for which an error should be thrown can be configured using\n      // the `config.proxyExcludedKeys` setting.\n      if (typeof property === 'string' &&\n          config.proxyExcludedKeys.indexOf(property) === -1 &&\n          !Reflect.has(target, property)) {\n        // Special message for invalid property access of non-chainable methods.\n        if (nonChainableMethodName) {\n          throw Error('Invalid Chai property: ' + nonChainableMethodName + '.' +\n            property + '. See docs for proper usage of \"' +\n            nonChainableMethodName + '\".');\n        }\n\n        var orderedProperties = getProperties(target).filter(function(property) {\n          return !Object.prototype.hasOwnProperty(property) &&\n            builtins.indexOf(property) === -1;\n        }).sort(function(a, b) {\n          return stringDistance(property, a) - stringDistance(property, b);\n        });\n\n        if (orderedProperties.length &&\n            stringDistance(orderedProperties[0], property) < 4) {\n          // If the property is reasonably close to an existing Chai property,\n          // suggest that property to the user.\n          throw Error('Invalid Chai property: ' + property +\n            '. Did you mean \"' + orderedProperties[0] + '\"?');\n        } else {\n          throw Error('Invalid Chai property: ' + property);\n        }\n      }\n\n      // Use this proxy getter as the starting point for removing implementation\n      // frames from the stack trace of a failed assertion. For property\n      // assertions, this prevents the proxy getter from showing up in the stack\n      // trace since it's invoked before the property getter. For method and\n      // chainable method assertions, this flag will end up getting changed to\n      // the method wrapper, which is good since this frame will no longer be in\n      // the stack once the method is invoked. Note that Chai builtin assertion\n      // properties such as `__flags` are skipped since this is only meant to\n      // capture the starting point of an assertion. This step is also skipped\n      // if the `lockSsfi` flag is set, thus indicating that this assertion is\n      // being called from within another assertion. In that case, the `ssfi`\n      // flag is already set to the outer assertion's starting point.\n      if (builtins.indexOf(property) === -1 && !flag(target, 'lockSsfi')) {\n        flag(target, 'ssfi', proxyGetter);\n      }\n\n      return Reflect.get(target, property);\n    }\n  });\n};\n\n/**\n * # stringDistance(strA, strB)\n * Return the Levenshtein distance between two strings.\n * @param {string} strA\n * @param {string} strB\n * @return {number} the string distance between strA and strB\n * @api private\n */\n\nfunction stringDistance(strA, strB, memo) {\n  if (!memo) {\n    // `memo` is a two-dimensional array containing a cache of distances\n    // memo[i][j] is the distance between strA.slice(0, i) and\n    // strB.slice(0, j).\n    memo = [];\n    for (var i = 0; i <= strA.length; i++) {\n      memo[i] = [];\n    }\n  }\n\n  if (!memo[strA.length] || !memo[strA.length][strB.length]) {\n    if (strA.length === 0 || strB.length === 0) {\n      memo[strA.length][strB.length] = Math.max(strA.length, strB.length);\n    } else {\n      memo[strA.length][strB.length] = Math.min(\n        stringDistance(strA.slice(0, -1), strB, memo) + 1,\n        stringDistance(strA, strB.slice(0, -1), memo) + 1,\n        stringDistance(strA.slice(0, -1), strB.slice(0, -1), memo) +\n          (strA.slice(-1) === strB.slice(-1) ? 0 : 1)\n      );\n    }\n  }\n\n  return memo[strA.length][strB.length];\n}\n",
    "/*!\n * Chai - test utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependancies\n */\n\nvar flag = require('./flag');\n\n/**\n * ### .test(object, expression)\n *\n * Test and object for expression.\n *\n * @param {Object} object (constructed Assertion)\n * @param {Arguments} chai.Assertion.prototype.assert arguments\n * @namespace Utils\n * @name test\n */\n\nmodule.exports = function test(obj, args) {\n  var negate = flag(obj, 'negate')\n    , expr = args[0];\n  return negate ? !expr : expr;\n};\n",
    "/*!\n * Chai - transferFlags utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .transferFlags(assertion, object, includeAll = true)\n *\n * Transfer all the flags for `assertion` to `object`. If\n * `includeAll` is set to `false`, then the base Chai\n * assertion flags (namely `object`, `ssfi`, `lockSsfi`,\n * and `message`) will not be transferred.\n *\n *\n *     var newAssertion = new Assertion();\n *     utils.transferFlags(assertion, newAssertion);\n *\n *     var anotherAsseriton = new Assertion(myObj);\n *     utils.transferFlags(assertion, anotherAssertion, false);\n *\n * @param {Assertion} assertion the assertion to transfer the flags from\n * @param {Object} object the object to transfer the flags to; usually a new assertion\n * @param {Boolean} includeAll\n * @namespace Utils\n * @name transferFlags\n * @api private\n */\n\nmodule.exports = function transferFlags(assertion, object, includeAll) {\n  var flags = assertion.__flags || (assertion.__flags = Object.create(null));\n\n  if (!object.__flags) {\n    object.__flags = Object.create(null);\n  }\n\n  includeAll = arguments.length === 3 ? includeAll : true;\n\n  for (var flag in flags) {\n    if (includeAll ||\n        (flag !== 'object' && flag !== 'ssfi' && flag !== 'lockSsfi' && flag != 'message')) {\n      object.__flags[flag] = flags[flag];\n    }\n  }\n};\n",
    "'use strict';\n\n/* !\n * Chai - checkError utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .checkError\n *\n * Checks that an error conforms to a given set of criteria and/or retrieves information about it.\n *\n * @api public\n */\n\n/**\n * ### .compatibleInstance(thrown, errorLike)\n *\n * Checks if two instances are compatible (strict equal).\n * Returns false if errorLike is not an instance of Error, because instances\n * can only be compatible if they're both error instances.\n *\n * @name compatibleInstance\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleInstance(thrown, errorLike) {\n  return errorLike instanceof Error && thrown === errorLike;\n}\n\n/**\n * ### .compatibleConstructor(thrown, errorLike)\n *\n * Checks if two constructors are compatible.\n * This function can receive either an error constructor or\n * an error instance as the `errorLike` argument.\n * Constructors are compatible if they're the same or if one is\n * an instance of another.\n *\n * @name compatibleConstructor\n * @param {Error} thrown error\n * @param {Error|ErrorConstructor} errorLike object to compare against\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleConstructor(thrown, errorLike) {\n  if (errorLike instanceof Error) {\n    // If `errorLike` is an instance of any error we compare their constructors\n    return thrown.constructor === errorLike.constructor || thrown instanceof errorLike.constructor;\n  } else if (errorLike.prototype instanceof Error || errorLike === Error) {\n    // If `errorLike` is a constructor that inherits from Error, we compare `thrown` to `errorLike` directly\n    return thrown.constructor === errorLike || thrown instanceof errorLike;\n  }\n\n  return false;\n}\n\n/**\n * ### .compatibleMessage(thrown, errMatcher)\n *\n * Checks if an error's message is compatible with a matcher (String or RegExp).\n * If the message contains the String or passes the RegExp test,\n * it is considered compatible.\n *\n * @name compatibleMessage\n * @param {Error} thrown error\n * @param {String|RegExp} errMatcher to look for into the message\n * @namespace Utils\n * @api public\n */\n\nfunction compatibleMessage(thrown, errMatcher) {\n  var comparisonString = typeof thrown === 'string' ? thrown : thrown.message;\n  if (errMatcher instanceof RegExp) {\n    return errMatcher.test(comparisonString);\n  } else if (typeof errMatcher === 'string') {\n    return comparisonString.indexOf(errMatcher) !== -1; // eslint-disable-line no-magic-numbers\n  }\n\n  return false;\n}\n\n/**\n * ### .getFunctionName(constructorFn)\n *\n * Returns the name of a function.\n * This also includes a polyfill function if `constructorFn.name` is not defined.\n *\n * @name getFunctionName\n * @param {Function} constructorFn\n * @namespace Utils\n * @api private\n */\n\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\(\\/]+)/;\nfunction getFunctionName(constructorFn) {\n  var name = '';\n  if (typeof constructorFn.name === 'undefined') {\n    // Here we run a polyfill if constructorFn.name is not defined\n    var match = String(constructorFn).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    name = constructorFn.name;\n  }\n\n  return name;\n}\n\n/**\n * ### .getConstructorName(errorLike)\n *\n * Gets the constructor name for an Error instance or constructor itself.\n *\n * @name getConstructorName\n * @param {Error|ErrorConstructor} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getConstructorName(errorLike) {\n  var constructorName = errorLike;\n  if (errorLike instanceof Error) {\n    constructorName = getFunctionName(errorLike.constructor);\n  } else if (typeof errorLike === 'function') {\n    // If `err` is not an instance of Error it is an error constructor itself or another function.\n    // If we've got a common function we get its name, otherwise we may need to create a new instance\n    // of the error just in case it's a poorly-constructed error. Please see chaijs/chai/issues/45 to know more.\n    constructorName = getFunctionName(errorLike).trim() ||\n        getFunctionName(new errorLike()); // eslint-disable-line new-cap\n  }\n\n  return constructorName;\n}\n\n/**\n * ### .getMessage(errorLike)\n *\n * Gets the error message from an error.\n * If `err` is a String itself, we return it.\n * If the error has no message, we return an empty string.\n *\n * @name getMessage\n * @param {Error|String} errorLike\n * @namespace Utils\n * @api public\n */\n\nfunction getMessage(errorLike) {\n  var msg = '';\n  if (errorLike && errorLike.message) {\n    msg = errorLike.message;\n  } else if (typeof errorLike === 'string') {\n    msg = errorLike;\n  }\n\n  return msg;\n}\n\nmodule.exports = {\n  compatibleInstance: compatibleInstance,\n  compatibleConstructor: compatibleConstructor,\n  compatibleMessage: compatibleMessage,\n  getMessage: getMessage,\n  getConstructorName: getConstructorName,\n};\n",
    "/* jshint node: true */\n(function () {\n    \"use strict\";\n\n    function CookieAccessInfo(domain, path, secure, script) {\n        if (this instanceof CookieAccessInfo) {\n            this.domain = domain || undefined;\n            this.path = path || \"/\";\n            this.secure = !!secure;\n            this.script = !!script;\n            return this;\n        }\n        return new CookieAccessInfo(domain, path, secure, script);\n    }\n    CookieAccessInfo.All = Object.freeze(Object.create(null));\n    exports.CookieAccessInfo = CookieAccessInfo;\n\n    function Cookie(cookiestr, request_domain, request_path) {\n        if (cookiestr instanceof Cookie) {\n            return cookiestr;\n        }\n        if (this instanceof Cookie) {\n            this.name = null;\n            this.value = null;\n            this.expiration_date = Infinity;\n            this.path = String(request_path || \"/\");\n            this.explicit_path = false;\n            this.domain = request_domain || null;\n            this.explicit_domain = false;\n            this.secure = false; //how to define default?\n            this.noscript = false; //httponly\n            if (cookiestr) {\n                this.parse(cookiestr, request_domain, request_path);\n            }\n            return this;\n        }\n        return new Cookie(cookiestr, request_domain, request_path);\n    }\n    exports.Cookie = Cookie;\n\n    Cookie.prototype.toString = function toString() {\n        var str = [this.name + \"=\" + this.value];\n        if (this.expiration_date !== Infinity) {\n            str.push(\"expires=\" + (new Date(this.expiration_date)).toGMTString());\n        }\n        if (this.domain) {\n            str.push(\"domain=\" + this.domain);\n        }\n        if (this.path) {\n            str.push(\"path=\" + this.path);\n        }\n        if (this.secure) {\n            str.push(\"secure\");\n        }\n        if (this.noscript) {\n            str.push(\"httponly\");\n        }\n        return str.join(\"; \");\n    };\n\n    Cookie.prototype.toValueString = function toValueString() {\n        return this.name + \"=\" + this.value;\n    };\n\n    var cookie_str_splitter = /[:](?=\\s*[a-zA-Z0-9_\\-]+\\s*[=])/g;\n    Cookie.prototype.parse = function parse(str, request_domain, request_path) {\n        if (this instanceof Cookie) {\n            var parts = str.split(\";\").filter(function (value) {\n                    return !!value;\n                }),\n                pair = parts[0].match(/([^=]+)=([\\s\\S]*)/),\n                key = pair[1],\n                value = pair[2],\n                i;\n            this.name = key;\n            this.value = value;\n\n            for (i = 1; i < parts.length; i += 1) {\n                pair = parts[i].match(/([^=]+)(?:=([\\s\\S]*))?/);\n                key = pair[1].trim().toLowerCase();\n                value = pair[2];\n                switch (key) {\n                case \"httponly\":\n                    this.noscript = true;\n                    break;\n                case \"expires\":\n                    this.expiration_date = value ?\n                            Number(Date.parse(value)) :\n                            Infinity;\n                    break;\n                case \"path\":\n                    this.path = value ?\n                            value.trim() :\n                            \"\";\n                    this.explicit_path = true;\n                    break;\n                case \"domain\":\n                    this.domain = value ?\n                            value.trim() :\n                            \"\";\n                    this.explicit_domain = !!this.domain;\n                    break;\n                case \"secure\":\n                    this.secure = true;\n                    break;\n                }\n            }\n\n            if (!this.explicit_path) {\n               this.path = request_path || \"/\";\n            }\n            if (!this.explicit_domain) {\n               this.domain = request_domain;\n            }\n\n            return this;\n        }\n        return new Cookie().parse(str, request_domain, request_path);\n    };\n\n    Cookie.prototype.matches = function matches(access_info) {\n        if (access_info === CookieAccessInfo.All) {\n          return true;\n        }\n        if (this.noscript && access_info.script ||\n                this.secure && !access_info.secure ||\n                !this.collidesWith(access_info)) {\n            return false;\n        }\n        return true;\n    };\n\n    Cookie.prototype.collidesWith = function collidesWith(access_info) {\n        if ((this.path && !access_info.path) || (this.domain && !access_info.domain)) {\n            return false;\n        }\n        if (this.path && access_info.path.indexOf(this.path) !== 0) {\n            return false;\n        }\n        if (this.explicit_path && access_info.path.indexOf( this.path ) !== 0) {\n           return false;\n        }\n        var access_domain = access_info.domain && access_info.domain.replace(/^[\\.]/,'');\n        var cookie_domain = this.domain && this.domain.replace(/^[\\.]/,'');\n        if (cookie_domain === access_domain) {\n            return true;\n        }\n        if (cookie_domain) {\n            if (!this.explicit_domain) {\n                return false; // we already checked if the domains were exactly the same\n            }\n            var wildcard = access_domain.indexOf(cookie_domain);\n            if (wildcard === -1 || wildcard !== access_domain.length - cookie_domain.length) {\n                return false;\n            }\n            return true;\n        }\n        return true;\n    };\n\n    function CookieJar() {\n        var cookies, cookies_list, collidable_cookie;\n        if (this instanceof CookieJar) {\n            cookies = Object.create(null); //name: [Cookie]\n\n            this.setCookie = function setCookie(cookie, request_domain, request_path) {\n                var remove, i;\n                cookie = new Cookie(cookie, request_domain, request_path);\n                //Delete the cookie if the set is past the current time\n                remove = cookie.expiration_date <= Date.now();\n                if (cookies[cookie.name] !== undefined) {\n                    cookies_list = cookies[cookie.name];\n                    for (i = 0; i < cookies_list.length; i += 1) {\n                        collidable_cookie = cookies_list[i];\n                        if (collidable_cookie.collidesWith(cookie)) {\n                            if (remove) {\n                                cookies_list.splice(i, 1);\n                                if (cookies_list.length === 0) {\n                                    delete cookies[cookie.name];\n                                }\n                                return false;\n                            }\n                            cookies_list[i] = cookie;\n                            return cookie;\n                        }\n                    }\n                    if (remove) {\n                        return false;\n                    }\n                    cookies_list.push(cookie);\n                    return cookie;\n                }\n                if (remove) {\n                    return false;\n                }\n                cookies[cookie.name] = [cookie];\n                return cookies[cookie.name];\n            };\n            //returns a cookie\n            this.getCookie = function getCookie(cookie_name, access_info) {\n                var cookie, i;\n                cookies_list = cookies[cookie_name];\n                if (!cookies_list) {\n                    return;\n                }\n                for (i = 0; i < cookies_list.length; i += 1) {\n                    cookie = cookies_list[i];\n                    if (cookie.expiration_date <= Date.now()) {\n                        if (cookies_list.length === 0) {\n                            delete cookies[cookie.name];\n                        }\n                        continue;\n                    }\n\n                    if (cookie.matches(access_info)) {\n                        return cookie;\n                    }\n                }\n            };\n            //returns a list of cookies\n            this.getCookies = function getCookies(access_info) {\n                var matches = [], cookie_name, cookie;\n                for (cookie_name in cookies) {\n                    cookie = this.getCookie(cookie_name, access_info);\n                    if (cookie) {\n                        matches.push(cookie);\n                    }\n                }\n                matches.toString = function toString() {\n                    return matches.join(\":\");\n                };\n                matches.toValueString = function toValueString() {\n                    return matches.map(function (c) {\n                        return c.toValueString();\n                    }).join(';');\n                };\n                return matches;\n            };\n\n            return this;\n        }\n        return new CookieJar();\n    }\n    exports.CookieJar = CookieJar;\n\n    //returns list of cookies that were set correctly. Cookies that are expired and removed are not returned.\n    CookieJar.prototype.setCookies = function setCookies(cookies, request_domain, request_path) {\n        cookies = Array.isArray(cookies) ?\n                cookies :\n                cookies.split(cookie_str_splitter);\n        var successful = [],\n            i,\n            cookie;\n        cookies = cookies.map(function(item){\n            return new Cookie(item, request_domain, request_path);\n        });\n        for (i = 0; i < cookies.length; i += 1) {\n            cookie = cookies[i];\n            if (this.setCookie(cookie, request_domain, request_path)) {\n                successful.push(cookie);\n            }\n        }\n        return successful;\n    };\n}());\n",
    "'use strict';\n/* globals Symbol: true, Uint8Array: true, WeakMap: true */\n/*!\n * deep-eql\n * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/*!\n * Module dependencies\n */\n\nvar type = require('type-detect');\nfunction FakeMap() {\n  this.clear();\n}\nFakeMap.prototype = {\n  clear: function clearMap() {\n    this.keys = [];\n    this.values = [];\n    return this;\n  },\n  set: function setMap(key, value) {\n    var index = this.keys.indexOf(key);\n    if (index >= 0) {\n      this.values[index] = value;\n    } else {\n      this.keys.push(key);\n      this.values.push(value);\n    }\n    return this;\n  },\n  get: function getMap(key) {\n    return this.values[this.keys.indexOf(key)];\n  },\n  delete: function deleteMap(key) {\n    var index = this.keys.indexOf(key);\n    if (index >= 0) {\n      this.values = this.values.slice(0, index).concat(this.values.slice(index + 1));\n      this.keys = this.keys.slice(0, index).concat(this.keys.slice(index + 1));\n    }\n    return this;\n  },\n};\n\nvar MemoizeMap = null;\nif (typeof WeakMap === 'function') {\n  MemoizeMap = WeakMap;\n} else {\n  MemoizeMap = FakeMap;\n}\n\n/*!\n * Check to see if the MemoizeMap has recorded a result of the two operands\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @returns {Boolean|null} result\n*/\nfunction memoizeCompare(leftHandOperand, rightHandOperand, memoizeMap) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return null;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    var result = leftHandMap.get(rightHandOperand);\n    if (typeof result === 'boolean') {\n      return result;\n    }\n  }\n  return null;\n}\n\n/*!\n * Set the result of the equality into the MemoizeMap\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {MemoizeMap} memoizeMap\n * @param {Boolean} result\n*/\nfunction memoizeSet(leftHandOperand, rightHandOperand, memoizeMap, result) {\n  // Technically, WeakMap keys can *only* be objects, not primitives.\n  if (!memoizeMap || isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    return;\n  }\n  var leftHandMap = memoizeMap.get(leftHandOperand);\n  if (leftHandMap) {\n    leftHandMap.set(rightHandOperand, result);\n  } else {\n    leftHandMap = new MemoizeMap();\n    leftHandMap.set(rightHandOperand, result);\n    memoizeMap.set(leftHandOperand, leftHandMap);\n  }\n}\n\n/*!\n * Primary Export\n */\n\nmodule.exports = deepEqual;\nmodule.exports.MemoizeMap = MemoizeMap;\n\n/**\n * Assert deeply nested sameValue equality between two objects of any type.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n */\nfunction deepEqual(leftHandOperand, rightHandOperand, options) {\n  // If we have a comparator, we can't assume anything; so bail to its check first.\n  if (options && options.comparator) {\n    return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n  }\n\n  var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n  if (simpleResult !== null) {\n    return simpleResult;\n  }\n\n  // Deeper comparisons are pushed through to a larger function\n  return extensiveDeepEqual(leftHandOperand, rightHandOperand, options);\n}\n\n/**\n * Many comparisons can be canceled out early via simple equality or primitive checks.\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @return {Boolean|null} equal match\n */\nfunction simpleEqual(leftHandOperand, rightHandOperand) {\n  // Equal references (except for Numbers) can be returned early\n  if (leftHandOperand === rightHandOperand) {\n    // Handle +-0 cases\n    return leftHandOperand !== 0 || 1 / leftHandOperand === 1 / rightHandOperand;\n  }\n\n  // handle NaN cases\n  if (\n    leftHandOperand !== leftHandOperand && // eslint-disable-line no-self-compare\n    rightHandOperand !== rightHandOperand // eslint-disable-line no-self-compare\n  ) {\n    return true;\n  }\n\n  // Anything that is not an 'object', i.e. symbols, functions, booleans, numbers,\n  // strings, and undefined, can be compared by reference.\n  if (isPrimitive(leftHandOperand) || isPrimitive(rightHandOperand)) {\n    // Easy out b/c it would have passed the first equality check\n    return false;\n  }\n  return null;\n}\n\n/*!\n * The main logic of the `deepEqual` function.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (optional) Additional options\n * @param {Array} [options.comparator] (optional) Override default algorithm, determining custom equality.\n * @param {Array} [options.memoize] (optional) Provide a custom memoization object which will cache the results of\n    complex objects for a speed boost. By passing `false` you can disable memoization, but this will cause circular\n    references to blow the stack.\n * @return {Boolean} equal match\n*/\nfunction extensiveDeepEqual(leftHandOperand, rightHandOperand, options) {\n  options = options || {};\n  options.memoize = options.memoize === false ? false : options.memoize || new MemoizeMap();\n  var comparator = options && options.comparator;\n\n  // Check if a memoized result exists.\n  var memoizeResultLeft = memoizeCompare(leftHandOperand, rightHandOperand, options.memoize);\n  if (memoizeResultLeft !== null) {\n    return memoizeResultLeft;\n  }\n  var memoizeResultRight = memoizeCompare(rightHandOperand, leftHandOperand, options.memoize);\n  if (memoizeResultRight !== null) {\n    return memoizeResultRight;\n  }\n\n  // If a comparator is present, use it.\n  if (comparator) {\n    var comparatorResult = comparator(leftHandOperand, rightHandOperand);\n    // Comparators may return null, in which case we want to go back to default behavior.\n    if (comparatorResult === false || comparatorResult === true) {\n      memoizeSet(leftHandOperand, rightHandOperand, options.memoize, comparatorResult);\n      return comparatorResult;\n    }\n    // To allow comparators to override *any* behavior, we ran them first. Since it didn't decide\n    // what to do, we need to make sure to return the basic tests first before we move on.\n    var simpleResult = simpleEqual(leftHandOperand, rightHandOperand);\n    if (simpleResult !== null) {\n      // Don't memoize this, it takes longer to set/retrieve than to just compare.\n      return simpleResult;\n    }\n  }\n\n  var leftHandType = type(leftHandOperand);\n  if (leftHandType !== type(rightHandOperand)) {\n    memoizeSet(leftHandOperand, rightHandOperand, options.memoize, false);\n    return false;\n  }\n\n  // Temporarily set the operands in the memoize object to prevent blowing the stack\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, true);\n\n  var result = extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options);\n  memoizeSet(leftHandOperand, rightHandOperand, options.memoize, result);\n  return result;\n}\n\nfunction extensiveDeepEqualByType(leftHandOperand, rightHandOperand, leftHandType, options) {\n  switch (leftHandType) {\n    case 'String':\n    case 'Number':\n    case 'Boolean':\n    case 'Date':\n      // If these types are their instance types (e.g. `new Number`) then re-deepEqual against their values\n      return deepEqual(leftHandOperand.valueOf(), rightHandOperand.valueOf());\n    case 'Promise':\n    case 'Symbol':\n    case 'function':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Error':\n      return leftHandOperand === rightHandOperand;\n    case 'Arguments':\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n    case 'Array':\n      return iterableEqual(leftHandOperand, rightHandOperand, options);\n    case 'RegExp':\n      return regexpEqual(leftHandOperand, rightHandOperand);\n    case 'Generator':\n      return generatorEqual(leftHandOperand, rightHandOperand, options);\n    case 'DataView':\n      return iterableEqual(new Uint8Array(leftHandOperand.buffer), new Uint8Array(rightHandOperand.buffer), options);\n    case 'ArrayBuffer':\n      return iterableEqual(new Uint8Array(leftHandOperand), new Uint8Array(rightHandOperand), options);\n    case 'Set':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    case 'Map':\n      return entriesEqual(leftHandOperand, rightHandOperand, options);\n    default:\n      return objectEqual(leftHandOperand, rightHandOperand, options);\n  }\n}\n\n/*!\n * Compare two Regular Expressions for equality.\n *\n * @param {RegExp} leftHandOperand\n * @param {RegExp} rightHandOperand\n * @return {Boolean} result\n */\n\nfunction regexpEqual(leftHandOperand, rightHandOperand) {\n  return leftHandOperand.toString() === rightHandOperand.toString();\n}\n\n/*!\n * Compare two Sets/Maps for equality. Faster than other equality functions.\n *\n * @param {Set} leftHandOperand\n * @param {Set} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction entriesEqual(leftHandOperand, rightHandOperand, options) {\n  // IE11 doesn't support Set#entries or Set#@@iterator, so we need manually populate using Set#forEach\n  if (leftHandOperand.size !== rightHandOperand.size) {\n    return false;\n  }\n  if (leftHandOperand.size === 0) {\n    return true;\n  }\n  var leftHandItems = [];\n  var rightHandItems = [];\n  leftHandOperand.forEach(function gatherEntries(key, value) {\n    leftHandItems.push([ key, value ]);\n  });\n  rightHandOperand.forEach(function gatherEntries(key, value) {\n    rightHandItems.push([ key, value ]);\n  });\n  return iterableEqual(leftHandItems.sort(), rightHandItems.sort(), options);\n}\n\n/*!\n * Simple equality for flat iterable objects such as Arrays, TypedArrays or Node.js buffers.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction iterableEqual(leftHandOperand, rightHandOperand, options) {\n  var length = leftHandOperand.length;\n  if (length !== rightHandOperand.length) {\n    return false;\n  }\n  if (length === 0) {\n    return true;\n  }\n  var index = -1;\n  while (++index < length) {\n    if (deepEqual(leftHandOperand[index], rightHandOperand[index], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Simple equality for generator objects such as those returned by generator functions.\n *\n * @param {Iterable} leftHandOperand\n * @param {Iterable} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction generatorEqual(leftHandOperand, rightHandOperand, options) {\n  return iterableEqual(getGeneratorEntries(leftHandOperand), getGeneratorEntries(rightHandOperand), options);\n}\n\n/*!\n * Determine if the given object has an @@iterator function.\n *\n * @param {Object} target\n * @return {Boolean} `true` if the object has an @@iterator function.\n */\nfunction hasIteratorFunction(target) {\n  return typeof Symbol !== 'undefined' &&\n    typeof target === 'object' &&\n    typeof Symbol.iterator !== 'undefined' &&\n    typeof target[Symbol.iterator] === 'function';\n}\n\n/*!\n * Gets all iterator entries from the given Object. If the Object has no @@iterator function, returns an empty array.\n * This will consume the iterator - which could have side effects depending on the @@iterator implementation.\n *\n * @param {Object} target\n * @returns {Array} an array of entries from the @@iterator function\n */\nfunction getIteratorEntries(target) {\n  if (hasIteratorFunction(target)) {\n    try {\n      return getGeneratorEntries(target[Symbol.iterator]());\n    } catch (iteratorError) {\n      return [];\n    }\n  }\n  return [];\n}\n\n/*!\n * Gets all entries from a Generator. This will consume the generator - which could have side effects.\n *\n * @param {Generator} target\n * @returns {Array} an array of entries from the Generator.\n */\nfunction getGeneratorEntries(generator) {\n  var generatorResult = generator.next();\n  var accumulator = [ generatorResult.value ];\n  while (generatorResult.done === false) {\n    generatorResult = generator.next();\n    accumulator.push(generatorResult.value);\n  }\n  return accumulator;\n}\n\n/*!\n * Gets all own and inherited enumerable keys from a target.\n *\n * @param {Object} target\n * @returns {Array} an array of own and inherited enumerable keys from the target.\n */\nfunction getEnumerableKeys(target) {\n  var keys = [];\n  for (var key in target) {\n    keys.push(key);\n  }\n  return keys;\n}\n\n/*!\n * Determines if two objects have matching values, given a set of keys. Defers to deepEqual for the equality check of\n * each key. If any value of the given key is not equal, the function will return false (early).\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Array} keys An array of keys to compare the values of leftHandOperand and rightHandOperand against\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\nfunction keysEqual(leftHandOperand, rightHandOperand, keys, options) {\n  var length = keys.length;\n  if (length === 0) {\n    return true;\n  }\n  for (var i = 0; i < length; i += 1) {\n    if (deepEqual(leftHandOperand[keys[i]], rightHandOperand[keys[i]], options) === false) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*!\n * Recursively check the equality of two Objects. Once basic sameness has been established it will defer to `deepEqual`\n * for each enumerable key in the object.\n *\n * @param {Mixed} leftHandOperand\n * @param {Mixed} rightHandOperand\n * @param {Object} [options] (Optional)\n * @return {Boolean} result\n */\n\nfunction objectEqual(leftHandOperand, rightHandOperand, options) {\n  var leftHandKeys = getEnumerableKeys(leftHandOperand);\n  var rightHandKeys = getEnumerableKeys(rightHandOperand);\n  if (leftHandKeys.length && leftHandKeys.length === rightHandKeys.length) {\n    leftHandKeys.sort();\n    rightHandKeys.sort();\n    if (iterableEqual(leftHandKeys, rightHandKeys) === false) {\n      return false;\n    }\n    return keysEqual(leftHandOperand, rightHandOperand, leftHandKeys, options);\n  }\n\n  var leftHandEntries = getIteratorEntries(leftHandOperand);\n  var rightHandEntries = getIteratorEntries(rightHandOperand);\n  if (leftHandEntries.length && leftHandEntries.length === rightHandEntries.length) {\n    leftHandEntries.sort();\n    rightHandEntries.sort();\n    return iterableEqual(leftHandEntries, rightHandEntries, options);\n  }\n\n  if (leftHandKeys.length === 0 &&\n      leftHandEntries.length === 0 &&\n      rightHandKeys.length === 0 &&\n      rightHandEntries.length === 0) {\n    return true;\n  }\n\n  return false;\n}\n\n/*!\n * Returns true if the argument is a primitive.\n *\n * This intentionally returns true for all objects that can be compared by reference,\n * including functions and symbols.\n *\n * @param {Mixed} value\n * @return {Boolean} result\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object';\n}\n",
    "'use strict';\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar getPrototypeOfExists = typeof Object.getPrototypeOf === 'function';\nvar promiseExists = typeof Promise === 'function';\nvar globalObject = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : self; // eslint-disable-line\nvar isDom = 'location' in globalObject && 'document' in globalObject;\nvar htmlElementExists = typeof HTMLElement !== 'undefined';\nvar isArrayExists = typeof Array.isArray === 'function';\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = getPrototypeOfExists && setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = getPrototypeOfExists && mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nmodule.exports = function typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (isArrayExists && Array.isArray(obj)) {\n    return 'Array';\n  }\n\n  if (isDom) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (obj === globalObject.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (obj === globalObject.document) {\n      return 'Document';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n     * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n     * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n     *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n     */\n    if (obj === (globalObject.navigator || {}).mimeTypes) {\n      return 'MimeTypeArray';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n     * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n     * Test: `Object.prototype.toString.call(navigator.plugins)``\n     *  - IE <=10 === \"[object MSPluginsCollection]\"\n     */\n    if (obj === (globalObject.navigator || {}).plugins) {\n      return 'PluginArray';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n     * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n     * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n     *  - IE <=10 === \"[object HTMLBlockElement]\"\n     */\n    if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {\n      return 'HTMLQuoteElement';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n     * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     * Test: Object.prototype.toString.call(document.createElement('td'))\n     *  - Chrome === \"[object HTMLTableCellElement]\"\n     *  - Firefox === \"[object HTMLTableCellElement]\"\n     *  - Safari === \"[object HTMLTableCellElement]\"\n     */\n    if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'TD') {\n      return 'HTMLTableDataCellElement';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n     * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     * Test: Object.prototype.toString.call(document.createElement('th'))\n     *  - Chrome === \"[object HTMLTableCellElement]\"\n     *  - Firefox === \"[object HTMLTableCellElement]\"\n     *  - Safari === \"[object HTMLTableCellElement]\"\n     */\n    if (htmlElementExists && obj instanceof HTMLElement && obj.tagName === 'TH') {\n      return 'HTMLTableHeaderCellElement';\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  if (getPrototypeOfExists) {\n    var objPrototype = Object.getPrototypeOf(obj);\n    /* ! Speed optimisation\n    * Pre:\n    *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n    *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n    * Post:\n    *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n    *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n    */\n    if (objPrototype === RegExp.prototype) {\n      return 'RegExp';\n    }\n\n    /* ! Speed optimisation\n    * Pre:\n    *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n    * Post:\n    *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n    */\n    if (objPrototype === Date.prototype) {\n      return 'Date';\n    }\n\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n     * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n     * Test: `Object.prototype.toString.call(Promise.resolve())``\n     *  - Chrome <=47 === \"[object Object]\"\n     *  - Edge <=20 === \"[object Object]\"\n     *  - Firefox 29-Latest === \"[object Promise]\"\n     *  - Safari 7.1-Latest === \"[object Promise]\"\n     */\n    if (promiseExists && objPrototype === Promise.prototype) {\n      return 'Promise';\n    }\n\n    /* ! Speed optimisation\n    * Pre:\n    *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n    * Post:\n    *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n    */\n    if (setExists && objPrototype === Set.prototype) {\n      return 'Set';\n    }\n\n    /* ! Speed optimisation\n    * Pre:\n    *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n    * Post:\n    *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n    */\n    if (mapExists && objPrototype === Map.prototype) {\n      return 'Map';\n    }\n\n    /* ! Speed optimisation\n    * Pre:\n    *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n    * Post:\n    *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n    */\n    if (weakSetExists && objPrototype === WeakSet.prototype) {\n      return 'WeakSet';\n    }\n\n    /* ! Speed optimisation\n    * Pre:\n    *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n    * Post:\n    *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n    */\n    if (weakMapExists && objPrototype === WeakMap.prototype) {\n      return 'WeakMap';\n    }\n\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n     * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n     * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n    if (dataViewExists && objPrototype === DataView.prototype) {\n      return 'DataView';\n    }\n\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n     * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n     * Test: `Object.prototype.toString.call(new Map().entries())``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n    if (mapExists && objPrototype === mapIteratorPrototype) {\n      return 'Map Iterator';\n    }\n\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n     * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n     * Test: `Object.prototype.toString.call(new Set().entries())``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n    if (setExists && objPrototype === setIteratorPrototype) {\n      return 'Set Iterator';\n    }\n\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n     * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n     * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n    if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n      return 'Array Iterator';\n    }\n\n    /* ! Spec Conformance\n     * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n     * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n     * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n     *  - Edge <=13 === \"[object Object]\"\n     */\n    if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n      return 'String Iterator';\n    }\n\n    /* ! Speed optimisation\n    * Pre:\n    *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n    * Post:\n    *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n    */\n    if (objPrototype === null) {\n      return 'Object';\n    }\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n};\n\nmodule.exports.typeDetect = module.exports;\n",
    "'use strict';\n\n/* !\n * Chai - getFuncName utility\n * Copyright(c) 2012-2016 Jake Luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\n\n/**\n * ### .getFuncName(constructorFn)\n *\n * Returns the name of a function.\n * When a non-function instance is passed, returns `null`.\n * This also includes a polyfill function if `aFunc.name` is not defined.\n *\n * @name getFuncName\n * @param {Function} funct\n * @namespace Utils\n * @api public\n */\n\nvar toString = Function.prototype.toString;\nvar functionNameMatch = /\\s*function(?:\\s|\\s*\\/\\*[^(?:*\\/)]+\\*\\/\\s*)*([^\\s\\(\\/]+)/;\nfunction getFuncName(aFunc) {\n  if (typeof aFunc !== 'function') {\n    return null;\n  }\n\n  var name = '';\n  if (typeof Function.prototype.name === 'undefined' && typeof aFunc.name === 'undefined') {\n    // Here we run a polyfill if Function does not support the `name` property and if aFunc.name is not defined\n    var match = toString.call(aFunc).match(functionNameMatch);\n    if (match) {\n      name = match[1];\n    }\n  } else {\n    // If we've got a `name` property we just use it\n    name = aFunc.name;\n  }\n\n  return name;\n}\n\nmodule.exports = getFuncName;\n",
    "'use strict';\n\nvar v4 = '(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\\\\.(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])){3}';\nvar v6 = '(?:(?:[0-9a-fA-F:]){1,4}(?:(?::(?:[0-9a-fA-F]){1,4}|:)){2,7})+';\n\nvar ip = module.exports = function (opts) {\n\topts = opts || {};\n\treturn opts.exact ? new RegExp('(?:^' + v4 + '$)|(?:^' + v6 + '$)') :\n\t                    new RegExp('(?:' + v4 + ')|(?:' + v6 + ')', 'g');\n};\n\nip.v4 = function (opts) {\n\topts = opts || {};\n\treturn opts.exact ? new RegExp('^' + v4 + '$') : new RegExp(v4, 'g');\n};\n\nip.v6 = function (opts) {\n\topts = opts || {};\n\treturn opts.exact ? new RegExp('^' + v6 + '$') : new RegExp(v6, 'g');\n};\n",
    "'use strict';\nvar ipRegex = require('ip-regex');\n\nvar ip = module.exports = function (str) {\n\treturn ipRegex({exact: true}).test(str);\n};\n\nip.v4 = function (str) {\n\treturn ipRegex.v4({exact: true}).test(str);\n};\n\nip.v6 = function (str) {\n\treturn ipRegex.v6({exact: true}).test(str);\n};\n",
    "'use strict';\n\n/* !\n * Chai - pathval utility\n * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>\n * @see https://github.com/logicalparadox/filtr\n * MIT Licensed\n */\n\n/**\n * ### .hasProperty(object, name)\n *\n * This allows checking whether an object has own\n * or inherited from prototype chain named property.\n *\n * Basically does the same thing as the `in`\n * operator but works properly with null/undefined values\n * and other primitives.\n *\n *     var obj = {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *\n * The following would be the results.\n *\n *     hasProperty(obj, 'str');  // true\n *     hasProperty(obj, 'constructor');  // true\n *     hasProperty(obj, 'bar');  // false\n *\n *     hasProperty(obj.str, 'length'); // true\n *     hasProperty(obj.str, 1);  // true\n *     hasProperty(obj.str, 5);  // false\n *\n *     hasProperty(obj.arr, 'length');  // true\n *     hasProperty(obj.arr, 2);  // true\n *     hasProperty(obj.arr, 3);  // false\n *\n * @param {Object} object\n * @param {String|Symbol} name\n * @returns {Boolean} whether it exists\n * @namespace Utils\n * @name hasProperty\n * @api public\n */\n\nfunction hasProperty(obj, name) {\n  if (typeof obj === 'undefined' || obj === null) {\n    return false;\n  }\n\n  // The `in` operator does not work with primitives.\n  return name in Object(obj);\n}\n\n/* !\n * ## parsePath(path)\n *\n * Helper function used to parse string object\n * paths. Use in conjunction with `internalGetPathValue`.\n *\n *      var parsed = parsePath('myobject.property.subprop');\n *\n * ### Paths:\n *\n * * Can be infinitely deep and nested.\n * * Arrays are also valid using the formal `myobject.document[3].property`.\n * * Literal dots and brackets (not delimiter) must be backslash-escaped.\n *\n * @param {String} path\n * @returns {Object} parsed\n * @api private\n */\n\nfunction parsePath(path) {\n  var str = path.replace(/([^\\\\])\\[/g, '$1.[');\n  var parts = str.match(/(\\\\\\.|[^.]+?)+/g);\n  return parts.map(function mapMatches(value) {\n    var regexp = /^\\[(\\d+)\\]$/;\n    var mArr = regexp.exec(value);\n    var parsed = null;\n    if (mArr) {\n      parsed = { i: parseFloat(mArr[1]) };\n    } else {\n      parsed = { p: value.replace(/\\\\([.\\[\\]])/g, '$1') };\n    }\n\n    return parsed;\n  });\n}\n\n/* !\n * ## internalGetPathValue(obj, parsed[, pathDepth])\n *\n * Helper companion function for `.parsePath` that returns\n * the value located at the parsed address.\n *\n *      var value = getPathValue(obj, parsed);\n *\n * @param {Object} object to search against\n * @param {Object} parsed definition from `parsePath`.\n * @param {Number} depth (nesting level) of the property we want to retrieve\n * @returns {Object|Undefined} value\n * @api private\n */\n\nfunction internalGetPathValue(obj, parsed, pathDepth) {\n  var temporaryValue = obj;\n  var res = null;\n  pathDepth = (typeof pathDepth === 'undefined' ? parsed.length : pathDepth);\n\n  for (var i = 0; i < pathDepth; i++) {\n    var part = parsed[i];\n    if (temporaryValue) {\n      if (typeof part.p === 'undefined') {\n        temporaryValue = temporaryValue[part.i];\n      } else {\n        temporaryValue = temporaryValue[part.p];\n      }\n\n      if (i === (pathDepth - 1)) {\n        res = temporaryValue;\n      }\n    }\n  }\n\n  return res;\n}\n\n/* !\n * ## internalSetPathValue(obj, value, parsed)\n *\n * Companion function for `parsePath` that sets\n * the value located at a parsed address.\n *\n *  internalSetPathValue(obj, 'value', parsed);\n *\n * @param {Object} object to search and define on\n * @param {*} value to use upon set\n * @param {Object} parsed definition from `parsePath`\n * @api private\n */\n\nfunction internalSetPathValue(obj, val, parsed) {\n  var tempObj = obj;\n  var pathDepth = parsed.length;\n  var part = null;\n  // Here we iterate through every part of the path\n  for (var i = 0; i < pathDepth; i++) {\n    var propName = null;\n    var propVal = null;\n    part = parsed[i];\n\n    // If it's the last part of the path, we set the 'propName' value with the property name\n    if (i === (pathDepth - 1)) {\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Now we set the property with the name held by 'propName' on object with the desired val\n      tempObj[propName] = val;\n    } else if (typeof part.p !== 'undefined' && tempObj[part.p]) {\n      tempObj = tempObj[part.p];\n    } else if (typeof part.i !== 'undefined' && tempObj[part.i]) {\n      tempObj = tempObj[part.i];\n    } else {\n      // If the obj doesn't have the property we create one with that name to define it\n      var next = parsed[i + 1];\n      // Here we set the name of the property which will be defined\n      propName = typeof part.p === 'undefined' ? part.i : part.p;\n      // Here we decide if this property will be an array or a new object\n      propVal = typeof next.p === 'undefined' ? [] : {};\n      tempObj[propName] = propVal;\n      tempObj = tempObj[propName];\n    }\n  }\n}\n\n/**\n * ### .getPathInfo(object, path)\n *\n * This allows the retrieval of property info in an\n * object given a string path.\n *\n * The path info consists of an object with the\n * following properties:\n *\n * * parent - The parent object of the property referenced by `path`\n * * name - The name of the final property, a number if it was an array indexer\n * * value - The value of the property, if it exists, otherwise `undefined`\n * * exists - Whether the property exists or not\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} info\n * @namespace Utils\n * @name getPathInfo\n * @api public\n */\n\nfunction getPathInfo(obj, path) {\n  var parsed = parsePath(path);\n  var last = parsed[parsed.length - 1];\n  var info = {\n    parent: parsed.length > 1 ? internalGetPathValue(obj, parsed, parsed.length - 1) : obj,\n    name: last.p || last.i,\n    value: internalGetPathValue(obj, parsed),\n  };\n  info.exists = hasProperty(info.parent, info.name);\n\n  return info;\n}\n\n/**\n * ### .getPathValue(object, path)\n *\n * This allows the retrieval of values in an\n * object given a string path.\n *\n *     var obj = {\n *         prop1: {\n *             arr: ['a', 'b', 'c']\n *           , str: 'Hello'\n *         }\n *       , prop2: {\n *             arr: [ { nested: 'Universe' } ]\n *           , str: 'Hello again!'\n *         }\n *     }\n *\n * The following would be the results.\n *\n *     getPathValue(obj, 'prop1.str'); // Hello\n *     getPathValue(obj, 'prop1.att[2]'); // b\n *     getPathValue(obj, 'prop2.arr[0].nested'); // Universe\n *\n * @param {Object} object\n * @param {String} path\n * @returns {Object} value or `undefined`\n * @namespace Utils\n * @name getPathValue\n * @api public\n */\n\nfunction getPathValue(obj, path) {\n  var info = getPathInfo(obj, path);\n  return info.value;\n}\n\n/**\n * ### .setPathValue(object, path, value)\n *\n * Define the value in an object at a given string path.\n *\n * ```js\n * var obj = {\n *     prop1: {\n *         arr: ['a', 'b', 'c']\n *       , str: 'Hello'\n *     }\n *   , prop2: {\n *         arr: [ { nested: 'Universe' } ]\n *       , str: 'Hello again!'\n *     }\n * };\n * ```\n *\n * The following would be acceptable.\n *\n * ```js\n * var properties = require('tea-properties');\n * properties.set(obj, 'prop1.str', 'Hello Universe!');\n * properties.set(obj, 'prop1.arr[2]', 'B');\n * properties.set(obj, 'prop2.arr[0].nested.value', { hello: 'universe' });\n * ```\n *\n * @param {Object} object\n * @param {String} path\n * @param {Mixed} value\n * @api private\n */\n\nfunction setPathValue(obj, path, val) {\n  var parsed = parsePath(path);\n  internalSetPathValue(obj, val, parsed);\n  return obj;\n}\n\nmodule.exports = {\n  hasProperty: hasProperty,\n  getPathInfo: getPathInfo,\n  getPathValue: getPathValue,\n  setPathValue: setPathValue,\n};\n",
    "/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n",
    "'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n",
    "'use strict';\n\n/* !\n * type-detect\n * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>\n * MIT Licensed\n */\nvar promiseExists = typeof Promise === 'function';\nvar globalObject = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : self; // eslint-disable-line\nvar isDom = 'location' in globalObject && 'document' in globalObject;\nvar symbolExists = typeof Symbol !== 'undefined';\nvar mapExists = typeof Map !== 'undefined';\nvar setExists = typeof Set !== 'undefined';\nvar weakMapExists = typeof WeakMap !== 'undefined';\nvar weakSetExists = typeof WeakSet !== 'undefined';\nvar dataViewExists = typeof DataView !== 'undefined';\nvar symbolIteratorExists = symbolExists && typeof Symbol.iterator !== 'undefined';\nvar symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== 'undefined';\nvar setEntriesExists = setExists && typeof Set.prototype.entries === 'function';\nvar mapEntriesExists = mapExists && typeof Map.prototype.entries === 'function';\nvar setIteratorPrototype = setEntriesExists && Object.getPrototypeOf(new Set().entries());\nvar mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf(new Map().entries());\nvar arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === 'function';\nvar arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());\nvar stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === 'function';\nvar stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(''[Symbol.iterator]());\nvar toStringLeftSliceLength = 8;\nvar toStringRightSliceLength = -1;\n/**\n * ### typeOf (obj)\n *\n * Uses `Object.prototype.toString` to determine the type of an object,\n * normalising behaviour across engine versions & well optimised.\n *\n * @param {Mixed} object\n * @return {String} object type\n * @api public\n */\nmodule.exports = function typeDetect(obj) {\n  /* ! Speed optimisation\n   * Pre:\n   *   string literal     x 3,039,035 ops/sec ±1.62% (78 runs sampled)\n   *   boolean literal    x 1,424,138 ops/sec ±4.54% (75 runs sampled)\n   *   number literal     x 1,653,153 ops/sec ±1.91% (82 runs sampled)\n   *   undefined          x 9,978,660 ops/sec ±1.92% (75 runs sampled)\n   *   function           x 2,556,769 ops/sec ±1.73% (77 runs sampled)\n   * Post:\n   *   string literal     x 38,564,796 ops/sec ±1.15% (79 runs sampled)\n   *   boolean literal    x 31,148,940 ops/sec ±1.10% (79 runs sampled)\n   *   number literal     x 32,679,330 ops/sec ±1.90% (78 runs sampled)\n   *   undefined          x 32,363,368 ops/sec ±1.07% (82 runs sampled)\n   *   function           x 31,296,870 ops/sec ±0.96% (83 runs sampled)\n   */\n  var typeofObj = typeof obj;\n  if (typeofObj !== 'object') {\n    return typeofObj;\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   null               x 28,645,765 ops/sec ±1.17% (82 runs sampled)\n   * Post:\n   *   null               x 36,428,962 ops/sec ±1.37% (84 runs sampled)\n   */\n  if (obj === null) {\n    return 'null';\n  }\n\n  /* ! Spec Conformance\n   * Test: `Object.prototype.toString.call(window)``\n   *  - Node === \"[object global]\"\n   *  - Chrome === \"[object global]\"\n   *  - Firefox === \"[object Window]\"\n   *  - PhantomJS === \"[object Window]\"\n   *  - Safari === \"[object Window]\"\n   *  - IE 11 === \"[object Window]\"\n   *  - IE Edge === \"[object Window]\"\n   * Test: `Object.prototype.toString.call(this)``\n   *  - Chrome Worker === \"[object global]\"\n   *  - Firefox Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - Safari Worker === \"[object DedicatedWorkerGlobalScope]\"\n   *  - IE 11 Worker === \"[object WorkerGlobalScope]\"\n   *  - IE Edge Worker === \"[object WorkerGlobalScope]\"\n   */\n  if (obj === globalObject) {\n    return 'global';\n  }\n\n  /* ! Speed optimisation\n   * Pre:\n   *   array literal      x 2,888,352 ops/sec ±0.67% (82 runs sampled)\n   * Post:\n   *   array literal      x 22,479,650 ops/sec ±0.96% (81 runs sampled)\n   */\n  if (\n    Array.isArray(obj) &&\n    (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))\n  ) {\n    return 'Array';\n  }\n\n  if (isDom) {\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/browsers.html#location)\n     * WhatWG HTML$7.7.3 - The `Location` interface\n     * Test: `Object.prototype.toString.call(window.location)``\n     *  - IE <=11 === \"[object Object]\"\n     *  - IE Edge <=13 === \"[object Object]\"\n     */\n    if (obj === globalObject.location) {\n      return 'Location';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#document)\n     * WhatWG HTML$3.1.1 - The `Document` object\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-26809268)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     *       WhatWG HTML states:\n     *         > For historical reasons, Window objects must also have a\n     *         > writable, configurable, non-enumerable property named\n     *         > HTMLDocument whose value is the Document interface object.\n     * Test: `Object.prototype.toString.call(document)``\n     *  - Chrome === \"[object HTMLDocument]\"\n     *  - Firefox === \"[object HTMLDocument]\"\n     *  - Safari === \"[object HTMLDocument]\"\n     *  - IE <=10 === \"[object Document]\"\n     *  - IE 11 === \"[object HTMLDocument]\"\n     *  - IE Edge <=13 === \"[object HTMLDocument]\"\n     */\n    if (obj === globalObject.document) {\n      return 'Document';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/webappapis.html#mimetypearray)\n     * WhatWG HTML$8.6.1.5 - Plugins - Interface MimeTypeArray\n     * Test: `Object.prototype.toString.call(navigator.mimeTypes)``\n     *  - IE <=10 === \"[object MSMimeTypesCollection]\"\n     */\n    if (obj === (globalObject.navigator || {}).mimeTypes) {\n      return 'MimeTypeArray';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n     * WhatWG HTML$8.6.1.5 - Plugins - Interface PluginArray\n     * Test: `Object.prototype.toString.call(navigator.plugins)``\n     *  - IE <=10 === \"[object MSPluginsCollection]\"\n     */\n    if (obj === (globalObject.navigator || {}).plugins) {\n      return 'PluginArray';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/multipage/webappapis.html#pluginarray)\n     * WhatWG HTML$4.4.4 - The `blockquote` element - Interface `HTMLQuoteElement`\n     * Test: `Object.prototype.toString.call(document.createElement('blockquote'))``\n     *  - IE <=10 === \"[object HTMLBlockElement]\"\n     */\n    if (obj instanceof HTMLElement && obj.tagName === 'BLOCKQUOTE') {\n      return 'HTMLQuoteElement';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#htmltabledatacellelement)\n     * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableDataCellElement`\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     * Test: Object.prototype.toString.call(document.createElement('td'))\n     *  - Chrome === \"[object HTMLTableCellElement]\"\n     *  - Firefox === \"[object HTMLTableCellElement]\"\n     *  - Safari === \"[object HTMLTableCellElement]\"\n     */\n    if (obj instanceof HTMLElement && obj.tagName === 'TD') {\n      return 'HTMLTableDataCellElement';\n    }\n\n    /* ! Spec Conformance\n     * (https://html.spec.whatwg.org/#htmltableheadercellelement)\n     * WhatWG HTML$4.9.9 - The `td` element - Interface `HTMLTableHeaderCellElement`\n     * Note: Most browsers currently adher to the W3C DOM Level 2 spec\n     *       (https://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-82915075)\n     *       which suggests that browsers should use HTMLTableCellElement for\n     *       both TD and TH elements. WhatWG separates these.\n     * Test: Object.prototype.toString.call(document.createElement('th'))\n     *  - Chrome === \"[object HTMLTableCellElement]\"\n     *  - Firefox === \"[object HTMLTableCellElement]\"\n     *  - Safari === \"[object HTMLTableCellElement]\"\n     */\n    if (obj instanceof HTMLElement && obj.tagName === 'TH') {\n      return 'HTMLTableHeaderCellElement';\n    }\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   Float64Array       x 625,644 ops/sec ±1.58% (80 runs sampled)\n  *   Float32Array       x 1,279,852 ops/sec ±2.91% (77 runs sampled)\n  *   Uint32Array        x 1,178,185 ops/sec ±1.95% (83 runs sampled)\n  *   Uint16Array        x 1,008,380 ops/sec ±2.25% (80 runs sampled)\n  *   Uint8Array         x 1,128,040 ops/sec ±2.11% (81 runs sampled)\n  *   Int32Array         x 1,170,119 ops/sec ±2.88% (80 runs sampled)\n  *   Int16Array         x 1,176,348 ops/sec ±5.79% (86 runs sampled)\n  *   Int8Array          x 1,058,707 ops/sec ±4.94% (77 runs sampled)\n  *   Uint8ClampedArray  x 1,110,633 ops/sec ±4.20% (80 runs sampled)\n  * Post:\n  *   Float64Array       x 7,105,671 ops/sec ±13.47% (64 runs sampled)\n  *   Float32Array       x 5,887,912 ops/sec ±1.46% (82 runs sampled)\n  *   Uint32Array        x 6,491,661 ops/sec ±1.76% (79 runs sampled)\n  *   Uint16Array        x 6,559,795 ops/sec ±1.67% (82 runs sampled)\n  *   Uint8Array         x 6,463,966 ops/sec ±1.43% (85 runs sampled)\n  *   Int32Array         x 5,641,841 ops/sec ±3.49% (81 runs sampled)\n  *   Int16Array         x 6,583,511 ops/sec ±1.98% (80 runs sampled)\n  *   Int8Array          x 6,606,078 ops/sec ±1.74% (81 runs sampled)\n  *   Uint8ClampedArray  x 6,602,224 ops/sec ±1.77% (83 runs sampled)\n  */\n  var stringTag = (symbolToStringTagExists && obj[Symbol.toStringTag]);\n  if (typeof stringTag === 'string') {\n    return stringTag;\n  }\n\n  var objPrototype = Object.getPrototypeOf(obj);\n  /* ! Speed optimisation\n  * Pre:\n  *   regex literal      x 1,772,385 ops/sec ±1.85% (77 runs sampled)\n  *   regex constructor  x 2,143,634 ops/sec ±2.46% (78 runs sampled)\n  * Post:\n  *   regex literal      x 3,928,009 ops/sec ±0.65% (78 runs sampled)\n  *   regex constructor  x 3,931,108 ops/sec ±0.58% (84 runs sampled)\n  */\n  if (objPrototype === RegExp.prototype) {\n    return 'RegExp';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   date               x 2,130,074 ops/sec ±4.42% (68 runs sampled)\n  * Post:\n  *   date               x 3,953,779 ops/sec ±1.35% (77 runs sampled)\n  */\n  if (objPrototype === Date.prototype) {\n    return 'Date';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-promise.prototype-@@tostringtag)\n   * ES6$25.4.5.4 - Promise.prototype[@@toStringTag] should be \"Promise\":\n   * Test: `Object.prototype.toString.call(Promise.resolve())``\n   *  - Chrome <=47 === \"[object Object]\"\n   *  - Edge <=20 === \"[object Object]\"\n   *  - Firefox 29-Latest === \"[object Promise]\"\n   *  - Safari 7.1-Latest === \"[object Promise]\"\n   */\n  if (promiseExists && objPrototype === Promise.prototype) {\n    return 'Promise';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   set                x 2,222,186 ops/sec ±1.31% (82 runs sampled)\n  * Post:\n  *   set                x 4,545,879 ops/sec ±1.13% (83 runs sampled)\n  */\n  if (setExists && objPrototype === Set.prototype) {\n    return 'Set';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   map                x 2,396,842 ops/sec ±1.59% (81 runs sampled)\n  * Post:\n  *   map                x 4,183,945 ops/sec ±6.59% (82 runs sampled)\n  */\n  if (mapExists && objPrototype === Map.prototype) {\n    return 'Map';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakset            x 1,323,220 ops/sec ±2.17% (76 runs sampled)\n  * Post:\n  *   weakset            x 4,237,510 ops/sec ±2.01% (77 runs sampled)\n  */\n  if (weakSetExists && objPrototype === WeakSet.prototype) {\n    return 'WeakSet';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   weakmap            x 1,500,260 ops/sec ±2.02% (78 runs sampled)\n  * Post:\n  *   weakmap            x 3,881,384 ops/sec ±1.45% (82 runs sampled)\n  */\n  if (weakMapExists && objPrototype === WeakMap.prototype) {\n    return 'WeakMap';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-dataview.prototype-@@tostringtag)\n   * ES6$24.2.4.21 - DataView.prototype[@@toStringTag] should be \"DataView\":\n   * Test: `Object.prototype.toString.call(new DataView(new ArrayBuffer(1)))``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (dataViewExists && objPrototype === DataView.prototype) {\n    return 'DataView';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%mapiteratorprototype%-@@tostringtag)\n   * ES6$23.1.5.2.2 - %MapIteratorPrototype%[@@toStringTag] should be \"Map Iterator\":\n   * Test: `Object.prototype.toString.call(new Map().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (mapExists && objPrototype === mapIteratorPrototype) {\n    return 'Map Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%setiteratorprototype%-@@tostringtag)\n   * ES6$23.2.5.2.2 - %SetIteratorPrototype%[@@toStringTag] should be \"Set Iterator\":\n   * Test: `Object.prototype.toString.call(new Set().entries())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (setExists && objPrototype === setIteratorPrototype) {\n    return 'Set Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%arrayiteratorprototype%-@@tostringtag)\n   * ES6$22.1.5.2.2 - %ArrayIteratorPrototype%[@@toStringTag] should be \"Array Iterator\":\n   * Test: `Object.prototype.toString.call([][Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {\n    return 'Array Iterator';\n  }\n\n  /* ! Spec Conformance\n   * (http://www.ecma-international.org/ecma-262/6.0/index.html#sec-%stringiteratorprototype%-@@tostringtag)\n   * ES6$21.1.5.2.2 - %StringIteratorPrototype%[@@toStringTag] should be \"String Iterator\":\n   * Test: `Object.prototype.toString.call(''[Symbol.iterator]())``\n   *  - Edge <=13 === \"[object Object]\"\n   */\n  if (stringIteratorExists && objPrototype === stringIteratorPrototype) {\n    return 'String Iterator';\n  }\n\n  /* ! Speed optimisation\n  * Pre:\n  *   object from null   x 2,424,320 ops/sec ±1.67% (76 runs sampled)\n  * Post:\n  *   object from null   x 5,838,000 ops/sec ±0.99% (84 runs sampled)\n  */\n  if (objPrototype === null) {\n    return 'Object';\n  }\n\n  return Object\n    .prototype\n    .toString\n    .call(obj)\n    .slice(toStringLeftSliceLength, toStringRightSliceLength);\n};\n\nmodule.exports.typeDetect = module.exports;\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n",
    "'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n"
  ]
}